import telebot
import logging
import sqlite3
import time
from datetime import datetime, timedelta

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite ---
def init_db():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –±–∞–∑—É –¥–∞–Ω–∏—Ö, —Å—Ç–≤–æ—Ä—é—é—á–∏ —Ç–∞–±–ª–∏—Ü—é 'products', —è–∫—â–æ –≤–æ–Ω–∞ —â–µ –Ω–µ —ñ—Å–Ω—É—î."""
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            seller_chat_id INTEGER NOT NULL,
            product_name TEXT NOT NULL,
            price TEXT NOT NULL,
            description TEXT NOT NULL,
            photos TEXT, -- –ó–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ–º–æ —Å–ø–∏—Å–æ–∫ photo_file_id —á–µ—Ä–µ–∑ –∫–æ–º—É
            status TEXT DEFAULT 'pending', -- 'pending', 'approved', 'rejected', 'sold', 'promoted'
            admin_message_id INTEGER, -- ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ—ó –∑–º—ñ–Ω–∏
            channel_message_id INTEGER, -- ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ, —è–∫—â–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ
            promotion_end_date TEXT -- –î–∞—Ç–∞ —ñ —á–∞—Å –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è "–ø—ñ–¥–Ω—è—Ç—Ç—è"
        )
    ''')
    conn.commit()
    conn.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –∞–±–æ –≤–∂–µ —ñ—Å–Ω—É—î.")

# --- 1. –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ ---
TOKEN = '8039977178:AAGS-GbH-lhljGGG6OgJ2iMU_ncB-JzeOvU' # <--- –í–°–¢–ê–í–¢–ï –°–Æ–î–ò –í–ê–® –†–ï–ê–õ–¨–ù–ò–ô –¢–û–ö–ï–ù

# --- 2. ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
# –ó–Ω–∞–π–¥—ñ—Ç—å —Å–≤—ñ–π chat_id —á–µ—Ä–µ–∑ @userinfobot —É Telegram —ñ –≤—Å—Ç–∞–≤—Ç–µ –π–æ–≥–æ —Å—é–¥–∏.
ADMIN_CHAT_ID = 8184456641 # <--- –ó–ê–ú–Ü–ù–Ü–¢–¨ –ù–ê –í–ê–® –†–ï–ê–õ–¨–ù–ò–ô CHAT_ID –ê–î–ú–Ü–ù–ê (–¶–ï –¶–ò–§–†–ò)

# --- 3. ID –∫–∞–Ω–∞–ª—É –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π ---
# ID –∫–∞–Ω–∞–ª—É –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ '-100'.
# –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∞—à –±–æ—Ç —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª—É –∑ –ø—Ä–∞–≤–æ–º –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
CHANNEL_ID = -1002535586055 # <--- –ó–ê–ú–Ü–ù–Ü–¢–¨ –ù–ê –†–ï–ê–õ–¨–ù–ò–ô ID –ö–ê–ù–ê–õ–£
# –Ø–∫—â–æ –∫–∞–Ω–∞–ª –ø—É–±–ª—ñ—á–Ω–∏–π, –≤–∫–∞–∂—ñ—Ç—å –π–æ–≥–æ username (–±–µ–∑ @), —â–æ–± —Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –∫—Ä–∞—Å–∏–≤—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
CHANNEL_USERNAME = "your_channel_username_here" # <--- –ó–ê–ú–Ü–ù–Ü–¢–¨ –ù–ê –†–ï–ê–õ–¨–ù–ò–ô USERNAME –ö–ê–ù–ê–õ–£ (–ù–ê–ü–†–ò–ö–õ–ê–î, "my_awesome_channel"). –Ø–∫—â–æ –∫–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω–∏–π, –∑–∞–ª–∏—à—Ç–µ —è–∫ —î.


# --- 4. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ ---
bot = telebot.TeleBot(TOKEN)

# --- 5. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    handlers=[
                        logging.FileHandler("bot.log", encoding='utf-8'),
                        logging.StreamHandler()
                    ])
logger = logging.getLogger(__name__)

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ ---
def handle_errors(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–∏–Ω—è—Ç–∫—ñ–≤ –≤ –æ–±—Ä–æ–±–Ω–∏–∫–∞—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å."""
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±–Ω–∏–∫—É {func.__name__}: {e}", exc_info=True)
            message = args[0]
            if isinstance(message, telebot.types.Message):
                chat_id = message.chat.id
            elif isinstance(message, telebot.types.CallbackQuery):
                chat_id = message.message.chat.id
            else:
                chat_id = ADMIN_CHAT_ID

            error_message = (
                f"üö® **–ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –í –ë–û–¢–Ü!** üö®\n\n"
                f"**–§—É–Ω–∫—Ü—ñ—è:** `{func.__name__}`\n"
                f"**–ü–æ–º–∏–ª–∫–∞:** `{e}`\n"
                f"**–î–µ—Ç–∞–ª—ñ:** –î–∏–≤—ñ—Ç—å—Å—è –ª–æ–≥–∏ –±–æ—Ç–∞."
            )
            try:
                bot.send_message(ADMIN_CHAT_ID, error_message, parse_mode='Markdown')
                if chat_id != ADMIN_CHAT_ID:
                    bot.send_message(chat_id, "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–∂–µ —Å–ø–æ–≤—ñ—â–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            except Exception as admin_e:
                logger.critical(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –∞–±–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {admin_e}")
    return wrapper

# --- 6. –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ---
user_data = {}

# --- 7. –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start ---
@bot.message_handler(commands=['start'])
@handle_errors
def send_welcome(message):
    chat_id = message.chat.id
    username = message.from_user.first_name if message.from_user.first_name else "–¥—Ä—É–∂–µ"

    # –§–æ—Ä–º—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª
    channel_link = ""
    if CHANNEL_USERNAME != "your_channel_username_here" and CHANNEL_USERNAME:
        channel_link = f"https://t.me/{CHANNEL_USERNAME}"
    elif str(CHANNEL_ID).startswith('-100'):
        # –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–∞–Ω–∞–ª, —Ñ–æ—Ä–º—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑–∞ –π–æ–≥–æ ID
        channel_link = f"https://t.me/c/{str(CHANNEL_ID)[4:]}"
    else:
        channel_link = "https://t.me/your_channel_link_here" # –ó–∞–≥–ª—É—à–∫–∞, —è–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ

    welcome_text = (
        f"–ü—Ä–∏–≤—ñ—Ç, {username}! üëã –Ø —Ç–≤—ñ–π **Sellerbot**. \n"
        f"–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –ª–µ–≥–∫–æ –ø—Ä–æ–¥–∞–≤–∞—Ç–∏ —Ç–∞ –∫—É–ø—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ —É –Ω–∞—à–æ–º—É –∫–æ–º'—é–Ω—ñ—Ç—ñ. \n\n"
        f"‚úÖ –©–æ–± **–ø—Ä–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä**, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É /sell\n"
        f"‚û°Ô∏è –©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è **–ø—Ä–∞–≤–∏–ª–∞ —Ç–∞ –∫–æ–º—ñ—Å—ñ—é**, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /rules\n"
        f"üí∞ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ **–¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–æ–≤–∞—Ä–∏** –º–æ–∂–Ω–∞ —Ç—É—Ç: [–ù–∞—à –∫–∞–Ω–∞–ª]({channel_link}) \n\n"
        f"–ó–≤–µ—Ä–Ω–∏ —É–≤–∞–≥—É: –Ω–∞—à –±–æ—Ç –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—î –æ—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω—ñ, –æ–∫—Ä—ñ–º —Ç–∏—Ö, —â–æ —Ç–∏ —Å–∞–º –Ω–∞–¥–∞—î—à –¥–ª—è –æ–≥–æ–ª–æ—à–µ–Ω—å."
    )
    bot.send_message(chat_id, welcome_text, parse_mode='Markdown', disable_web_page_preview=True)
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –≤—ñ–¥ {chat_id} ({username})")

# --- 8. –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /rules ---
@bot.message_handler(commands=['rules'])
@handle_errors
def send_rules(message):
    chat_id = message.chat.id
    rules_text = (
        f"üìú **–ü—Ä–∞–≤–∏–ª–∞ —Ç–∞ —É–º–æ–≤–∏ –ø—Ä–æ–¥–∞–∂—É:** üìú\n\n"
        f"1.  **–ö–æ–º—ñ—Å—ñ—è:** –ú–∏ –±–µ—Ä–µ–º–æ **10% –∫–æ–º—ñ—Å—ñ—ó** –≤—ñ–¥ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É. –ö–æ–º—ñ—Å—ñ—è —Å–ø–ª–∞—á—É—î—Ç—å—Å—è –ø—Ä–æ–¥–∞–≤—Ü–µ–º –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —É–≥–æ–¥–∏.\n"
        f"    * **–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:** –ö–æ–º—ñ—Å—ñ—é –º–æ–∂–Ω–∞ –ø–µ—Ä–µ—Ä–∞—Ö—É–≤–∞—Ç–∏ –Ω–∞ **Monobank** (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∏ –±—É–¥–µ –Ω–∞–¥–∞–Ω–æ –ø—ñ—Å–ª—è –ø—Ä–æ–¥–∞–∂—É) –∞–±–æ **–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é** (–∞–¥—Ä–µ—Å–∞ –≥–∞–º–∞–Ω—Ü—è –±—É–¥–µ –Ω–∞–¥–∞–Ω–∞).\n"
        f"    * **–¢–µ—Ä–º—ñ–Ω –æ–ø–ª–∞—Ç–∏:** –ü—Ä–æ—Ç—è–≥–æ–º 24 –≥–æ–¥–∏–Ω –ø—ñ—Å–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ–¥–∞–∂.\n"
        f"    * **–ù–∞—Å–ª—ñ–¥–∫–∏ –Ω–µ—Å–ø–ª–∞—Ç–∏:** –ù–µ—Å–ø–ª–∞—Ç–∞ –∫–æ–º—ñ—Å—ñ—ó –ø—Ä–∏–∑–≤–æ–¥–∏—Ç—å –¥–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –≤–∞—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É –¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö –ø—Ä–æ–¥–∞–∂—ñ–≤.\n\n"
        f"2.  **–ü–æ—Ä—è–¥–æ–∫ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è:** –í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏:\n"
        f"    * **–Ø–∫—ñ—Å–Ω–µ —Ñ–æ—Ç–æ:** –ß—ñ—Ç–∫–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É (–º–æ–∂–Ω–∞ –∫—ñ–ª—å–∫–∞).\n"
        f"    * **–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É:** –ö–æ—Ä–æ—Ç–∫–æ —Ç–∞ –∑—Ä–æ–∑—É–º—ñ–ª–æ.\n"
        f"    * **–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å:** –°—Ç–∞–Ω, –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ, –∫–æ–º–ø–ª–µ–∫—Ç, –ø—Ä–∏—á–∏–Ω–∏ –ø—Ä–æ–¥–∞–∂—É —Ç–æ—â–æ.\n"
        f"    * **–¶—ñ–Ω–∞:** –û–±–æ–≤'—è–∑–∫–æ–≤–æ –≤–∫–∞–∑–∞—Ç–∏ –≤–∞–ª—é—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1000 UAH –∞–±–æ 30$).\n"
        f"    * **–ú—ñ—Å—Ü–µ –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è:** –ú—ñ—Å—Ç–æ –∞–±–æ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏.\n"
        f"    * *(–ó–∞ –±–∞–∂–∞–Ω–Ω—è–º) –ö–æ–Ω—Ç–∞–∫—Ç –ø—Ä–æ–¥–∞–≤—Ü—è: –ó–∞–∑–≤–∏—á–∞–π —Ü–µ –≤–∞—à Telegram-–Ω—ñ–∫, —è–∫–∏–π –±–æ—Ç –¥–æ–¥–∞—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.*\n\n"
        f"3.  **–ú–æ–¥–µ—Ä–∞—Ü—ñ—è:** –í—Å—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø—Ä–æ—Ö–æ–¥—è—Ç—å –º–æ–¥–µ—Ä–∞—Ü—ñ—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ú–∏ –∑–∞–ª–∏—à–∞—î–º–æ –∑–∞ —Å–æ–±–æ—é –ø—Ä–∞–≤–æ –≤—ñ–¥–º–æ–≤–∏—Ç–∏ –≤ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –ø—Ä–∏—á–∏–Ω, —è–∫—â–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø—Ä–∞–≤–∏–ª–∞–º –∞–±–æ —Ç–µ–º–∞—Ç–∏—Ü—ñ –∫–∞–Ω–∞–ª—É.\n\n"
        f"4.  **–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å:** –ú–∏ —î –ª–∏—à–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ—é –¥–ª—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω—å. –í—Å—è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å –∑–∞ —è–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É, –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –æ–ø–∏—Å—É —Ç–∞ –±–µ–∑–ø–µ–∫—É —É–≥–æ–¥–∏ –ª–µ–∂–∏—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü—ñ —Ç–∞ –ø–æ–∫—É–ø—Ü—ñ.\n\n"
        f"–î—è–∫—É—î–º–æ –∑–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è —Ç–∞ –±–∞–∂–∞—î–º–æ —É—Å–ø—ñ—à–Ω–∏—Ö –ø—Ä–æ–¥–∞–∂—ñ–≤!"
    )
    bot.send_message(chat_id, rules_text, parse_mode='Markdown')
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /rules –≤—ñ–¥ {chat_id}")

# --- 9. –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /sell ---
@bot.message_handler(commands=['sell'])
@handle_errors
def handle_sell_command(message):
    chat_id = message.chat.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /sell –≤—ñ–¥ {chat_id}")

    if chat_id in user_data:
        bot.send_message(chat_id, "–í–∏ –≤–∂–µ —Ä–æ–∑–ø–æ—á–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è /cancel –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏.")
        return

    user_data[chat_id] = {'step': 'waiting_for_product_name', 'photos': []}
    bot.send_message(chat_id,
                     "–î–æ–±—Ä–µ, –ø–æ—á–Ω—ñ–º–æ –ø—Ä–æ—Ü–µ—Å –ø—Ä–æ–¥–∞–∂—É. \n"
                     "–ë—É–¥—å –ª–∞—Å–∫–∞, **–Ω–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É**, —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç–∏.")

# --- 10. –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –ø—Ä–æ—Ü–µ—Å—É ---
@bot.message_handler(commands=['cancel'])
@handle_errors
def handle_cancel_command(message):
    chat_id = message.chat.id
    if chat_id in user_data:
        del user_data[chat_id]
        bot.send_message(chat_id, "–ü—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ú–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ, —è–∫—â–æ –±–∞–∂–∞—î—Ç–µ.")
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {chat_id} –≤—ñ–¥–º—ñ–Ω–∏–≤ –ø—Ä–æ—Ü–µ—Å.")
    else:
        bot.send_message(chat_id, "–í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É.")

# --- 11. –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ —Ç–æ–≤–∞—Ä—É ---
@bot.message_handler(func=lambda message: message.chat.id in user_data and \
                                         user_data[message.chat.id]['step'] == 'waiting_for_product_name')
@handle_errors
def handle_product_name(message):
    chat_id = message.chat.id
    product_name = message.text.strip()

    if not product_name:
        bot.send_message(chat_id, "–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É.")
        return

    user_data[chat_id]['product_name'] = product_name
    user_data[chat_id]['step'] = 'waiting_for_price'

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {chat_id} –≤–≤—ñ–≤ –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É: {product_name}")
    bot.send_message(chat_id,
                     f"–ß—É–¥–æ–≤–æ! –í–∏ –ø—Ä–æ–¥–∞—î—Ç–µ **{product_name}**. \n"
                     f"–¢–µ–ø–µ—Ä **–≤–≤–µ–¥—ñ—Ç—å –±–∞–∂–∞–Ω—É —Ü—ñ–Ω—É** (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `100 UAH`, `50$`, `—Ü—ñ–Ω–∞ –¥–æ–≥–æ–≤—ñ—Ä–Ω–∞`).")

# --- 12. –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ —Ç–æ–≤–∞—Ä—É ---
@bot.message_handler(func=lambda message: message.chat.id in user_data and \
                                         user_data[message.chat.id]['step'] == 'waiting_for_price')
@handle_errors
def handle_price(message):
    chat_id = message.chat.id
    price = message.text.strip()

    if not price:
        bot.send_message(chat_id, "–¶—ñ–Ω–∞ —Ç–æ–≤–∞—Ä—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É.")
        return

    user_data[chat_id]['price'] = price
    user_data[chat_id]['step'] = 'waiting_for_description'

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {chat_id} –≤–≤—ñ–≤ —Ü—ñ–Ω—É: {price}")
    bot.send_message(chat_id,
                     f"–¶—ñ–Ω–∞ **{price}** –ø—Ä–∏–π–Ω—è—Ç–∞. \n"
                     f"–¢–µ–ø–µ—Ä **–æ–ø–∏—à—ñ—Ç—å –≤–∞—à —Ç–æ–≤–∞—Ä –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ** (—Å—Ç–∞–Ω, –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ, –∫–æ–º–ø–ª–µ–∫—Ç, —Ç–æ—â–æ).")

# --- 13. –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–ø–∏—Å—É —Ç–æ–≤–∞—Ä—É ---
@bot.message_handler(func=lambda message: message.chat.id in user_data and \
                                         user_data[message.chat.id]['step'] == 'waiting_for_description')
@handle_errors
def handle_description(message):
    chat_id = message.chat.id
    description = message.text.strip()

    if not description:
        bot.send_message(chat_id, "–û–ø–∏—Å —Ç–æ–≤–∞—Ä—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å.")
        return

    user_data[chat_id]['description'] = description
    user_data[chat_id]['step'] = 'waiting_for_photos'

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {chat_id} –≤–≤—ñ–≤ –æ–ø–∏—Å.")
    bot.send_message(chat_id,
                     f"–û–ø–∏—Å –¥–æ–¥–∞–Ω–æ. –¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, **–Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó** –≤–∞—à–æ–≥–æ —Ç–æ–≤–∞—Ä—É (–º–æ–∂–Ω–∞ –∫—ñ–ª—å–∫–∞). "
                     f"–ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –±—É–¥—å-—è–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –∫–æ–º–∞–Ω–¥—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ `/done`.")

# --- 14. –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π ---
@bot.message_handler(content_types=['photo'],
                     func=lambda message: message.chat.id in user_data and \
                                          user_data[message.chat.id]['step'] == 'waiting_for_photos')
@handle_errors
def handle_photos(message):
    chat_id = message.chat.id
    if len(user_data[chat_id]['photos']) >= 10:
        bot.send_message(chat_id, "–í–∏ –≤–∂–µ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π (10).")
        return

    photo_file_id = message.photo[-1].file_id
    user_data[chat_id]['photos'].append(photo_file_id)
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {chat_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ñ–æ—Ç–æ: {photo_file_id}")
    bot.send_message(chat_id, f"–§–æ—Ç–æ –ø—Ä–∏–π–Ω—è—Ç–æ! –ù–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –±—É–¥—å-—è–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `/done`), —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏.")

# --- 15. –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è —Ñ–æ—Ç–æ –∞–±–æ —ñ–Ω—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
@bot.message_handler(func=lambda message: message.chat.id in user_data and \
                                         user_data[message.chat.id]['step'] == 'waiting_for_photos' and \
                                         message.text not in ['/sell', '/start', '/rules', '/cancel'])
@handle_errors
def finish_photos_and_send_to_admin(message):
    chat_id = message.chat.id

    if not user_data[chat_id]['photos']:
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é —Ç–æ–≤–∞—Ä—É, –∞–±–æ –≤—ñ–¥–º—ñ–Ω—ñ—Ç—å –ø—Ä–æ—Ü–µ—Å /cancel.")
        return

    product_name = user_data[chat_id]['product_name']
    price = user_data[chat_id]['price']
    description = user_data[chat_id]['description']
    photos_ids = user_data[chat_id]['photos']

    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO products (seller_chat_id, product_name, price, description, photos, status) VALUES (?, ?, ?, ?, ?, ?)",
                   (chat_id, product_name, price, description, ",".join(photos_ids), 'pending'))
    product_id = cursor.lastrowid
    conn.commit()
    conn.close()

    user_data[chat_id]['product_id'] = product_id

    final_user_message = (
        f"‚úÖ **–í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!** ‚úÖ\n\n"
        f"–ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤–∞—à—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é. –û—Å—å —â–æ –º–∏ –æ—Ç—Ä–∏–º–∞–ª–∏:\n"
        f"**–ù–∞–∑–≤–∞:** {product_name}\n"
        f"**–¶—ñ–Ω–∞:** {price}\n"
        f"**–û–ø–∏—Å:** {description}\n"
        f"**–§–æ—Ç–æ:** ({len(photos_ids)} —à—Ç.)\n\n"
        f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç—å –≤–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, —ñ –º–∏ —Å–∫–æ—Ä–æ –æ–ø—É–±–ª—ñ–∫—É—î–º–æ –π–æ–≥–æ —É –∫–∞–Ω–∞–ª—ñ."
        f"–î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Sellerbot! üòä"
    )
    bot.send_message(chat_id, final_user_message, parse_mode='Markdown')
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {chat_id} –∑–∞–≤–µ—Ä—à–∏–≤ –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É: {product_name}. ID: {product_id}. –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    # --- –õ–û–ì–Ü–ö–ê –í–Ü–î–ü–†–ê–í–ö–ò –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–†–£ –¢–ê –ü–£–ë–õ–Ü–ö–ê–¶–Ü–á ---

    markup = telebot.types.InlineKeyboardMarkup()
    approve_button = telebot.types.InlineKeyboardButton("‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"approve_{product_id}")
    reject_button = telebot.types.InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{product_id}")
    markup.add(approve_button, reject_button)

    media = []
    if photos_ids:
        for i, photo_id in enumerate(photos_ids):
            if i == 0:
                caption_text = (
                    f"üîî **–ù–û–í–ï –û–ì–û–õ–û–®–ï–ù–ù–Ø –ù–ê –ú–û–î–ï–†–ê–¶–Ü–Æ!** üîî\n\n"
                    f"**ID –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:** `{product_id}`\n"
                    f"**–í—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:** @{message.from_user.username if message.from_user.username else 'ID:' + str(chat_id)}\n"
                    f"**–ö–æ–Ω—Ç–∞–∫—Ç:** [–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —á–∞—Ç –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º](tg://user?id={chat_id})\n\n"
                    f"**–ù–∞–∑–≤–∞:** {product_name}\n"
                    f"**–¶—ñ–Ω–∞:** {price}\n"
                    f"**–û–ø–∏—Å:** {description}\n"
                )
                media.append(telebot.types.InputMediaPhoto(photo_id, caption=caption_text, parse_mode='Markdown'))
            else:
                media.append(telebot.types.InputMediaPhoto(photo_id))

    if str(ADMIN_CHAT_ID).isdigit():
        try:
            admin_message_id = None
            if media:
                first_photo_media = media[0]
                sent_message = bot.send_photo(ADMIN_CHAT_ID, first_photo_media.media, caption=first_photo_media.caption, parse_mode='Markdown')
                admin_message_id = sent_message.message_id
                if len(media) > 1:
                    bot.send_media_group(ADMIN_CHAT_ID, media[1:])
                bot.send_message(ADMIN_CHAT_ID, "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –¥—ñ—ó:", reply_markup=markup, reply_to_message_id=admin_message_id)
            else:
                admin_notification_text = (
                    f"üîî **–ù–û–í–ï –û–ì–û–õ–û–®–ï–ù–ù–Ø –ù–ê –ú–û–î–ï–†–ê–¶–Ü–Æ!** üîî\n\n"
                    f"**ID –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:** `{product_id}`\n"
                    f"**–í—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:** @{message.from_user.username if message.from_user.username else 'ID:' + str(chat_id)}\n"
                    f"**–ö–æ–Ω—Ç–∞–∫—Ç:** [–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —á–∞—Ç –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º](tg://user?id={chat_id})\n\n"
                    f"**–ù–∞–∑–≤–∞:** {product_name}\n"
                    f"**–¶—ñ–Ω–∞:** {price}\n"
                    f"**–û–ø–∏—Å:** {description}\n"
                )
                sent_message = bot.send_message(ADMIN_CHAT_ID, admin_notification_text, parse_mode='Markdown', reply_markup=markup)
                admin_message_id = sent_message.message_id

            conn = sqlite3.connect('products.db')
            cursor = conn.cursor()
            cursor.execute("UPDATE products SET admin_message_id = ? WHERE id = ?", (admin_message_id, product_id))
            conn.commit()
            conn.close()

            logger.info(f"–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä ID:{product_id} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_CHAT_ID}. admin_message_id: {admin_message_id}")

        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_CHAT_ID}: {e}", exc_info=True)
            bot.send_message(chat_id, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.")
    else:
        logger.warning("ADMIN_CHAT_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–±–æ –Ω–µ —î —á–∏—Å–ª–æ–º. –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        bot.send_message(chat_id, "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∞—à —Ç–æ–≤–∞—Ä –Ω–µ –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó.")

    del user_data[chat_id]

# --- 16. –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è Inline-–∫–Ω–æ–ø–æ–∫ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è/–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è ---
@bot.callback_query_handler(func=lambda call: call.data.startswith('approve_') or call.data.startswith('reject_'))
@handle_errors
def handle_moderation_callback(call):
    admin_chat_id = call.message.chat.id
    message_id = call.message.message_id
    action, product_id_str = call.data.split('_')
    product_id = int(product_id_str)

    if admin_chat_id != ADMIN_CHAT_ID:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.")
        return

    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()

    try:
        if action == 'approve':
            cursor.execute("UPDATE products SET status = 'approved' WHERE id = ?", (product_id,))
            conn.commit()
            logger.info(f"–û–≥–æ–ª–æ—à–µ–Ω–Ω—è ID:{product_id} —Å—Ö–≤–∞–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

            cursor.execute("SELECT seller_chat_id, product_name, price, description, photos FROM products WHERE id = ?", (product_id,))
            product_info = cursor.fetchone()

            if product_info:
                seller_chat_id, name, price, desc, photos_str = product_info
                photos_list = photos_str.split(',') if photos_str else []

                # –§–æ—Ä–º—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                channel_link = ""
                if CHANNEL_USERNAME != "your_channel_username_here" and CHANNEL_USERNAME:
                    channel_link = f"https://t.me/{CHANNEL_USERNAME}"
                elif str(CHANNEL_ID).startswith('-100'):
                    channel_link = f"https://t.me/c/{str(CHANNEL_ID)[4:]}"
                else:
                    channel_link = "https://t.me/your_channel_link_here"

                # –§–æ—Ä–º—É—î–º–æ –ø–æ—Å—Ç –¥–ª—è –∫–∞–Ω–∞–ª—É
                channel_post_text = (
                    f"‚ú® **–ù–û–í–ò–ô –¢–û–í–ê–†!** ‚ú®\n\n"
                    f"**–ù–∞–∑–≤–∞:** {name}\n"
                    f"**–¶—ñ–Ω–∞:** {price}\n"
                    f"**–û–ø–∏—Å:** {desc}\n\n"
                )
                seller_username_link = ""
                try:
                    seller_user_info = bot.get_chat_member(seller_chat_id, seller_chat_id).user
                    if seller_user_info and seller_user_info.username:
                        seller_username_link = f"**–ü—Ä–æ–¥–∞–≤–µ—Ü—å:** @{seller_user_info.username}\n"
                    else:
                         seller_username_link = f"**–ü—Ä–æ–¥–∞–≤–µ—Ü—å:** [–ó–≤'—è–∑–∞—Ç–∏—Å—è](tg://user?id={seller_chat_id})\n"
                except Exception as e:
                    logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ username –ø—Ä–æ–¥–∞–≤—Ü—è {seller_chat_id}: {e}")
                    seller_username_link = f"**–ü—Ä–æ–¥–∞–≤–µ—Ü—å:** [–ó–≤'—è–∑–∞—Ç–∏—Å—è](tg://user?id={seller_chat_id})\n"
                
                channel_post_text += seller_username_link
                channel_post_text += f"[–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—Ä–æ–¥–∞–≤—Ü–µ–º](tg://user?id={seller_chat_id})\n\n"
                # –ó–∞–º—ñ–Ω—é—î–º–æ –ø—Ä–æ–±—ñ–ª–∏, –∫–æ–º–∏ —Ç–∞ –∫—Ä–∞–ø–∫–∏ –Ω–∞ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è –¥–ª—è —Ö–µ—à—Ç–µ–≥—ñ–≤
                channel_post_text += f"#—Ç–æ–≤–∞—Ä #–ø—Ä–æ–¥–∞–∂ #{name.replace(' ', '_').replace('.', '').replace(',', '')}"

                # –ü—É–±–ª—ñ–∫—É—î–º–æ –≤ –∫–∞–Ω–∞–ª
                if str(CHANNEL_ID).startswith('-100'):
                    try:
                        sent_channel_message = None
                        if photos_list:
                            media_to_send = []
                            for i, photo_id in enumerate(photos_list):
                                if i == 0:
                                    media_to_send.append(telebot.types.InputMediaPhoto(photo_id, caption=channel_post_text, parse_mode='Markdown'))
                                else:
                                    media_to_send.append(telebot.types.InputMediaPhoto(photo_id))
                            sent_channel_message = bot.send_media_group(CHANNEL_ID, media_to_send)
                        else:
                            sent_channel_message = bot.send_message(CHANNEL_ID, channel_post_text, parse_mode='Markdown')
                        
                        if sent_channel_message:
                            channel_message_id = sent_channel_message[0].message_id if isinstance(sent_channel_message, list) else sent_channel_message.message_id
                            cursor.execute("UPDATE products SET channel_message_id = ? WHERE id = ?", (channel_message_id, product_id))
                            conn.commit()
                            logger.info(f"–û–≥–æ–ª–æ—à–µ–Ω–Ω—è ID:{product_id} –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ –∑ message_id: {channel_message_id}")

                        bot.send_message(admin_chat_id, f"‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è ID:`{product_id}` —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ!")
                        bot.answer_callback_query(call.id, "–û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å—Ö–≤–∞–ª–µ–Ω–æ —Ç–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!")

                        try:
                            bot.send_message(seller_chat_id, f"üéâ **–í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø—Ä–æ `{name}` —Å—Ö–≤–∞–ª–µ–Ω–æ —Ç–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!**\n"
                                                              f"–ô–æ–≥–æ –º–æ–∂–Ω–∞ –∑–Ω–∞–π—Ç–∏ –≤ –Ω–∞—à–æ–º—É –∫–∞–Ω–∞–ª—ñ: [–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞–Ω–∞–ª—É]({channel_link})")
                        except Exception as e:
                            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–æ–¥–∞–≤—Ü—è {seller_chat_id} –ø—Ä–æ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è: {e}", exc_info=True)

                        # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä—è–¥–æ–∫ —Ç—É—Ç:
                        bot.edit_message_text(f"–û–≥–æ–ª–æ—à–µ–Ω–Ω—è ID:`{product_id}`: **–°–•–í–ê–õ–ï–ù–û**\n\n{channel_post_text}",
                                              admin_chat_id, message_id, parse_mode='Markdown', reply_markup=None)

                    except Exception as e:
                        bot.send_message(admin_chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è ID:`{product_id}` –≤ –∫–∞–Ω–∞–ª: {e}")
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó ID:{product_id}: {e}", exc_info=True)
                else:
                    bot.send_message(admin_chat_id, "CHANNEL_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π. –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.")
                    logger.warning(f"CHANNEL_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è ID:{product_id}.")

            else:
                bot.send_message(admin_chat_id, f"–û–≥–æ–ª–æ—à–µ–Ω–Ω—è ID:`{product_id}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")
                bot.answer_callback_query(call.id, "–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                logger.warning(f"–û–≥–æ–ª–æ—à–µ–Ω–Ω—è {product_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Å—Ö–≤–∞–ª–µ–Ω–Ω—è.")

        elif action == 'reject':
            cursor.execute("UPDATE products SET status = 'rejected' WHERE id = ?", (product_id,))
            conn.commit()
            logger.info(f"–û–≥–æ–ª–æ—à–µ–Ω–Ω—è ID:{product_id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

            cursor.execute("SELECT seller_chat_id, product_name FROM products WHERE id = ?", (product_id,))
            product_info = cursor.fetchone()

            if product_info:
                seller_chat_id, product_name = product_info[0], product_info[1]
                bot.send_message(admin_chat_id, f"‚ùå –û–≥–æ–ª–æ—à–µ–Ω–Ω—è ID:`{product_id}` –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
                bot.answer_callback_query(call.id, "–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")

                try:
                    bot.send_message(seller_chat_id, f"üö´ **–í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø—Ä–æ `{product_name}` –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.**\n"
                                                       f"–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ (/rules) —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É. –ú–æ–∂–ª–∏–≤–æ, –±—É–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ —Ñ–æ—Ç–æ –∞–±–æ –æ–ø–∏—Å–æ–º.")
                except Exception as e:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–æ–¥–∞–≤—Ü—è {seller_chat_id} –ø—Ä–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: {e}", exc_info=True)

                bot.edit_message_text(f"–û–≥–æ–ª–æ—à–µ–Ω–Ω—è ID:`{product_id}`: **–í–Ü–î–•–ò–õ–ï–ù–û**\n"
                                      f"–ë—É–ª–æ: **{product_name}**",
                                      admin_chat_id, message_id, parse_mode='Markdown', reply_markup=None)
            else:
                bot.send_message(admin_chat_id, f"–û–≥–æ–ª–æ—à–µ–Ω–Ω—è ID:`{product_id}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")
                bot.answer_callback_query(call.id, "–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                logger.warning(f"–û–≥–æ–ª–æ—à–µ–Ω–Ω—è {product_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è.")

    except Exception as e:
        bot.send_message(admin_chat_id, f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥—ñ—ó –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {e}")
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –¥–ª—è ID:{product_id}: {e}", exc_info=True)
    finally:
        conn.close()

# --- 17. –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª "–ü—ñ–¥–Ω—è—Ç—Ç—è" –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è (–ø—Ä–æ–º–æ) ---
@bot.message_handler(commands=['promote'])
@handle_errors
def handle_promote_command(message):
    chat_id = message.chat.id
    if chat_id != ADMIN_CHAT_ID:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü—ñ–æ–Ω–æ–≤–∞–Ω–∞ —Å–ø—Ä–æ–±–∞ /promote –≤—ñ–¥ {chat_id}")
        return

    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, product_name FROM products WHERE status = 'approved' ORDER BY id DESC LIMIT 10")
    approved_products = cursor.fetchall()
    conn.close()

    if not approved_products:
        bot.send_message(chat_id, "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î —Å—Ö–≤–∞–ª–µ–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –¥–ª—è –ø—ñ–¥–Ω—è—Ç—Ç—è.")
        return

    markup = telebot.types.InlineKeyboardMarkup()
    for prod_id, prod_name in approved_products:
        markup.add(telebot.types.InlineKeyboardButton(f"ID {prod_id}: {prod_name}", callback_data=f"select_promote_{prod_id}"))
    
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è –ø—ñ–¥–Ω—è—Ç—Ç—è:", reply_markup=markup)
    logger.info(f"–ê–¥–º—ñ–Ω {chat_id} –∑–∞–ø—Ä–æ—Å–∏–≤ —Å–ø–∏—Å–æ–∫ –æ–≥–æ–ª–æ—à–µ–Ω—å –¥–ª—è –ø—ñ–¥–Ω—è—Ç—Ç—è.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('select_promote_'))
@handle_errors
def handle_select_promote(call):
    admin_chat_id = call.message.chat.id
    if admin_chat_id != ADMIN_CHAT_ID:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.")
        return

    action, product_id_str = call.data.split('_', 2)
    product_id = int(product_id_str)

    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute("SELECT product_name, channel_message_id, photos, description, price, seller_chat_id FROM products WHERE id = ? AND status = 'approved'", (product_id,))
    product_info = cursor.fetchone()
    conn.close()

    if not product_info:
        bot.answer_callback_query(call.id, "–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ —Å—Ö–≤–∞–ª–µ–Ω–æ.")
        bot.edit_message_text("–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ —Å—Ö–≤–∞–ª–µ–Ω–æ –¥–ª—è –ø—ñ–¥–Ω—è—Ç—Ç—è.", admin_chat_id, call.message.message_id, reply_markup=None)
        return
    
    name, channel_msg_id, photos_str, desc, price, seller_chat_id = product_info
    photos_list = photos_str.split(',') if photos_str else []

    if channel_msg_id:
        try:
            bot.delete_message(CHANNEL_ID, channel_msg_id)
            logger.info(f"–í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {channel_msg_id} –¥–ª—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è ID:{product_id} –ø–µ—Ä–µ–¥ –ø—ñ–¥–Ω—è—Ç—Ç—è–º.")
        except Exception as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {channel_msg_id} –¥–ª—è ID:{product_id}: {e}", exc_info=True)

    channel_post_text = (
        f"‚ú® **–¢–û–ü-–û–ì–û–õ–û–®–ï–ù–ù–Ø!** ‚ú®\n\n"
        f"**–ù–∞–∑–≤–∞:** {name}\n"
        f"**–¶—ñ–Ω–∞:** {price}\n"
        f"**–û–ø–∏—Å:** {desc}\n\n"
    )
    seller_username_link = ""
    try:
        seller_user_info = bot.get_chat_member(seller_chat_id, seller_chat_id).user
        if seller_user_info and seller_user_info.username:
            seller_username_link = f"**–ü—Ä–æ–¥–∞–≤–µ—Ü—å:** @{seller_user_info.username}\n"
        else:
             seller_username_link = f"**–ü—Ä–æ–¥–∞–≤–µ—Ü—å:** [–ó–≤'—è–∑–∞—Ç–∏—Å—è](tg://user?id={seller_chat_id})\n"
    except Exception as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ username –ø—Ä–æ–¥–∞–≤—Ü—è {seller_chat_id} –¥–ª—è –ø—Ä–æ–º–æ: {e}")
        seller_username_link = f"**–ü—Ä–æ–¥–∞–≤–µ—Ü—å:** [–ó–≤'—è–∑–∞—Ç–∏—Å—è](tg://user?id={seller_chat_id})\n"
    
    channel_post_text += seller_username_link
    channel_post_text += f"[–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—Ä–æ–¥–∞–≤—Ü–µ–º](tg://user?id={seller_chat_id})\n\n"
    channel_post_text += f"#—Ç–æ–≤–∞—Ä #–ø—Ä–æ–¥–∞–∂ #{name.replace(' ', '_').replace('.', '').replace(',', '')} #–ø—Ä–æ–º–æ"


    try:
        sent_channel_message = None
        if photos_list:
            media_to_send = []
            for i, photo_id in enumerate(photos_list):
                if i == 0:
                    media_to_send.append(telebot.types.InputMediaPhoto(photo_id, caption=channel_post_text, parse_mode='Markdown'))
                else:
                    media_to_send.append(telebot.types.InputMediaPhoto(photo_id))
            sent_channel_message = bot.send_media_group(CHANNEL_ID, media_to_send)
        else:
            sent_channel_message = bot.send_message(CHANNEL_ID, channel_post_text, parse_mode='Markdown')
        
        if sent_channel_message:
            new_channel_message_id = sent_channel_message[0].message_id if isinstance(sent_channel_message, list) else sent_channel_message.message_id
            promotion_duration_hours = 24
            promotion_end_time = datetime.now() + timedelta(hours=promotion_duration_hours)
            
            conn = sqlite3.connect('products.db')
            cursor = conn.cursor()
            cursor.execute("UPDATE products SET status = 'promoted', channel_message_id = ?, promotion_end_date = ? WHERE id = ?",
                           (new_channel_message_id, promotion_end_time.isoformat(), product_id))
            conn.commit()
            conn.close()

            bot.answer_callback_query(call.id, f"–û–≥–æ–ª–æ—à–µ–Ω–Ω—è ID:{product_id} –ø—ñ–¥–Ω—è—Ç–æ –Ω–∞ {promotion_duration_hours} –≥–æ–¥–∏–Ω–∏.")
            bot.edit_message_text(f"–û–≥–æ–ª–æ—à–µ–Ω–Ω—è ID:`{product_id}`: **–ü–Ü–î–ù–Ø–¢–û –í –¢–û–ü** (–¥–æ {promotion_end_time.strftime('%Y-%m-%d %H:%M')})\n"
                                  f"–ë—É–ª–æ: **{name}**", admin_chat_id, call.message.message_id, parse_mode='Markdown', reply_markup=None)
            logger.info(f"–û–≥–æ–ª–æ—à–µ–Ω–Ω—è ID:{product_id} –ø—ñ–¥–Ω—è—Ç–æ –≤ —Ç–æ–ø. –ù–æ–≤–∏–π message_id: {new_channel_message_id}")
            
            try:
                bot.send_message(seller_chat_id, f"‚¨ÜÔ∏è **–í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø—Ä–æ `{name}` –ø—ñ–¥–Ω—è—Ç–æ –≤ —Ç–æ–ø –∫–∞–Ω–∞–ª—É!**\n"
                                                  f"–ô–æ–≥–æ –≤–∏–¥–∏–º—ñ—Å—Ç—å –∑–±—ñ–ª—å—à–µ–Ω–æ –Ω–∞ {promotion_duration_hours} –≥–æ–¥–∏–Ω.")
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–æ–¥–∞–≤—Ü—è {seller_chat_id} –ø—Ä–æ –ø—Ä–æ–º–æ: {e}", exc_info=True)


        else:
            bot.answer_callback_query(call.id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ø—Ä–æ–º–æ-–æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.")
            bot.edit_message_text(f"–û–≥–æ–ª–æ—à–µ–Ω–Ω—è ID:`{product_id}`: –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–Ω—è—Ç—Ç—è –≤ —Ç–æ–ø.", admin_chat_id, call.message.message_id, reply_markup=None)

    except Exception as e:
        bot.answer_callback_query(call.id, f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–Ω—è—Ç—Ç—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: {e}")
        bot.edit_message_text(f"–û–≥–æ–ª–æ—à–µ–Ω–Ω—è ID:`{product_id}`: –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–Ω—è—Ç—Ç—è –≤ —Ç–æ–ø: {e}", admin_chat_id, call.message.message_id, reply_markup=None)
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–Ω—è—Ç—Ç—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è ID:{product_id}: {e}", exc_info=True)

# --- 18. –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–µ—Ä–º—ñ–Ω—É "–ø—ñ–¥–Ω—è—Ç—Ç—è" —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–Ω—è—Ç—Ç—è –ø—Ä–æ–º–æ (–¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ) ---
def check_promoted_products():
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    
    cursor.execute("SELECT id, channel_message_id, product_name FROM products WHERE status = 'promoted' AND promotion_end_date <= ?", (datetime.now().isoformat(),))
    expired_promotions = cursor.fetchall()

    for prod_id, msg_id, prod_name in expired_promotions:
        try:
            cursor.execute("UPDATE products SET status = 'approved', promotion_end_date = NULL WHERE id = ?", (prod_id,))
            conn.commit()
            
            logger.info(f"–ü—Ä–æ–º–æ-–∞–∫—Ü—ñ—è –¥–ª—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è ID:{prod_id} '{prod_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ –ø—Ä–æ–º–æ –¥–ª—è ID:{prod_id}: {e}", exc_info=True)
    
    conn.close()


# --- 19. –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /advertise (–∑–∞–≥–æ—Ç–æ–≤–∫–∞) ---
@bot.message_handler(commands=['advertise'])
@handle_errors
def handle_advertise_command(message):
    chat_id = message.chat.id
    
    admin_username = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä" # –ó–∞–≥–ª—É—à–∫–∞
    try:
        admin_user_info = bot.get_chat_member(ADMIN_CHAT_ID, ADMIN_CHAT_ID).user
        if admin_user_info and admin_user_info.username:
            admin_username = admin_user_info.username
    except Exception as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ username –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è /advertise: {e}")

    bot.send_message(chat_id, 
                     "–î—è–∫—É—î–º–æ –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å –¥–æ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏! \n"
                     "–î–ª—è –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è —É–º–æ–≤ —Ç–∞ –≤–∞—Ä—Ç–æ—Å—Ç—ñ, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
                     f"**Telegram:** @{admin_username}\n"
                     f"[–ù–∞–ø–∏—Å–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É](tg://user?id={ADMIN_CHAT_ID})\n\n"
                     "–ú–∏ –æ–±–≥–æ–≤–æ—Ä–∏–º–æ –≤–∞—à—ñ –ø–æ—Ç—Ä–µ–±–∏ —Ç–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω—É—î–º–æ –Ω–∞–π–∫—Ä–∞—â—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏ —É –Ω–∞—à–æ–º—É –±–æ—Ç—ñ —Ç–∞ –∫–∞–Ω–∞–ª—ñ.")
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {chat_id} –∑–∞–ø—Ä–æ—Å–∏–≤ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–µ–∫–ª–∞–º—É.")


# --- 20. –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /invite ---
@bot.message_handler(commands=['invite'])
@handle_errors
def send_invite_link_command(message):
    chat_id = message.chat.id

    channel_link = ""
    if CHANNEL_USERNAME != "your_channel_username_here" and CHANNEL_USERNAME:
        channel_link = f"https://t.me/{CHANNEL_USERNAME}"
    elif str(CHANNEL_ID).startswith('-100'):
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É. –ë–æ—Ç –º–∞—î –±—É—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
            invite_link = bot.export_chat_invite_link(CHANNEL_ID)
            channel_link = invite_link
            logger.info(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É: {invite_link}")
        except telebot.apihelper.ApiTelegramException as e:
            logger.error(f"–ë–æ—Ç –Ω–µ –º–æ–∂–µ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è (–Ω–µ –º–∞—î –ø—Ä–∞–≤ –∞–±–æ –∫–∞–Ω–∞–ª –ø—É–±–ª—ñ—á–Ω–∏–π?): {e}", exc_info=True)
            channel_link = f"https://t.me/c/{str(CHANNEL_ID)[4:]}" # –ú–æ–∂–ª–∏–≤–æ, —Ü–µ —Å—Ç–∞—Ç–∏—á–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ
        except Exception as e:
            logger.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è: {e}", exc_info=True)
            channel_link = "https://t.me/your_channel_link_here_manually" # –ó–∞–≥–ª—É—à–∫–∞, —è–∫—â–æ —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫
    else:
        channel_link = "https://t.me/your_channel_link_here"

    invite_text = (
        f"–ó–∞–ø—Ä–æ—à—É—î–º–æ –≤–∞—Å –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –Ω–∞—à–æ–≥–æ –∫–∞–Ω–∞–ª—É, —â–æ–± –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è!\n\n"
        f"üëâ [–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –∫–∞–Ω–∞–ª—É]({channel_link})"
    )
    
    bot.send_message(chat_id, invite_text, parse_mode='Markdown', disable_web_page_preview=True)
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {chat_id} –∑–∞–ø—Ä–æ—Å–∏–≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª.")


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    init_db()

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –ü–æ—á–∞—Ç–æ–∫ polling...")
    while True:
        try:
            bot.polling(none_stop=True, interval=3)
        except Exception as e:
            logger.critical(f"–°—Ç–∞–ª–∞—Å—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É polling: {e}", exc_info=True)
            logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)