import os
import telebot
from telebot import types
import logging
from datetime import datetime, timedelta, timezone
import re
import json
import requests
from dotenv import load_dotenv

# –Ü–º–ø–æ—Ä—Ç–∏ –¥–ª—è Webhook (Flask)
from flask import Flask, request

# –Ü–º–ø–æ—Ä—Ç–∏ –¥–ª—è PostgreSQL (–∑–∞–º—ñ—Å—Ç—å sqlite3)
import psycopg2
from psycopg2 import sql as pg_sql
from psycopg2 import extras

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É .env
load_dotenv()

# --- 1. –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ë–æ—Ç–∞ ---
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID'))
CHANNEL_ID = int(os.getenv('CHANNEL_ID'))
MONOBANK_CARD_NUMBER = os.getenv('MONOBANK_CARD_NUMBER')
RAPIDAPI_KEY = os.getenv('RAPIDAPI_KEY')
RAPIDAPI_HOST = "free-football-soccer-v1.p.rapidapi.com"
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"

WEBHOOK_URL = os.getenv('WEBHOOK_URL')
DATABASE_URL = os.getenv('DATABASE_URL')

# –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –æ—Å–Ω–æ–≤–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
if not TOKEN:
    print("–ü–æ–º–∏–ª–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è. –í–∏—Ö—ñ–¥.")
    exit(1)
if not RAPIDAPI_KEY:
    print("–ü–æ–º–∏–ª–∫–∞: RAPIDAPI_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è. –í–∏—Ö—ñ–¥.")
    exit(1)
if not DATABASE_URL:
    print("–ü–æ–º–∏–ª–∫–∞: DATABASE_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è. –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ. –í–∏—Ö—ñ–¥.")
    exit(1)

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# --- 2. –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# --- 3. –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–∞–∑–∏ –î–∞–Ω–∏—Ö (PostgreSQL) ---
def get_db_connection():
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö PostgreSQL."""
    try:
        conn = psycopg2.connect(DATABASE_URL, cursor_factory=psycopg2.extras.DictCursor)
        return conn
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}", exc_info=True)
        return None

def init_db():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ç–∞–±–ª–∏—Ü—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö, —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ —ñ—Å–Ω—É—é—Ç—å."""
    conn = None
    try:
        conn = get_db_connection()
        if conn:
            cur = conn.cursor()
            # –¢–∞–±–ª–∏—Ü—è users
            cur.execute(pg_sql.SQL("""
                CREATE TABLE IF NOT EXISTS users (
                    chat_id BIGINT PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    is_blocked BOOLEAN DEFAULT FALSE,
                    blocked_by BIGINT,
                    blocked_at TIMESTAMP WITH TIME ZONE,
                    commission_paid REAL DEFAULT 0,
                    commission_due REAL DEFAULT 0,
                    last_activity TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    joined_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
                );
            """))
            # –¢–∞–±–ª–∏—Ü—è products
            cur.execute(pg_sql.SQL("""
                CREATE TABLE IF NOT EXISTS products (
                    id SERIAL PRIMARY KEY,
                    seller_chat_id BIGINT NOT NULL,
                    seller_username TEXT,
                    product_name TEXT NOT NULL,
                    price TEXT NOT NULL,
                    description TEXT NOT NULL,
                    photos TEXT, -- –ó–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ—Ç—å—Å—è —è–∫ JSON —Ä—è–¥–æ–∫
                    geolocation TEXT, -- –ó–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ—Ç—å—Å—è —è–∫ JSON —Ä—è–¥–æ–∫
                    status TEXT DEFAULT 'pending', -- pending, approved, rejected, sold, expired
                    commission_rate REAL DEFAULT 0.10,
                    commission_amount REAL DEFAULT 0,
                    moderator_id BIGINT,
                    moderated_at TIMESTAMP WITH TIME ZONE,
                    admin_message_id BIGINT,
                    channel_message_id BIGINT,
                    views INTEGER DEFAULT 0,
                    promotion_ends_at TIMESTAMP WITH TIME ZONE,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (seller_chat_id) REFERENCES users (chat_id)
                );
            """))
            # –¢–∞–±–ª–∏—Ü—è conversations (–¥–ª—è AI)
            cur.execute(pg_sql.SQL("""
                CREATE TABLE IF NOT EXISTS conversations (
                    id SERIAL PRIMARY KEY,
                    user_chat_id BIGINT NOT NULL,
                    product_id INTEGER,
                    message_text TEXT,
                    sender_type TEXT, -- 'user' –∞–±–æ 'ai'
                    timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_chat_id) REFERENCES users (chat_id),
                    FOREIGN KEY (product_id) REFERENCES products (id)
                );
            """))
            # –¢–∞–±–ª–∏—Ü—è commission_transactions
            cur.execute(pg_sql.SQL("""
                CREATE TABLE IF NOT EXISTS commission_transactions (
                    id SERIAL PRIMARY KEY,
                    product_id INTEGER NOT NULL,
                    seller_chat_id BIGINT NOT NULL,
                    amount REAL NOT NULL,
                    status TEXT DEFAULT 'pending_payment', -- pending_payment, paid, cancelled
                    payment_details TEXT,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    paid_at TIMESTAMP WITH TIME ZONE,
                    FOREIGN KEY (product_id) REFERENCES products (id),
                    FOREIGN KEY (seller_chat_id) REFERENCES users (chat_id)
                );
            """))
            # –¢–∞–±–ª–∏—Ü—è statistics
            cur.execute(pg_sql.SQL("""
                CREATE TABLE IF NOT EXISTS statistics (
                    id SERIAL PRIMARY KEY,
                    action TEXT NOT NULL,
                    user_id BIGINT,
                    product_id INTEGER,
                    details TEXT,
                    timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
                );
            """))
            conn.commit()
            logger.info("–¢–∞–±–ª–∏—Ü—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∞–±–æ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å.")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

# --- 4. –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –±–∞–≥–∞—Ç–æ—à–∞–≥–æ–≤–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤ ---
user_data = {}

# --- 5. –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ ---
def error_handler(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ —É —Ñ—É–Ω–∫—Ü—ñ—è—Ö –±–æ—Ç–∞."""
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ {func.__name__}: {e}", exc_info=True)
            chat_id_to_notify = ADMIN_CHAT_ID
            if args:
                first_arg = args[0]
                if isinstance(first_arg, types.Message):
                    chat_id_to_notify = first_arg.chat.id
                elif isinstance(first_arg, types.CallbackQuery):
                    chat_id_to_notify = first_arg.message.chat.id
            
            try:
                # –ù–∞–º–∞–≥–∞—î–º–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
                bot.send_message(ADMIN_CHAT_ID, f"üö® –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –±–æ—Ç—ñ!\n–§—É–Ω–∫—Ü—ñ—è: {func.__name__}\n–ü–æ–º–∏–ª–∫–∞: {e}\n–î–∏–≤—ñ—Ç—å—Å—è –¥–µ—Ç–∞–ª—ñ –≤ –ª–æ–≥–∞—Ö Render.")
                # –ù–∞–º–∞–≥–∞—î–º–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É, —è–∫—â–æ —Ü–µ –Ω–µ –∞–¥–º—ñ–Ω
                if chat_id_to_notify != ADMIN_CHAT_ID:
                    bot.send_message(chat_id_to_notify, "üòî –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∂–µ —Å–ø–æ–≤—ñ—â–µ–Ω–∏–π.")
            except Exception as e_notify:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {e_notify}")
    return wrapper

# --- 6. –§—É–Ω–∫—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ —Ç–∞ –∑–∞–≥–∞–ª—å–Ω—ñ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó (–û–ù–û–í–õ–ï–ù–û –î–õ–Ø PostgreSQL) ---
@error_handler
def save_user(message_or_user):
    """–ó–±–µ—Ä—ñ–≥–∞—î –∞–±–æ –æ–Ω–æ–≤–ª—é—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö PostgreSQL."""
    user = None
    chat_id = None

    if isinstance(message_or_user, types.Message):
        user = message_or_user.from_user
        chat_id = message_or_user.chat.id
    elif isinstance(message_or_user, types.User):
        user = message_or_user
        chat_id = user.id
    else:
        logger.warning(f"save_user –æ—Ç—Ä–∏–º–∞–≤ –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø: {type(message_or_user)}")
        return

    if not user or not chat_id:
        logger.warning("save_user: user –∞–±–æ chat_id –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ.")
        return

    conn = get_db_connection()
    if not conn: return
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("""
            INSERT INTO users (chat_id, username, first_name, last_name)
            VALUES (%s, %s, %s, %s)
            ON CONFLICT (chat_id) DO UPDATE
            SET username = EXCLUDED.username, first_name = EXCLUDED.first_name, 
            last_name = EXCLUDED.last_name, last_activity = CURRENT_TIMESTAMP;
        """), (chat_id, user.username, user.first_name, user.last_name))
        conn.commit()
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id} –∑–±–µ—Ä–µ–∂–µ–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

@error_handler
def is_user_blocked(chat_id):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á."""
    conn = get_db_connection()
    if not conn: return True
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("SELECT is_blocked FROM users WHERE chat_id = %s;"), (chat_id,))
        result = cur.fetchone()
        return result and result['is_blocked']
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è {chat_id}: {e}", exc_info=True)
        return True # –í–≤–∞–∂–∞—î–º–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–º —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –±–µ–∑–ø–µ–∫–∏
    finally:
        if conn:
            conn.close()

@error_handler
def set_user_block_status(admin_id, chat_id, status):
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    conn = get_db_connection()
    if not conn: return False
    try:
        cur = conn.cursor()
        if status: # –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è
            cur.execute(pg_sql.SQL("""
                UPDATE users SET is_blocked = TRUE, blocked_by = %s, blocked_at = CURRENT_TIMESTAMP
                WHERE chat_id = %s;
            """), (admin_id, chat_id))
        else: # –†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è
            cur.execute(pg_sql.SQL("""
                UPDATE users SET is_blocked = FALSE, blocked_by = NULL, blocked_at = NULL
                WHERE chat_id = %s;
            """), (chat_id,))
        conn.commit()
        return True
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}", exc_info=True)
        return False
    finally:
        if conn:
            conn.close()

@error_handler
def generate_hashtags(description, num_hashtags=5):
    """–ì–µ–Ω–µ—Ä—É—î —Ö–µ—à—Ç–µ–≥–∏ –∑ –æ–ø–∏—Å—É —Ç–æ–≤–∞—Ä—É."""
    words = re.findall(r'\b\w+\b', description.lower())
    stopwords = set(['—è', '–º–∏', '—Ç–∏', '–≤–∏', '–≤—ñ–Ω', '–≤–æ–Ω–∞', '–≤–æ–Ω–æ', '–≤–æ–Ω–∏', '—Ü–µ', '—â–æ',
                     '—è–∫', '–¥–µ', '–∫–æ–ª–∏', '–∞', '—ñ', '—Ç–∞', '–∞–±–æ', '—á–∏', '–¥–ª—è', '–∑', '–Ω–∞',
                     '—É', '–≤', '–¥–æ', '–≤—ñ–¥', '–ø–æ', '–∑–∞', '–ø—Ä–∏', '–ø—Ä–æ', '–º—ñ–∂', '–ø—ñ–¥', '–Ω–∞–¥',
                     '–±–µ–∑', '—á–µ—Ä–µ–∑', '–¥—É–∂–µ', '—Ü–µ–π', '—Ç–æ–π', '–º—ñ–π', '—Ç–≤—ñ–π', '–Ω–∞—à', '–≤–∞—à',
                     '–ø—Ä–æ–¥–∞–º', '–ø—Ä–æ–¥–∞–º—Å—è', '–ø—Ä–æ–¥–∞—Ç–∏', '–ø—Ä–æ–¥–∞—é', '–ø—Ä–æ–¥–∞–∂', '–∫—É–ø–∏—Ç–∏', '–∫—É–ø–ª—é',
                     '–±—É', '–Ω–æ–≤–∏–π', '—Å—Ç–∞–Ω', '–º–æ–¥–µ–ª—å', '—Å–º', '–∫–≥', '–≥—Ä–Ω', 'uah', 'usd', 'eur', '–æ–¥–∏–Ω', '–¥–≤–∞', '—Ç—Ä–∏', '—á–æ—Ç–∏—Ä–∏', '–ø—è—Ç—å', '—à—ñ—Å—Ç—å', '—Å—ñ–º', '–≤—ñ—Å—ñ–º', '–¥–µ–≤—è—Ç—å', '–¥–µ—Å—è—Ç—å'])
    filtered_words = [word for word in words if len(word) > 2 and word not in stopwords]
    unique_words = list(set(filtered_words))
    hashtags = ['#' + word for word in unique_words[:num_hashtags]]
    return " ".join(hashtags) if hashtags else ""

@error_handler
def log_statistics(action, user_id=None, product_id=None, details=None):
    """–õ–æ–≥—É—î –¥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    conn = get_db_connection()
    if not conn: return
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL('''
            INSERT INTO statistics (action, user_id, product_id, details)
            VALUES (%s, %s, %s, %s)
        '''), (action, user_id, product_id, details))
        conn.commit()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

# --- 7. Gemini AI —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è ---
@error_handler
def get_gemini_response(prompt, conversation_history=None):
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Gemini AI.
    –Ø–∫—â–æ API –∫–ª—é—á –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π, –≥–µ–Ω–µ—Ä—É—î –∑–∞–≥–ª—É—à–∫—É.
    """
    if not GEMINI_API_KEY:
        logger.warning("Gemini API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–∞–≥–ª—É—à–∫–∞.")
        return generate_elon_style_response(prompt)

    headers = {
        "Content-Type": "application/json"
    }

    system_prompt = """–¢–∏ - AI –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è Telegram –±–æ—Ç–∞ –ø—Ä–æ–¥–∞–∂—É —Ç–æ–≤–∞—Ä—ñ–≤. 
    –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –≤ —Å—Ç–∏–ª—ñ –Ü–ª–æ–Ω–∞ –ú–∞—Å–∫–∞: –ø—Ä—è–º–æ–ª—ñ–Ω—ñ–π–Ω–æ, –∑ –≥—É–º–æ—Ä–æ–º, —ñ–Ω–æ–¥—ñ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ, 
    –∞–ª–µ –∑–∞–≤–∂–¥–∏ –∫–æ—Ä–∏—Å–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –µ–º–æ–¥–∑—ñ. –ë—É–¥—å –ª–∞–∫–æ–Ω—ñ—á–Ω–∏–º, –∞–ª–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–º.
    –î–æ–ø–æ–º–∞–≥–∞–π –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏ –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏, –ø–æ–∫—É–ø–∫–∏, –ø—Ä–æ–¥–∞–∂—ñ, –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∏.
    –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é."""

    gemini_messages = [{"role": "user", "parts": [{"text": system_prompt}]}]
    
    if conversation_history:
        for msg in conversation_history:
            role = "user" if msg["sender_type"] == 'user' else "model"
            gemini_messages.append({"role": role, "parts": [{"text": msg["message_text"]}]})
    
    gemini_messages.append({"role": "user", "parts": [{"text": prompt}]})

    payload = {
        "contents": gemini_messages
    }

    try:
        api_url = f"{GEMINI_API_URL}?key={GEMINI_API_KEY}"

        response = requests.post(api_url, headers=headers, json=payload, timeout=30)
        response.raise_for_status()
        
        data = response.json()
        if data.get("candidates") and len(data["candidates"]) > 0 and \
           data["candidates"][0].get("content") and data["candidates"][0]["content"].get("parts"):
            content = data["candidates"][0]["content"]["parts"][0]["text"]
            logger.info(f"Gemini –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞: {content[:100]}...")
            return content.strip()
        else:
            logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Gemini: {data}")
            return generate_elon_style_response(prompt)

    except requests.exceptions.RequestException as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ HTTP –∑–∞–ø–∏—Ç—É –¥–æ Gemini API: {e}", exc_info=True)
        return generate_elon_style_response(prompt)
    except Exception as e:
        logger.error(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Gemini: {e}", exc_info=True)
        return generate_elon_style_response(prompt)

def generate_elon_style_response(prompt):
    """
    –ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ —Å—Ç–∏–ª—ñ –Ü–ª–æ–Ω–∞ –ú–∞—Å–∫–∞ —è–∫ –∑–∞–≥–ª—É—à–∫–∞, –∫–æ–ª–∏ AI API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ.
    """
    responses = [
        "üöÄ –ì–º, —Ü—ñ–∫–∞–≤–µ –ø–∏—Ç–∞–Ω–Ω—è! –Ø–∫ —ñ –∑ SpaceX, —Ç—É—Ç –ø–æ—Ç—Ä—ñ–±–µ–Ω —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥. –©–æ —Å–∞–º–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?",
        "‚ö° –û—á–µ–≤–∏–¥–Ω–æ! –Ø–∫ –∫–∞–∂—É—Ç—å –≤ Tesla - –ø—Ä–æ—Å—Ç–æ—Ç–∞ —Ü–µ –≤–µ—Ä—à–∏–Ω–∞ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ. –î–∞–≤–∞–π—Ç–µ —Ä–æ–∑–±–µ—Ä–µ–º–æ—Å—è.",
        "ü§ñ *–¥—É–º–∞—î —è–∫ Neuralink* –í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤—É–≤–∞–ª–æ –º–æ—ó –Ω–µ–π—Ä–æ–Ω–∏! –û—Å—å —â–æ —è –¥—É–º–∞—é...",
        "üéØ –Ø–∫ —ñ –∑ X (–∫–æ–ª–∏—à–Ω—ñ–π Twitter), —ñ–Ω–æ–¥—ñ –∫—Ä–∞—â–µ –±—É—Ç–∏ –ø—Ä—è–º–æ–ª—ñ–Ω—ñ–π–Ω–∏–º. –°–∫–∞–∂—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ—à–µ?",
        "üî• –•–º–º, —Ü–µ –Ω–∞–≥–∞–¥—É—î –º–µ–Ω—ñ —á–∞—Å, –∫–æ–ª–∏ –º–∏ –∑–∞–ø—É—Å–∫–∞–ª–∏ Falcon Heavy. –°–∫–ª–∞–¥–Ω–æ, –∞–ª–µ –º–æ–∂–ª–∏–≤–æ!",
        "üí° –ê—Ö, –∫–ª–∞—Å–∏–∫–∞! –Ø–∫ —ñ –∑ Hyperloop - —Å–ø–æ—á–∞—Ç–∫—É –∑–¥–∞—î—Ç—å—Å—è –Ω–µ–º–æ–∂–ª–∏–≤–∏–º, –ø–æ—Ç—ñ–º –æ—á–µ–≤–∏–¥–Ω–∏–º.",
        "üåü –¶—ñ–∫–∞–≤–æ! –£ Boring Company –º–∏ –± –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∫–æ–ø–∞–ª–∏ —Ç—É–Ω–µ–ª—å –ø—ñ–¥ –ø—Ä–æ–±–ª–µ–º–æ—é. –ê —Ç—É—Ç...",
        "‚ö° –õ–æ–≥—ñ—á–Ω–æ! –Ø–∫ –∑–∞–≤–∂–¥–∏ –∫–∞–∂—É - —è–∫—â–æ —â–æ—Å—å –Ω–µ –≤–∏–±—É—Ö–∞—î, –∑–Ω–∞—á–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –Ω–∞–º–∞–≥–∞—î—à—Å—è üòÑ"
    ]
    
    import random
    base_response = random.choice(responses)
    
    prompt_lower = prompt.lower()
    if any(word in prompt_lower for word in ['—Ü—ñ–Ω–∞', '–≤–∞—Ä—Ç—ñ—Å—Ç—å', '–≥—Ä–æ—à—ñ']):
        return f"{base_response}\n\nüí∞ –©–æ–¥–æ —Ü—ñ–Ω–∏ - —è–∫ –≤ Tesla, –≤–∞–∂–ª–∏–≤–∞ —è–∫—ñ—Å—Ç—å, –∞ –Ω–µ —Ç—ñ–ª—å–∫–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å!"
    elif any(word in prompt_lower for word in ['—Ñ–æ—Ç–æ', '–∫–∞—Ä—Ç–∏–Ω–∫–∞', '–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è']):
        return f"{base_response}\n\nüì∏ –§–æ—Ç–æ - —Ü–µ —è–∫ –ø–µ—Ä—à–∏–π –µ—Ç–∞–ø —Ä–∞–∫–µ—Ç–∏, –±–µ–∑ –Ω–∏—Ö –Ω—ñ–∫—É–¥–∏!"
    elif any(word in prompt_lower for word in ['–¥–æ—Å—Ç–∞–≤–∫–∞', '–≤—ñ–¥–ø—Ä–∞–≤–∫–∞']):
        return f"{base_response}\n\nüöö –î–æ—Å—Ç–∞–≤–∫–∞? –Ø–∫–±–∏ —É –Ω–∞—Å –±—É–≤ Hyperloop, —Ü–µ –± –∑–∞–π–Ω—è–ª–æ —Ö–≤–∏–ª–∏–Ω–∏! üòâ"
    elif any(word in prompt_lower for word in ['–ø—Ä–æ–¥–∞–∂', '–∫—É–ø—ñ–≤–ª—è']):
        return f"{base_response}\n\nü§ù –ü—Ä–æ–¥–∞–∂ - —Ü–µ —è–∫ –∑–∞–ø—É—Å–∫ —Ä–∞–∫–µ—Ç–∏: –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞, –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, —É—Å–ø—ñ—Ö!"
    
    return base_response

@error_handler
def save_conversation(chat_id, message_text, sender_type, product_id=None):
    """–ó–±–µ—Ä—ñ–≥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É AI."""
    conn = get_db_connection()
    if not conn: return
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL('''
            INSERT INTO conversations (user_chat_id, product_id, message_text, sender_type)
            VALUES (%s, %s, %s, %s)
        '''), (chat_id, product_id, message_text, sender_type))
        conn.commit()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

@error_handler
def get_conversation_history(chat_id, limit=5):
    """–û—Ç—Ä–∏–º—É—î —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É AI."""
    conn = get_db_connection()
    if not conn: return []
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL('''
            SELECT message_text, sender_type FROM conversations 
            WHERE user_chat_id = %s 
            ORDER BY timestamp DESC LIMIT %s
        '''), (chat_id, limit))
        results = cur.fetchall()
        
        history = [{"message_text": row['message_text'], "sender_type": row['sender_type']} 
                   for row in reversed(results)]
        
        return history
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤: {e}", exc_info=True)
        return []
    finally:
        if conn:
            conn.close()

# --- 8. –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ---
main_menu_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu_markup.add(types.KeyboardButton("üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä"), types.KeyboardButton("üìã –ú–æ—ó —Ç–æ–≤–∞—Ä–∏"))
main_menu_markup.add(types.KeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞"), types.KeyboardButton("üí∞ –ö–æ–º—ñ—Å—ñ—è"))
main_menu_markup.add(types.KeyboardButton("üì∫ –ù–∞—à –∫–∞–Ω–∞–ª"), types.KeyboardButton("ü§ñ AI –ü–æ–º—ñ—á–Ω–∏–∫"))

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
back_button = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
cancel_button = types.KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è")

# --- 9. –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@bot.message_handler(commands=['start'])
@error_handler
def send_welcome(message):
    logger.info(f"DEBUG: send_welcome handler called for chat_id: {message.chat.id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start."""
    chat_id = message.chat.id
    if is_user_blocked(chat_id):
        bot.send_message(chat_id, "‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
        return

    save_user(message)
    log_statistics('start', chat_id)

    welcome_text = (
        "üõçÔ∏è *–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ SellerBot!*\n\n"
        "–Ø –≤–∞—à —Ä–æ–∑—É–º–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É —Ç–∞ –∫—É–ø—ñ–≤–ª—ñ —Ç–æ–≤–∞—Ä—ñ–≤. "
        "–ú–µ–Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –ø–æ—Ç—É–∂–Ω–∏–π AI! üöÄ\n\n"
        "–©–æ —è –≤–º—ñ—é:\n"
        "üì¶ –î–æ–ø–æ–º–∞–≥–∞—é —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n"
        "ü§ù –í–µ–¥—É –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∏ —Ç–∞ –¥–æ–º–æ–≤–ª–µ–Ω–æ—Å—Ç—ñ\n"
        "üìç –û–±—Ä–æ–±–ª—è—é –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é —Ç–∞ —Ñ–æ—Ç–æ\n"
        "üí∞ –°–ª—ñ–¥–∫—É—é –∑–∞ –∫–æ–º—ñ—Å—ñ—è–º–∏\n"
        "üéØ –ê–Ω–∞–ª—ñ–∑—É—é —Ä–∏–Ω–æ–∫ —Ç–∞ —Ü—ñ–Ω–∏\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ!"
    )
    logger.info(f"DEBUG: Attempting to send welcome message to chat_id: {chat_id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
    bot.send_message(chat_id, welcome_text, reply_markup=main_menu_markup, parse_mode='Markdown')
    logger.info(f"DEBUG: Welcome message sent successfully (or attempted) to chat_id: {chat_id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì

@bot.message_handler(commands=['admin'])
@error_handler
def admin_panel(message):
    logger.info(f"DEBUG: admin_panel handler called for chat_id: {message.chat.id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /admin –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ."""
    if message.chat.id != ADMIN_CHAT_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É.")
        return

    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        types.InlineKeyboardButton("‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó", callback_data="admin_pending"),
        types.InlineKeyboardButton("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users"),
        types.InlineKeyboardButton("üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è", callback_data="admin_block"),
        types.InlineKeyboardButton("üí∞ –ö–æ–º—ñ—Å—ñ—ó", callback_data="admin_commissions"),
        types.InlineKeyboardButton("ü§ñ AI –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_ai_stats")
    )
    bot.send_message(message.chat.id, "üîß *–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å*", reply_markup=markup, parse_mode='Markdown')
    logger.info(f"DEBUG: Admin panel message sent to chat_id: {message.chat.id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì

# --- 10. –ü–æ—Ç—ñ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ---
ADD_PRODUCT_STEPS = {
    1: {'name': 'waiting_name', 'prompt': "üìù *–ö—Ä–æ–∫ 1/5: –ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É*\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:", 'next_step': 2, 'prev_step': None},
    2: {'name': 'waiting_price', 'prompt': "üí∞ *–ö—Ä–æ–∫ 2/5: –¶—ñ–Ω–∞*\n\n–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É (–≥—Ä–Ω, USD –∞–±–æ '–î–æ–≥–æ–≤—ñ—Ä–Ω–∞'):", 'next_step': 3, 'prev_step': 1},
    3: {'name': 'waiting_photos', 'prompt': "üì∏ *–ö—Ä–æ–∫ 3/5: –§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó*\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–æ 5 —Ñ–æ—Ç–æ (–ø–æ –æ–¥–Ω–æ–º—É). –ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ':", 'next_step': 4, 'allow_skip': True, 'skip_button': '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ñ–æ—Ç–æ', 'prev_step': 2},
    4: {'name': 'waiting_location', 'prompt': "üìç *–ö—Ä–æ–∫ 4/5: –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è*\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏':", 'next_step': 5, 'allow_skip': True, 'skip_button': '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é', 'prev_step': 3},
    5: {'name': 'waiting_description', 'prompt': "‚úçÔ∏è *–ö—Ä–æ–∫ 5/5: –û–ø–∏—Å*\n\n–ù–∞–ø–∏—à—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É:", 'next_step': 'confirm', 'prev_step': 4}
}

@error_handler
def start_add_product_flow(message):
    logger.info(f"DEBUG: start_add_product_flow called for chat_id: {message.chat.id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É."""
    chat_id = message.chat.id
    user_data[chat_id] = {
        'step_number': 1, 
        'data': {
            'photos': [], 
            'geolocation': None,
            'product_name': '',
            'price': '',
            'description': ''
        }
    }
    send_product_step_message(chat_id)
    log_statistics('start_add_product', chat_id)

@error_handler
def send_product_step_message(chat_id):
    logger.info(f"DEBUG: send_product_step_message called for chat_id: {chat_id}, step: {user_data[chat_id].get('step_number')}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
    """–ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫—Ä–æ–∫—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É."""
    current_step_number = user_data[chat_id]['step_number']
    step_config = ADD_PRODUCT_STEPS[current_step_number]
    user_data[chat_id]['step'] = step_config['name']

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    
    if step_config['name'] == 'waiting_photos':
        markup.add(types.KeyboardButton("–î–∞–ª—ñ"))
        markup.add(types.KeyboardButton(step_config['skip_button']))
    elif step_config['name'] == 'waiting_location':
        markup.add(types.KeyboardButton("üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True))
        markup.add(types.KeyboardButton(step_config['skip_button']))
    
    if step_config['prev_step'] is not None:
        markup.add(back_button)
    
    markup.add(cancel_button)
    
    bot.send_message(chat_id, step_config['prompt'], parse_mode='Markdown', reply_markup=markup)
    logger.info(f"DEBUG: Product step message sent for chat_id: {chat_id}, step: {step_config['name']}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì

@error_handler
def process_product_step(message):
    logger.info(f"DEBUG: process_product_step called for chat_id: {message.chat.id}, text: {message.text[:50]}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
    """–û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π –≤–≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ–¥ —á–∞—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É."""
    chat_id = message.chat.id
    if chat_id not in user_data or 'step_number' not in user_data[chat_id]:
        logger.warning(f"DEBUG: process_product_step called for user not in flow: {chat_id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
        return

    current_step_number = user_data[chat_id]['step_number']
    step_config = ADD_PRODUCT_STEPS[current_step_number]
    user_text = message.text if message.content_type == 'text' else ""

    if user_text == cancel_button.text:
        del user_data[chat_id]
        bot.send_message(chat_id, "–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_markup)
        logger.info(f"DEBUG: Product add cancelled by user {chat_id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
        return

    if user_text == back_button.text:
        if step_config['prev_step'] is not None:
            user_data[chat_id]['step_number'] = step_config['prev_step']
            send_product_step_message(chat_id)
            logger.info(f"DEBUG: User {chat_id} moved back to step {user_data[chat_id]['step_number']}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
        else:
            bot.send_message(chat_id, "–í–∏ –≤–∂–µ –Ω–∞ –ø–µ—Ä—à–æ–º—É –∫—Ä–æ—Ü—ñ.")
            logger.info(f"DEBUG: User {chat_id} tried to go back from first step.") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
        return

    if step_config.get('allow_skip') and user_text == step_config.get('skip_button'):
        go_to_next_step(chat_id)
        logger.info(f"DEBUG: User {chat_id} skipped step {step_config['name']}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
        return

    if step_config['name'] == 'waiting_name':
        if user_text and 3 <= len(user_text) <= 100:
            user_data[chat_id]['data']['product_name'] = user_text
            go_to_next_step(chat_id)
        else:
            bot.send_message(chat_id, "–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ 3 –¥–æ 100 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")

    elif step_config['name'] == 'waiting_price':
        if user_text and len(user_text) <= 50:
            user_data[chat_id]['data']['price'] = user_text
            go_to_next_step(chat_id)
        else:
            bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Ü—ñ–Ω—É (–¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤):")

    elif step_config['name'] == 'waiting_photos':
        if user_text == "–î–∞–ª—ñ":
            go_to_next_step(chat_id)
        else:
            bot.send_message(chat_id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ'/'–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ñ–æ—Ç–æ'.")

    elif step_config['name'] == 'waiting_location':
        bot.send_message(chat_id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é'.")

    elif step_config['name'] == 'waiting_description':
        if user_text and 10 <= len(user_text) <= 1000:
            user_data[chat_id]['data']['description'] = user_text
            confirm_and_send_for_moderation(chat_id)
        else:
            bot.send_message(chat_id, "–û–ø–∏—Å –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π –∞–±–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (10-1000 —Å–∏–º–≤–æ–ª—ñ–≤). –ù–∞–ø–∏—à—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ:")

@error_handler
def go_to_next_step(chat_id):
    logger.info(f"DEBUG: go_to_next_step called for chat_id: {chat_id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É –≤ –ø—Ä–æ—Ü–µ—Å—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É."""
    current_step_number = user_data[chat_id]['step_number']
    next_step_number = ADD_PRODUCT_STEPS[current_step_number]['next_step']
    
    if next_step_number == 'confirm':
        confirm_and_send_for_moderation(chat_id)
    else:
        user_data[chat_id]['step_number'] = next_step_number
        send_product_step_message(chat_id)

@error_handler
def process_product_photo(message):
    logger.info(f"DEBUG: process_product_photo called for chat_id: {message.chat.id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π —Ç–æ–≤–∞—Ä—É."""
    chat_id = message.chat.id
    if chat_id in user_data and user_data[chat_id].get('step') == 'waiting_photos':
        if len(user_data[chat_id]['data']['photos']) < 5:
            file_id = message.photo[-1].file_id
            user_data[chat_id]['data']['photos'].append(file_id)
            photos_count = len(user_data[chat_id]['data']['photos'])
            bot.send_message(chat_id, f"‚úÖ –§–æ—Ç–æ {photos_count}/5 –¥–æ–¥–∞–Ω–æ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ'")
        else:
            bot.send_message(chat_id, "–ú–∞–∫—Å–∏–º—É–º 5 —Ñ–æ—Ç–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.")
    else:
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó —Ç—ñ–ª—å–∫–∏ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–º—É –∫—Ä–æ—Ü—ñ.")

@error_handler
def process_product_location(message):
    logger.info(f"DEBUG: process_product_location called for chat_id: {message.chat.id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –¥–ª—è —Ç–æ–≤–∞—Ä—É."""
    chat_id = message.chat.id
    if chat_id in user_data and user_data[chat_id].get('step') == 'waiting_location':
        if message.location:
            user_data[chat_id]['data']['geolocation'] = {
                'latitude': message.location.latitude,
                'longitude': message.location.longitude
            }
            bot.send_message(chat_id, "‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—é –¥–æ–¥–∞–Ω–æ!")
            go_to_next_step(chat_id)
        else:
            bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é —á–µ—Ä–µ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é'.")
    else:
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é —Ç—ñ–ª—å–∫–∏ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–º—É –∫—Ä–æ—Ü—ñ.")

@error_handler
def confirm_and_send_for_moderation(chat_id):
    logger.info(f"DEBUG: confirm_and_send_for_moderation called for chat_id: {chat_id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
    """–ó–±–µ—Ä—ñ–≥–∞—î —Ç–æ–≤–∞—Ä —É –ë–î, —Å–ø–æ–≤—ñ—â–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó."""
    data = user_data[chat_id]['data']
    
    conn = get_db_connection()
    if not conn:
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    cur = conn.cursor()
    product_id = None
    try:
        user_info = bot.get_chat(chat_id)
        seller_username = user_info.username if user_info.username else None

        cur.execute(pg_sql.SQL('''
            INSERT INTO products 
            (seller_chat_id, seller_username, product_name, price, description, photos, geolocation, status)
            VALUES (%s, %s, %s, %s, %s, %s, %s, 'pending')
            RETURNING id;
        '''), (
            chat_id,
            seller_username,
            data['product_name'],
            data['price'],
            data['description'],
            json.dumps(data['photos']) if data['photos'] else None,
            json.dumps(data['geolocation']) if data['geolocation'] else None
        ))
        
        product_id = cur.fetchone()[0]
        conn.commit()
        
        bot.send_message(chat_id, 
            f"‚úÖ –¢–æ–≤–∞—Ä '{data['product_name']}' –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!\n"
            f"–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.",
            reply_markup=main_menu_markup)
        
        send_product_for_admin_review(product_id, data, seller_chat_id=chat_id, seller_username=seller_username)
        
        del user_data[chat_id]
        
        log_statistics('product_added', chat_id, product_id)
        logger.info(f"DEBUG: Product {product_id} confirmed and sent for moderation by {chat_id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É: {e}", exc_info=True)
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    finally:
        if conn:
            conn.close()

@error_handler
def send_product_for_admin_review(product_id, data, seller_chat_id, seller_username):
    logger.info(f"DEBUG: send_product_for_admin_review called for product_id: {product_id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
    """–§–æ—Ä–º—É—î —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É."""
    hashtags = generate_hashtags(data['description'])
    review_text = (
        f"üì¶ *–ù–æ–≤–∏–π —Ç–æ–≤–∞—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é*\n\n"
        f"üÜî ID: {product_id}\n"
        f"üìù –ù–∞–∑–≤–∞: {data['product_name']}\n"
        f"üí∞ –¶—ñ–Ω–∞: {data['price']}\n"
        f"üìÑ –û–ø–∏—Å: {data['description'][:500]}...\n"
        f"üì∏ –§–æ—Ç–æ: {len(data['photos'])} —à—Ç.\n"
        f"üìç –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è: {'–¢–∞–∫' if data['geolocation'] else '–ù—ñ'}\n"
        f"üè∑Ô∏èÔ∏è –•–µ—à—Ç–µ–≥–∏: {hashtags}\n\n"
        f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü—å: [{'@' + seller_username if seller_username else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}](tg://user?id={seller_chat_id})"
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"approve_{product_id}"),
        types.InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{product_id}")
    )
    
    try:
        admin_msg = None
        if data['photos']:
            media = [types.InputMediaPhoto(photo_id, caption=review_text if i == 0 else None, parse_mode='Markdown') 
                     for i, photo_id in enumerate(data['photos'])]
            
            sent_messages = bot.send_media_group(ADMIN_CHAT_ID, media)
            
            if sent_messages:
                admin_msg = bot.send_message(ADMIN_CHAT_ID, 
                                             f"üëÜ –î–µ—Ç–∞–ª—ñ —Ç–æ–≤–∞—Ä—É ID: {product_id} (—Ñ–æ—Ç–æ –≤–∏—â–µ)", 
                                             reply_markup=markup, 
                                             parse_mode='Markdown',
                                             reply_to_message_id=sent_messages[0].message_id)
            else:
                admin_msg = bot.send_message(ADMIN_CHAT_ID, review_text,
                                           parse_mode='Markdown',
                                           reply_markup=markup)
        else:
            admin_msg = bot.send_message(ADMIN_CHAT_ID, review_text,
                                       parse_mode='Markdown',
                                       reply_markup=markup)
        
        if admin_msg:
            conn = get_db_connection()
            if not conn: return
            cur = conn.cursor()
            try:
                cur.execute(pg_sql.SQL("UPDATE products SET admin_message_id = %s WHERE id = %s;"),
                               (admin_msg.message_id, product_id))
                conn.commit()
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ admin_message_id –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id}: {e}", exc_info=True)
            finally:
                if conn:
                    conn.close()
        logger.info(f"DEBUG: Product {product_id} sent to admin {ADMIN_CHAT_ID} for review.") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ç–æ–≤–∞—Ä—É {product_id} –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}", exc_info=True)


# --- 11. –û–±—Ä–æ–±–Ω–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ---
@bot.message_handler(func=lambda message: True, content_types=['text', 'photo', 'location'])
@error_handler
def handle_messages(message):
    logger.info(f"DEBUG: handle_messages called for chat_id: {message.chat.id}, type: {message.content_type}, text: {message.text[:50] if message.text else 'N/A'}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
    """–û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—Å—ñ—Ö –≤—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å."""
    chat_id = message.chat.id
    user_text = message.text if message.content_type == 'text' else ""

    if is_user_blocked(chat_id):
        bot.send_message(chat_id, "‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
        logger.info(f"DEBUG: User {chat_id} is blocked. Message NOT processed further.") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
        return
    
    save_user(message)
    logger.info(f"DEBUG: User {chat_id} info saved/updated.") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∫–æ–º–∞–Ω–¥–∞ /start. –Ø–∫—â–æ —Ç–∞–∫, –ø–µ—Ä–µ–¥–∞—î–º–æ —ó—ó –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–º—É –æ–±—Ä–æ–±–Ω–∏–∫—É.
    # –¶–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ, —Ç–æ–º—É —â–æ `commands=['start']` –º–∞—î –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç.
    if message.text == '/start':
        logger.info(f"DEBUG: Message is /start, dispatching to send_welcome for chat_id: {chat_id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
        send_welcome(message)
        return

    # –û–±—Ä–æ–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç)
    if chat_id in user_data and user_data[chat_id].get('step'):
        logger.info(f"DEBUG: User {chat_id} is in product add flow, current step: {user_data[chat_id].get('step')}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
        if message.content_type == 'text':
            process_product_step(message)
        elif message.content_type == 'photo':
            process_product_photo(message)
        elif message.content_type == 'location':
            process_product_location(message)
        else:
            bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫—Ä–æ–∫—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è' –∞–±–æ 'üîô –ù–∞–∑–∞–¥'.")
        return

    # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if user_text == "üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä":
        logger.info(f"DEBUG: User {chat_id} clicked 'Add Product'") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
        start_add_product_flow(message)
    elif user_text == "üìã –ú–æ—ó —Ç–æ–≤–∞—Ä–∏":
        logger.info(f"DEBUG: User {chat_id} clicked 'My Products'") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
        send_my_products(message)
    elif user_text == "‚ùì –î–æ–ø–æ–º–æ–≥–∞":
        logger.info(f"DEBUG: User {chat_id} clicked 'Help'") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
        send_help_message(message)
    elif user_text == "üí∞ –ö–æ–º—ñ—Å—ñ—è":
        logger.info(f"DEBUG: User {chat_id} clicked 'Commission'") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
        send_commission_info(message)
    elif user_text == "üì∫ –ù–∞—à –∫–∞–Ω–∞–ª":
        logger.info(f"DEBUG: User {chat_id} clicked 'Our Channel'") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
        send_channel_link(message)
    elif user_text == "ü§ñ AI –ü–æ–º—ñ—á–Ω–∏–∫":
        logger.info(f"DEBUG: User {chat_id} clicked 'AI Assistant'") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
        bot.send_message(chat_id, "–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à AI –ø–æ–º—ñ—á–Ω–∏–∫. –ó–∞–¥–∞–π—Ç–µ –º–µ–Ω—ñ –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏, –ø—Ä–æ–¥–∞–∂—ñ, –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ø—ñ–ª–∫—É–π—Ç–µ—Å—å!\n\n(–ù–∞–ø–∏—à—ñ—Ç—å '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏' –¥–ª—è –≤–∏—Ö–æ–¥—É –∑ —Ä–µ–∂–∏–º—É AI —á–∞—Ç—É.)", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, handle_ai_chat)
    elif message.content_type == 'text': # –Ø–∫—â–æ —Ü–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –Ω–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –≤–∏—â–µ, –ø–µ—Ä–µ–¥–∞—î–º–æ AI
        logger.info(f"DEBUG: User {chat_id} sent general text for AI: {user_text[:50]}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
        handle_ai_chat(message)
    elif message.content_type == 'photo':
        logger.info(f"DEBUG: User {chat_id} sent photo outside flow.") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
        bot.send_message(chat_id, "–Ø –æ—Ç—Ä–∏–º–∞–≤ –≤–∞—à–µ —Ñ–æ—Ç–æ, –∞–ª–µ –Ω–µ –∑–Ω–∞—é, —â–æ –∑ –Ω–∏–º —Ä–æ–±–∏—Ç–∏ –ø–æ–∑–∞ –ø—Ä–æ—Ü–µ—Å–æ–º –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É. ü§î")
    elif message.content_type == 'location':
        logger.info(f"DEBUG: User {chat_id} sent location outside flow.") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
        bot.send_message(chat_id, f"–Ø –±–∞—á—É –≤–∞—à—É –≥–µ–æ—Ç–æ—á–∫—É: {message.location.latitude}, {message.location.longitude}. –Ø–∫ —è –º–æ–∂—É —ó—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏?")
    else:
        logger.info(f"DEBUG: User {chat_id} sent unhandled message type: {message.content_type}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
        bot.send_message(chat_id, "–Ø –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤ –≤–∞—à –∑–∞–ø–∏—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

@error_handler
def handle_ai_chat(message):
    logger.info(f"DEBUG: handle_ai_chat called for chat_id: {message.chat.id}, text: {message.text[:50]}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
    """–û–±—Ä–æ–±–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ä–µ–∂–∏–º—ñ AI —á–∞—Ç—É."""
    chat_id = message.chat.id
    user_text = message.text

    if user_text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        bot.send_message(chat_id, "–ß–∞—Ç –∑ AI —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_markup)
        logger.info(f"DEBUG: AI chat cancelled by user {chat_id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
        return

    save_conversation(chat_id, user_text, 'user')
    conversation_history = get_conversation_history(chat_id, limit=10) 
    
    ai_reply = get_gemini_response(user_text, conversation_history)
    save_conversation(chat_id, ai_reply, 'ai')
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"))
    bot.send_message(chat_id, f"ü§ñ –î—É–º–∞—é...\n{ai_reply}", reply_markup=markup)
    bot.register_next_step_handler(message, handle_ai_chat)
    logger.info(f"DEBUG: AI reply sent to {chat_id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì

# --- 12. –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–û–ù–û–í–õ–ï–ù–û –î–õ–Ø PostgreSQL) ---
@error_handler
def send_my_products(message):
    logger.info(f"DEBUG: send_my_products called for chat_id: {message.chat.id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
    """–ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Å–ø–∏—Å–æ–∫ –π–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤."""
    chat_id = message.chat.id
    conn = get_db_connection()
    if not conn:
        bot.send_message(chat_id, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ (–ø–æ–º–∏–ª–∫–∞ –ë–î).")
        logger.error(f"DEBUG: Failed to get DB connection for user products {chat_id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
        return
    cur = conn.cursor()
    try:
        cur.execute(pg_sql.SQL("""
            SELECT id, product_name, status, price, created_at, channel_message_id
            FROM products
            WHERE seller_chat_id = %s
            ORDER BY created_at DESC
        """), (chat_id,))
        user_products = cur.fetchall()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}", exc_info=True)
        bot.send_message(chat_id, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.")
        return
    finally:
        if conn:
            conn.close()

    if user_products:
        response = "üìã *–í–∞—à—ñ —Ç–æ–≤–∞—Ä–∏:*\n\n"
        for i, product in enumerate(user_products, 1):
            status_emoji = {
                'pending': '‚è≥',
                'approved': '‚úÖ',
                'rejected': '‚ùå',
                'sold': 'üí∞',
                'expired': 'üóëÔ∏è'
            }
            status_ukr = {
                'pending': '–Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ',
                'approved': '–æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ',
                'rejected': '–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ',
                'sold': '–ø—Ä–æ–¥–∞–Ω–æ',
                'expired': '—Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è'
            }.get(product['status'], product['status'])

            created_at_local = product['created_at'].astimezone(timezone.utc).strftime('%d.%m.%Y %H:%M')

            response += f"{i}. {status_emoji.get(product['status'], '‚ùì')} *{product['product_name']}*\n"
            response += f"   üí∞ {product['price']}\n"
            response += f"   üìÖ {created_at_local}\n"
            response += f"   üìä –°—Ç–∞—Ç—É—Å: {status_ukr}\n"
            
            if product['status'] == 'approved' and product['channel_message_id']:
                channel_link_part = str(CHANNEL_ID).replace("-100", "") 
                response += f"   üîó [–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤ –∫–∞–Ω–∞–ª—ñ](https://t.me/c/{channel_link_part}/{product['channel_message_id']})\n"
            
            response += "\n"
        bot.send_message(chat_id, response, parse_mode='Markdown', disable_web_page_preview=True)
        logger.info(f"DEBUG: User products list sent to {chat_id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
    else:
        bot.send_message(chat_id, "üì≠ –í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–≤–∞–ª–∏ –∂–æ–¥–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä' —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤–æ—î –ø–µ—Ä—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è!")
        logger.info(f"DEBUG: No products found for user {chat_id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì

# --- 13. –î–æ–ø–æ–º–æ–≥–∞ —Ç–∞ –ö–∞–Ω–∞–ª ---
@error_handler
def send_help_message(message):
    logger.info(f"DEBUG: send_help_message called for chat_id: {message.chat.id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
    """–ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –¥–æ–≤—ñ–¥–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é."""
    help_text = (
        "üÜò *–î–æ–≤—ñ–¥–∫–∞*\n\n"
        "ü§ñ –Ø –≤–∞—à AI-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ —Ç–∞ –ø—Ä–æ–¥–∞–∂—É. –í–∏ –º–æ–∂–µ—Ç–µ:\n"
        "üì¶ *–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä* - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.\n"
        "üìã *–ú–æ—ó —Ç–æ–≤–∞—Ä–∏* - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Ç–∞ –ø—Ä–æ–¥–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏.\n"
        "üí∞ *–ö–æ–º—ñ—Å—ñ—è* - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–º—ñ—Å—ñ–π–Ω—ñ –∑–±–æ—Ä–∏.\n"
        "üì∫ *–ù–∞—à –∫–∞–Ω–∞–ª* - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó.\n"
        "ü§ñ *AI –ü–æ–º—ñ—á–Ω–∏–∫* - –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ AI.\n\n"
        "üó£Ô∏è *–°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è:* –ü—Ä–æ—Å—Ç–æ –ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ –≤–∞—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó, —ñ –º—ñ–π –≤–±—É–¥–æ–≤–∞–Ω–∏–π AI —Å–ø—Ä–æ–±—É—î –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏!\n\n"
        f"–Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: @{'AdminUsername'}"
    )
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown', reply_markup=main_menu_markup)
    logger.info(f"DEBUG: Help message sent to {message.chat.id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì

@error_handler
def send_commission_info(message):
    logger.info(f"DEBUG: send_commission_info called for chat_id: {message.chat.id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
    """–ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—é."""
    commission_rate_percent = 10
    text = (
        f"üí∞ *–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—é*\n\n"
        f"–ó–∞ —É—Å–ø—ñ—à–Ω–∏–π –ø—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä—É —á–µ—Ä–µ–∑ –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞ —Å—Ç—è–≥—É—î—Ç—å—Å—è –∫–æ–º—ñ—Å—ñ—è —É —Ä–æ–∑–º—ñ—Ä—ñ **{commission_rate_percent}%** –≤—ñ–¥ –∫—ñ–Ω—Ü–µ–≤–æ—ó —Ü—ñ–Ω–∏ –ø—Ä–æ–¥–∞–∂—É.\n\n"
        f"–ü—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –≤–∏ –ø–æ–∑–Ω–∞—á–∏—Ç–µ —Ç–æ–≤–∞—Ä —è–∫ '–ü—Ä–æ–¥–∞–Ω–æ', —Å–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—Ä–∞—Ö—É—î —Å—É–º—É –∫–æ–º—ñ—Å—ñ—ó, —ñ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —â–æ–¥–æ —ó—ó —Å–ø–ª–∞—Ç–∏.\n\n"
        f"–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è —Å–ø–ª–∞—Ç–∏ –∫–æ–º—ñ—Å—ñ—ó (Monobank):\n`{MONOBANK_CARD_NUMBER}`\n\n"
        f"–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–ª–∞—á—É–π—Ç–µ –∫–æ–º—ñ—Å—ñ—é –≤—á–∞—Å–Ω–æ, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –æ–±–º–µ–∂–µ–Ω—å –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞.\n\n"
        f"–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –≤–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–ø–ª–∞—Ç–∏ –º–æ–∂–Ω–∞ –±—É–¥–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –≤ —Ä–æ–∑–¥—ñ–ª—ñ '–ú–æ—ó —Ç–æ–≤–∞—Ä–∏'."
    )
    bot.send_message(message.chat.id, text, parse_mode='Markdown', reply_markup=main_menu_markup)
    logger.info(f"DEBUG: Commission info sent to {message.chat.id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì

@error_handler
def send_channel_link(message):
    logger.info(f"DEBUG: send_channel_link called for chat_id: {message.chat.id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
    """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª."""
    chat_id = message.chat.id
    try:
        if not CHANNEL_ID:
            raise ValueError("CHANNEL_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É .env. –ù–µ–º–æ–∂–ª–∏–≤–æ —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª.")

        chat_info = bot.get_chat(CHANNEL_ID)
        channel_link = ""
        if chat_info.invite_link:
            channel_link = chat_info.invite_link
        elif chat_info.username:
            channel_link = f"https://t.me/{chat_info.username}"
        else:
            try:
                invite_link_obj = bot.create_chat_invite_link(CHANNEL_ID, member_limit=1)
                channel_link = invite_link_obj.invite_link
                logger.info(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–ª—è –∫–∞–Ω–∞–ª—É: {channel_link}")
            except telebot.apihelper.ApiTelegramException as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–ª—è –∫–∞–Ω–∞–ª—É {CHANNEL_ID}: {e}")
                channel_link_part = str(CHANNEL_ID).replace("-100", "")
                channel_link = f"https://t.me/c/{channel_link_part}"


        if not channel_link:
             raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª.")

        invite_text = (
            f"üì∫ *–ù–∞—à –∫–∞–Ω–∞–ª –∑ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è–º–∏*\n\n"
            f"–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ–≥–æ –∫–∞–Ω–∞–ª—É, —â–æ–± –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –Ω–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏!\n\n"
            f"üëâ [–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞–Ω–∞–ª—É]({channel_link})\n\n"
            f"üí° –£ –∫–∞–Ω–∞–ª—ñ –ø—É–±–ª—ñ–∫—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è"
        )
        bot.send_message(chat_id, invite_text, parse_mode='Markdown', disable_web_page_preview=True)
        log_statistics('channel_visit', chat_id)
        logger.info(f"DEBUG: Channel link sent to {chat_id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞–±–æ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª: {e}", exc_info=True)
        bot.send_message(chat_id, "‚ùå –ù–∞ –∂–∞–ª—å, –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")


# --- 14. –û–±—Ä–æ–±–Ω–∏–∫–∏ Callback Query ---
@bot.callback_query_handler(func=lambda call: True)
@error_handler
def callback_inline(call):
    logger.info(f"DEBUG: callback_inline called for chat_id: {call.message.chat.id}, data: {call.data}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
    """–û–±—Ä–æ–±–ª—è—î –≤—Å—ñ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏."""
    if call.data.startswith('admin_'):
        handle_admin_callbacks(call)
    elif call.data.startswith('approve_') or call.data.startswith('reject_') or call.data.startswith('sold_'):
        handle_product_moderation_callbacks(call)
    elif call.data.startswith('user_block_') or call.data.startswith('user_unblock_'):
        handle_user_block_callbacks(call)
    else:
        bot.answer_callback_query(call.id, "–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.")

# --- 15. Callbacks –¥–ª—è –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ (–û–ù–û–í–õ–ï–ù–û –î–õ–Ø PostgreSQL) ---
@error_handler
def handle_admin_callbacks(call):
    logger.info(f"DEBUG: handle_admin_callbacks called for chat_id: {call.message.chat.id}, action: {call.data.split('_')[1]}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–ª–±–µ–∫–∏, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª–ª—é."""
    if call.message.chat.id != ADMIN_CHAT_ID:
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return

    action = call.data.split('_')[1]

    if action == "stats":
        send_admin_statistics(call)
    elif action == "pending":
        send_pending_products_for_moderation(call)
    elif action == "users":
        send_users_list(call)
    elif action == "block":
        bot.edit_message_text("–í–≤–µ–¥—ñ—Ç—å `chat_id` –∞–±–æ `@username` –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è:",
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id, parse_mode='Markdown')
        bot.register_next_step_handler(call.message, process_user_for_block_unblock)
    elif action == "commissions":
        send_admin_commissions_info(call)
    elif action == "ai_stats":
        send_admin_ai_statistics(call)

    bot.answer_callback_query(call.id)

@error_handler
def send_admin_statistics(call):
    logger.info(f"DEBUG: send_admin_statistics called for chat_id: {call.message.chat.id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞."""
    conn = get_db_connection()
    if not conn:
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø–æ–º–∏–ª–∫–∞ –ë–î).", call.message.chat.id, call.message.message_id)
        return
    cur = conn.cursor()
    try:
        cur.execute(pg_sql.SQL("SELECT status, COUNT(*) FROM products GROUP BY status;"))
        product_stats = dict(cur.fetchall())

        cur.execute(pg_sql.SQL("SELECT COUNT(*) FROM users;"))
        total_users = cur.fetchone()[0]

        cur.execute(pg_sql.SQL("SELECT COUNT(*) FROM users WHERE is_blocked = TRUE;"))
        blocked_users_count = cur.fetchone()[0]

        today_utc = datetime.now(timezone.utc).date()
        cur.execute(pg_sql.SQL("SELECT COUNT(*) FROM products WHERE DATE(created_at) = %s;"), (today_utc,))
        today_products = cur.fetchone()[0]
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", call.message.chat.id, call.message.message_id)
        return
    finally:
        if conn:
            conn.close()

    stats_text = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
        f"üë• *–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:*\n"
        f"‚Ä¢ –í—Å—å–æ–≥–æ: {total_users}\n"
        f"‚Ä¢ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ: {blocked_users_count}\n\n"
        f"üì¶ *–¢–æ–≤–∞—Ä–∏:*\n"
        f"‚Ä¢ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {product_stats.get('pending', 0)}\n"
        f"‚Ä¢ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: {product_stats.get('approved', 0)}\n"
        f"‚Ä¢ –í—ñ–¥—Ö–∏–ª–µ–Ω–æ: {product_stats.get('rejected', 0)}\n"
        f"‚Ä¢ –ü—Ä–æ–¥–∞–Ω–æ: {product_stats.get('sold', 0)}\n"
        f"‚Ä¢ –¢–µ—Ä–º—ñ–Ω –¥—ñ—ó –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è: {product_stats.get('expired', 0)}\n\n"
        f"üìÖ *–°—å–æ–≥–æ–¥–Ω—ñ –¥–æ–¥–∞–Ω–æ:* {today_products}\n"
        f"üìà *–í—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤:* {sum(product_stats.values())}"
    )

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main"))

    bot.edit_message_text(stats_text, call.message.chat.id, call.message.message_id,
                         parse_mode='Markdown', reply_markup=markup)
    logger.info(f"DEBUG: Admin stats sent to {call.message.chat.id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì

@error_handler
def send_users_list(call):
    logger.info(f"DEBUG: send_users_list called for chat_id: {call.message.chat.id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."""
    conn = get_db_connection()
    if not conn:
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–ø–æ–º–∏–ª–∫–∞ –ë–î).", call.message.chat.id, call.message.message_id)
        return
    cur = conn.cursor()
    try:
        cur.execute(pg_sql.SQL("SELECT chat_id, username, first_name, is_blocked FROM users ORDER BY joined_at DESC LIMIT 20;"))
        users = cur.fetchall()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}", exc_info=True)
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.", call.message.chat.id, call.message.message_id)
        return
    finally:
        if conn:
            conn.close()

    if not users:
        response_text = "ü§∑‚Äç‚ôÇÔ∏è –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."
    else:
        response_text = "üë• *–°–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:*\n\n"
        for user in users:
            block_status = "üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ" if user['is_blocked'] else "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π"
            username = f"@{user['username']}" if user['username'] else "–ù–µ–º–∞—î —é–∑–µ—Ä–Ω–µ–π–º—É"
            first_name = user['first_name'] if user['first_name'] else "–ù–µ–≤—ñ–¥–æ–º–µ —ñ–º'—è"
            response_text += f"- {first_name} ({username}) [ID: `{user['chat_id']}`] - {block_status}\n"

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main"))

    bot.edit_message_text(response_text, call.message.chat.id, call.message.message_id,
                         parse_mode='Markdown', reply_markup=markup)
    logger.info(f"DEBUG: Users list sent to {call.message.chat.id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì

@error_handler
def process_user_for_block_unblock(message):
    logger.info(f"DEBUG: process_user_for_block_unblock called for chat_id: {message.chat.id}, target: {message.text[:50]}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è."""
    admin_chat_id = message.chat.id
    target_identifier = message.text.strip()
    target_chat_id = None

    conn = get_db_connection()
    if not conn:
        bot.send_message(admin_chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î.")
        return
    cur = conn.cursor()

    try:
        if target_identifier.startswith('@'):
            username = target_identifier[1:]
            cur.execute(pg_sql.SQL("SELECT chat_id FROM users WHERE username = %s;"), (username,))
            result = cur.fetchone()
            if result:
                target_chat_id = result['chat_id']
            else:
                bot.send_message(admin_chat_id, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —é–∑–µ—Ä–Ω–µ–π–º–æ–º `{target_identifier}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                return
        else:
            try:
                target_chat_id = int(target_identifier)
                cur.execute(pg_sql.SQL("SELECT chat_id FROM users WHERE chat_id = %s;"), (target_chat_id,))
                if not cur.fetchone():
                    bot.send_message(admin_chat_id, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID `{target_chat_id}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")
                    return
            except ValueError:
                bot.send_message(admin_chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω–∏–π `chat_id` (—á–∏—Å–ª–æ) –∞–±–æ `@username`.")
                return

        if target_chat_id == ADMIN_CHAT_ID:
            bot.send_message(admin_chat_id, "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ —Å–µ–±–µ.")
            return

        if target_chat_id:
            current_status = is_user_blocked(target_chat_id)
            action_text = "–∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏" if not current_status else "—Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏"
            confirmation_text = f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ {action_text} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID `{target_chat_id}` (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É)?\n"

            markup = types.InlineKeyboardMarkup()
            if not current_status:
                markup.add(types.InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data=f"user_block_{target_chat_id}"))
            else:
                markup.add(types.InlineKeyboardButton("‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data=f"user_unblock_{target_chat_id}"))
            markup.add(types.InlineKeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_panel_main"))

            bot.send_message(admin_chat_id, confirmation_text, reply_markup=markup, parse_mode='Markdown')
        else:
            bot.send_message(admin_chat_id, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è: {e}", exc_info=True)
        bot.send_message(admin_chat_id, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É.")
    finally:
        if conn:
            conn.close()
    logger.info(f"DEBUG: User block/unblock flow for {target_chat_id} processed by admin {admin_chat_id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì

@error_handler
def handle_user_block_callbacks(call):
    logger.info(f"DEBUG: handle_user_block_callbacks called for chat_id: {call.message.chat.id}, data: {call.data}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–ª–±–µ–∫–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."""
    admin_chat_id = call.message.chat.id
    data_parts = call.data.split('_')
    action = data_parts[1]
    target_chat_id = int(data_parts[2])

    if action == 'block':
        success = set_user_block_status(admin_chat_id, target_chat_id, True)
        if success:
            bot.edit_message_text(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID `{target_chat_id}` —É—Å–ø—ñ—à–Ω–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.",
                                  chat_id=admin_chat_id, message_id=call.message.message_id, parse_mode='Markdown')
            try:
                bot.send_message(target_chat_id, "‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –±—É–ª–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_chat_id}: {e}")
            log_statistics('user_blocked', admin_chat_id, target_chat_id)
        else:
            bot.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID `{target_chat_id}`.",
                                  chat_id=admin_chat_id, message_id=call.message.message_id, parse_mode='Markdown')
    elif action == 'unblock':
        success = set_user_block_status(admin_chat_id, target_chat_id, False)
        if success:
            bot.edit_message_text(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID `{target_chat_id}` —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ.",
                                  chat_id=admin_chat_id, message_id=call.message.message_id, parse_mode='Markdown')
            try:
                bot.send_message(target_chat_id, "‚úÖ –í–∞—à –∞–∫–∞—É–Ω—Ç –±—É–ª–æ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_chat_id}: {e}")
            log_statistics('user_unblocked', admin_chat_id, target_chat_id)
        else:
            bot.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID `{target_chat_id}`.",
                                  chat_id=admin_chat_id, message_id=call.message.message_id, parse_mode='Markdown')
    bot.answer_callback_query(call.id)
    logger.info(f"DEBUG: User block/unblock callback processed for {target_chat_id} by admin {admin_chat_id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì

@error_handler
def send_pending_products_for_moderation(call):
    logger.info(f"DEBUG: send_pending_products_for_moderation called for chat_id: {call.message.chat.id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É —Ç–æ–≤–∞—Ä–∏, —â–æ –æ—á—ñ–∫—É—é—Ç—å –º–æ–¥–µ—Ä–∞—Ü—ñ—ó."""
    conn = get_db_connection()
    if not conn:
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é (–ø–æ–º–∏–ª–∫–∞ –ë–î).", call.message.chat.id, call.message.message_id)
        return
    cur = conn.cursor()
    try:
        cur.execute(pg_sql.SQL("""
            SELECT id, seller_chat_id, seller_username, product_name, price, description, photos, geolocation, created_at
            FROM products
            WHERE status = 'pending'
            ORDER BY created_at ASC
            LIMIT 5
        """))
        pending_products = cur.fetchall()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é: {e}", exc_info=True)
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.", call.message.chat.id, call.message.message_id)
        return
    finally:
        if conn:
            conn.close()

    if not pending_products:
        response_text = "üéâ –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó."
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main"))
        bot.edit_message_text(response_text, call.message.chat.id, call.message.message_id, reply_markup=markup)
        logger.info(f"DEBUG: No pending products for moderation for admin {call.message.chat.id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
        return

    for product in pending_products:
        product_id = product['id']
        seller_chat_id = product['seller_chat_id']
        seller_username = product['seller_username'] if product['seller_username'] else "–ù–µ–º–∞—î"
        photos = json.loads(product['photos']) if product['photos'] else []
        geolocation_data = json.loads(product['geolocation']) if product['geolocation'] else None
        hashtags = generate_hashtags(product['description'])

        created_at_local = product['created_at'].astimezone(timezone.utc).strftime('%d.%m.%Y %H:%M')

        admin_message_text = (
            f"üì© *–¢–æ–≤–∞—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é (ID: {product_id})*\n\n"
            f"üì¶ *–ù–∞–∑–≤–∞:* {product['product_name']}\n"
            f"üí∞ *–¶—ñ–Ω–∞:* {product['price']}\n"
            f"üìù *–û–ø–∏—Å:* {product['description'][:500]}...\n"
            f"üìç –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è: {'–¢–∞–∫' if geolocation_data else '–ù—ñ'}\n"
            f"üè∑Ô∏èÔ∏è –•–µ—à—Ç–µ–≥–∏: {hashtags}\n\n"
            f"üë§ *–ü—Ä–æ–¥–∞–≤–µ—Ü—å:* [{'@' + seller_username if seller_username != '–ù–µ–º–∞—î' else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}](tg://user?id={seller_chat_id})\n"
            f"üì∏ *–§–æ—Ç–æ:* {len(photos)} —à—Ç.\n"
            f"üìÖ *–î–æ–¥–∞–Ω–æ:* {created_at_local}"
        )

        markup_admin = types.InlineKeyboardMarkup()
        markup_admin.add(
            types.InlineKeyboardButton("‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"approve_{product_id}"),
            types.InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{product_id}")
        )
        
        try:
            if photos:
                media = [types.InputMediaPhoto(photo_id, caption=admin_message_text if i == 0 else None, parse_mode='Markdown') 
                         for i, photo_id in enumerate(photos)]
                bot.send_media_group(call.message.chat.id, media)
                
                bot.send_message(call.message.chat.id, f"üëÜ –ú–æ–¥–µ—Ä–∞—Ü—ñ—è —Ç–æ–≤–∞—Ä—É ID: {product_id} (—Ñ–æ—Ç–æ –≤–∏—â–µ)", reply_markup=markup_admin, parse_mode='Markdown')
            else:
                bot.send_message(call.message.chat.id, admin_message_text,
                                   parse_mode='Markdown',
                                   reply_markup=markup_admin)
            logger.info(f"DEBUG: Sent pending product {product_id} for admin review to {call.message.chat.id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ç–æ–≤–∞—Ä—É {product_id} –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}", exc_info=True)
            bot.send_message(call.message.chat.id, f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–æ–≤–∞—Ä {product_id} –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó.")

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main"))
    bot.send_message(call.message.chat.id, "‚¨ÜÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —Ç–æ–≤–∞—Ä–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –≤–∏—â–µ.", reply_markup=markup)

@error_handler
def send_admin_commissions_info(call):
    logger.info(f"DEBUG: send_admin_commissions_info called for chat_id: {call.message.chat.id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—ó."""
    conn = get_db_connection()
    if not conn:
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—ó (–ø–æ–º–∏–ª–∫–∞ –ë–î).", call.message.chat.id, call.message.message_id)
        return
    cur = conn.cursor()
    try:
        cur.execute(pg_sql.SQL("""
            SELECT 
                SUM(CASE WHEN status = 'pending_payment' THEN amount ELSE 0 END) AS total_pending,
                SUM(CASE WHEN status = 'paid' THEN amount ELSE 0 END) AS total_paid
            FROM commission_transactions;
        """))
        commission_summary = cur.fetchone()

        cur.execute(pg_sql.SQL("""
            SELECT ct.product_id, p.product_name, p.seller_chat_id, u.username, ct.amount, ct.status, ct.created_at
            FROM commission_transactions ct
            JOIN products p ON ct.product_id = p.id
            JOIN users u ON p.seller_chat_id = u.chat_id
            ORDER BY ct.created_at DESC
            LIMIT 10;
        """))
        recent_transactions = cur.fetchall()

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—ó: {e}", exc_info=True)
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—ó.", call.message.chat.id, call.message.message_id)
        return
    finally:
        if conn:
            conn.close()

    text = (
        f"üí∞ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º—ñ—Å—ñ–π*\n\n"
        f"‚Ä¢ –í—Å—å–æ–≥–æ –æ—á—ñ–∫—É—î—Ç—å—Å—è: *{commission_summary['total_pending'] or 0:.2f} –≥—Ä–Ω*\n"
        f"‚Ä¢ –í—Å—å–æ–≥–æ —Å–ø–ª–∞—á–µ–Ω–æ: *{commission_summary['total_paid'] or 0:.2f} –≥—Ä–Ω*\n\n"
        f"üìä *–û—Å—Ç–∞–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:*\n"
    )

    if recent_transactions:
        for tx in recent_transactions:
            username = f"@{tx['username']}" if tx['username'] else f"ID: {tx['seller_chat_id']}"
            created_at_local = tx['created_at'].astimezone(timezone.utc).strftime('%d.%m.%Y %H:%M')
            text += (
                f"- –¢–æ–≤–∞—Ä ID `{tx['product_id']}` ({tx['product_name']})\n"
                f"  –ü—Ä–æ–¥–∞–≤–µ—Ü—å: {username}\n"
                f"  –°—É–º–∞: {tx['amount']:.2f} –≥—Ä–Ω, –°—Ç–∞—Ç—É—Å: {tx['status']}\n"
                f"  –î–∞—Ç–∞: {created_at_local}\n\n"
            )
    else:
        text += "  –ù–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∫–æ–º—ñ—Å—ñ–π.\n\n"

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main"))
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)
    logger.info(f"DEBUG: Admin commissions info sent to {call.message.chat.id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì

@error_handler
def send_admin_ai_statistics(call):
    logger.info(f"DEBUG: send_admin_ai_statistics called for chat_id: {call.message.chat.id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è AI."""
    conn = get_db_connection()
    if not conn:
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø–æ–º–∏–ª–∫–∞ –ë–î).", call.message.chat.id, call.message.message_id)
        return
    cur = conn.cursor()
    try:
        cur.execute(pg_sql.SQL("SELECT COUNT(*) FROM conversations WHERE sender_type = 'user';"))
        total_user_queries = cur.fetchone()[0]

        cur.execute(pg_sql.SQL("""
            SELECT user_chat_id, COUNT(*) as query_count
            FROM conversations
            WHERE sender_type = 'user'
            GROUP BY user_chat_id
            ORDER BY query_count DESC
            LIMIT 5;
        """))
        top_ai_users = cur.fetchall()

        cur.execute(pg_sql.SQL("""
            SELECT DATE(timestamp) as date, COUNT(*) as query_count
            FROM conversations
            WHERE sender_type = 'user'
            GROUP BY DATE(timestamp)
            ORDER BY date DESC
            LIMIT 7;
        """))
        daily_ai_queries = cur.fetchall()

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", call.message.chat.id, call.message.message_id)
        return
    finally:
        if conn:
            conn.close()

    text = (
        f"ü§ñ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI –ü–æ–º—ñ—á–Ω–∏–∫–∞*\n\n"
        f"‚Ä¢ –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–æ AI: *{total_user_queries}*\n\n"
        f"üìä *–ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ AI:*\n"
    )
    if top_ai_users:
        for user_data_row in top_ai_users:
            user_id = user_data_row['user_chat_id']
            query_count = user_data_row['query_count']
            user_info = bot.get_chat(user_id)
            username = f"@{user_info.username}" if user_info.username else f"ID: {user_id}"
            text += f"- {username}: {query_count} –∑–∞–ø–∏—Ç—ñ–≤\n"
    else:
        text += "  –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö.\n"

    text += "\nüìÖ *–ó–∞–ø–∏—Ç–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤:*\n"
    if daily_ai_queries:
        for day_data_row in daily_ai_queries:
            text += f"- {day_data_row['date']}: {day_data_row['query_count']} –∑–∞–ø–∏—Ç—ñ–≤\n"
    else:
        text += "  –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö.\n"

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main"))
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)
    logger.info(f"DEBUG: Admin AI stats sent to {call.message.chat.id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì


# --- 16. Callbacks –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—É (–û–ù–û–í–õ–ï–ù–û –î–õ–Ø PostgreSQL) ---
@error_handler
def handle_product_moderation_callbacks(call):
    logger.info(f"DEBUG: handle_product_moderation_callbacks called for chat_id: {call.message.chat.id}, data: {call.data}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–ª–±–µ–∫–∏ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è/–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è/–ø—Ä–æ–¥–∞–∂—É —Ç–æ–≤–∞—Ä—É."""
    if call.message.chat.id != ADMIN_CHAT_ID:
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return

    data_parts = call.data.split('_')
    action = data_parts[0]
    product_id = int(data_parts[1])

    conn = get_db_connection()
    if not conn:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î.")
        return
    cur = conn.cursor()
    product_info = None
    try:
        cur.execute(pg_sql.SQL("""
            SELECT seller_chat_id, product_name, price, description, photos, geolocation, admin_message_id, channel_message_id, status
            FROM products WHERE id = %s;
        """), (product_id,))
        product_info = cur.fetchone()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä {product_id} –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {e}", exc_info=True)
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä.")
        if conn: conn.close()
        return

    if not product_info:
        bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        if conn: conn.close()
        return

    seller_chat_id = product_info['seller_chat_id']
    product_name = product_info['product_name']
    price = product_info['price']
    description = product_info['description']
    photos_str = product_info['photos']
    geolocation_str = product_info['geolocation']
    admin_message_id = product_info['admin_message_id']
    channel_message_id = product_info['channel_message_id']
    current_status = product_info['status']

    photos = json.loads(photos_str) if photos_str else []
    geolocation = json.loads(geolocation_str) if geolocation_str else None
    hashtags = generate_hashtags(description)

    try:
        if action == 'approve':
            if current_status != 'pending':
                bot.answer_callback_query(call.id, f"–¢–æ–≤–∞—Ä –≤–∂–µ –º–∞—î —Å—Ç–∞—Ç—É—Å '{current_status}'.")
                return

            channel_text = (
                f"üì¶ *–ù–æ–≤–∏–π —Ç–æ–≤–∞—Ä: {product_name}*\n\n"
                f"üí∞ *–¶—ñ–Ω–∞:* {price}\n"
                f"üìù *–û–ø–∏—Å:*\n{description}\n\n"
                f"üìç –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è: {'–ü—Ä–∏—Å—É—Ç–Ω—è' if geolocation else '–í—ñ–¥—Å—É—Ç–Ω—è'}\n"
                f"üè∑Ô∏èÔ∏è –•–µ—à—Ç–µ–≥–∏: {hashtags}\n\n"
                f"üë§ *–ü—Ä–æ–¥–∞–≤–µ—Ü—å:* [–ù–∞–ø–∏—Å–∞—Ç–∏ –ø—Ä–æ–¥–∞–≤—Ü—é](tg://user?id={seller_chat_id})"
            )
            
            published_message = None
            if photos:
                media = [types.InputMediaPhoto(photo_id, caption=channel_text if i == 0 else None, parse_mode='Markdown') 
                         for i, photo_id in enumerate(photos)]
                sent_messages = bot.send_media_group(CHANNEL_ID, media)
                published_message = sent_messages[0] if sent_messages else None
            else:
                published_message = bot.send_message(CHANNEL_ID, channel_text, parse_mode='Markdown')

            if published_message:
                new_channel_message_id = published_message.message_id
                cur.execute(pg_sql.SQL("""
                    UPDATE products SET status = 'approved', moderator_id = %s, moderated_at = CURRENT_TIMESTAMP,
                    channel_message_id = %s
                    WHERE id = %s;
                """), (call.message.chat.id, new_channel_message_id, product_id))
                conn.commit()
                log_statistics('product_approved', call.message.chat.id, product_id)
                bot.send_message(seller_chat_id,
                                 f"‚úÖ –í–∞—à —Ç–æ–≤–∞—Ä '{product_name}' —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ! [–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏](https://t.me/c/{str(CHANNEL_ID).replace('-100', '')}/{new_channel_message_id})",
                                 parse_mode='Markdown', disable_web_page_preview=True)
                
                if admin_message_id:
                    bot.edit_message_text(f"‚úÖ –¢–æ–≤–∞—Ä *'{product_name}'* (ID: {product_id}) –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.",
                                          chat_id=call.message.chat.id, message_id=admin_message_id, parse_mode='Markdown')
                    markup_sold = types.InlineKeyboardMarkup()
                    markup_sold.add(types.InlineKeyboardButton("üí∞ –í—ñ–¥–º—ñ—Ç–∏—Ç–∏ —è–∫ –ø—Ä–æ–¥–∞–Ω–æ", callback_data=f"sold_{product_id}"))
                    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=admin_message_id, reply_markup=markup_sold)
                else:
                    bot.send_message(call.message.chat.id, f"‚úÖ –¢–æ–≤–∞—Ä *'{product_name}'* (ID: {product_id}) –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.")
                logger.info(f"DEBUG: Product {product_id} approved and published by admin {call.message.chat.id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì

            else:
                raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª.")

        elif action == 'reject':
            if current_status != 'pending': # –ó–º—ñ–Ω–µ–Ω–æ –∑ 'pending' –Ω–∞ 'approved' –¥–ª—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –≤–∂–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö
                bot.answer_callback_query(call.id, f"–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –∞–±–æ –≤–∂–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ (–ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å: '{current_status}').")
                return

            cur.execute(pg_sql.SQL("""
                UPDATE products SET status = 'rejected', moderator_id = %s, moderated_at = CURRENT_TIMESTAMP
                WHERE id = %s;
            """), (call.message.chat.id, product_id))
            conn.commit()
            log_statistics('product_rejected', call.message.chat.id, product_id)
            bot.send_message(seller_chat_id,
                             f"‚ùå –í–∞—à —Ç–æ–≤–∞—Ä '{product_name}' –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                             "–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏: –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –ø—Ä–∞–≤–∏–ª–∞–º, –Ω–∏–∑—å–∫–∞ —è–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ, –Ω–µ—Ç–æ—á–Ω–∏–π –æ–ø–∏—Å.\n"
                             "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–¥–∞—Ç–∏ –∑–Ω–æ–≤—É.",
                             parse_mode='Markdown')
            
            if admin_message_id:
                bot.edit_message_text(f"‚ùå –¢–æ–≤–∞—Ä *'{product_name}'* (ID: {product_id}) –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.",
                                      chat_id=call.message.chat.id, message_id=admin_message_id, parse_mode='Markdown')
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=admin_message_id, reply_markup=None)
            else:
                bot.send_message(call.message.chat.id, f"‚ùå –¢–æ–≤–∞—Ä *'{product_name}'* (ID: {product_id}) –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
            logger.info(f"DEBUG: Product {product_id} rejected by admin {call.message.chat.id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì


        elif action == 'sold':
            if current_status != 'approved':
                bot.answer_callback_query(call.id, f"–¢–æ–≤–∞—Ä –Ω–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏–π –∞–±–æ –≤–∂–µ –ø—Ä–æ–¥–∞–Ω–∏–π (–ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å: '{current_status}').")
                return

            if channel_message_id:
                try:
                    cur.execute(pg_sql.SQL("""
                        UPDATE products SET status = 'sold', moderator_id = %s, moderated_at = CURRENT_TIMESTAMP
                        WHERE id = %s;
                    """), (call.message.chat.id, product_id))
                    conn.commit()
                    log_statistics('product_sold', call.message.chat.id, product_id)

                    sold_text = (
                        f"üì¶ *–ü–†–û–î–ê–ù–û!* {product_name}\n\n"
                        f"üí∞ *–¶—ñ–Ω–∞:* {price}\n"
                        f"üìù *–û–ø–∏—Å:*\n{description}\n\n"
                        f"*–¶–µ–π —Ç–æ–≤–∞—Ä –≤–∂–µ –ø—Ä–æ–¥–∞–Ω–æ.*"
                    )
                    
                    if photos:
                        bot.edit_message_caption(chat_id=CHANNEL_ID, message_id=channel_message_id,
                                                 caption=sold_text, parse_mode='Markdown')
                    else:
                        bot.edit_message_text(chat_id=CHANNEL_ID, message_id=channel_message_id,
                                              text=sold_text, parse_mode='Markdown')
                    
                    bot.send_message(seller_chat_id, f"‚úÖ –í–∞—à —Ç–æ–≤–∞—Ä '{product_name}' –≤—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ *'–ü–†–û–î–ê–ù–û'*. –î—è–∫—É—î–º–æ –∑–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é!", parse_mode='Markdown')
                    
                    if admin_message_id:
                        bot.edit_message_text(f"üí∞ –¢–æ–≤–∞—Ä *'{product_name}'* (ID: {product_id}) –≤—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ –ø—Ä–æ–¥–∞–Ω–∏–π.",
                                              chat_id=call.message.chat.id, message_id=admin_message_id, parse_mode='Markdown')
                        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=admin_message_id, reply_markup=None)
                    else:
                        bot.send_message(call.message.chat.id, f"üí∞ –¢–æ–≤–∞—Ä *'{product_name}'* (ID: {product_id}) –≤—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ –ø—Ä–æ–¥–∞–Ω–∏–π.")
                    logger.info(f"DEBUG: Product {product_id} marked as sold by admin {call.message.chat.id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì

                except telebot.apihelper.ApiTelegramException as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–º—ñ—Ç—Ü—ñ —Ç–æ–≤–∞—Ä—É {product_id} —è–∫ –ø—Ä–æ–¥–∞–Ω–æ–≥–æ –≤ –∫–∞–Ω–∞–ª—ñ: {e}", exc_info=True)
                    bot.send_message(call.message.chat.id, f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥–∞–∂—É –≤ –∫–∞–Ω–∞–ª—ñ –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id}. –ú–æ–∂–ª–∏–≤–æ, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
                    bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ.")
                    return
            else:
                bot.send_message(call.message.chat.id, "–¶–µ–π —Ç–æ–≤–∞—Ä —â–µ –Ω–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ, –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ –≤—ñ–¥—Å—É—Ç–Ω—î. –ù–µ –º–æ–∂–Ω–∞ –≤—ñ–¥–º—ñ—Ç–∏—Ç–∏ —è–∫ –ø—Ä–æ–¥–∞–Ω–∏–π.")
                bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –º–æ–¥–µ—Ä–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—É {product_id}, –¥—ñ—è {action}: {e}", exc_info=True)
        bot.send_message(call.message.chat.id, f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥—ñ—ó '{action}' –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id}.")
    finally:
        if conn:
            conn.close()
    bot.answer_callback_query(call.id)

# --- 17. –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ –ø—ñ—Å–ª—è –∫–æ–ª–±–µ–∫—É ---
@bot.callback_query_handler(func=lambda call: call.data == "admin_panel_main")
@error_handler
def back_to_admin_panel(call):
    logger.info(f"DEBUG: back_to_admin_panel called for chat_id: {call.message.chat.id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ."""
    if call.message.chat.id != ADMIN_CHAT_ID:
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        types.InlineKeyboardButton("‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó", callback_data="admin_pending"),
        types.InlineKeyboardButton("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users"),
        types.InlineKeyboardButton("üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è", callback_data="admin_block"),
        types.InlineKeyboardButton("üí∞ –ö–æ–º—ñ—Å—ñ—ó", callback_data="admin_commissions"),
        types.InlineKeyboardButton("ü§ñ AI –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_ai_stats")
    )

    bot.edit_message_text("üîß *–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å*\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                          chat_id=call.message.chat.id, message_id=call.message.message_id,
                          reply_markup=markup, parse_mode='Markdown')
    bot.answer_callback_query(call.id)
    logger.info(f"DEBUG: Admin {call.message.chat.id} returned to main panel.") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì

# --- 18. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Render ---

logger.info("–ó–∞–ø—É—Å–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î...")
init_db()

if WEBHOOK_URL and TOKEN:
    try:
        bot.remove_webhook()
        full_webhook_url = f"{WEBHOOK_URL}/{TOKEN}"
        bot.set_webhook(url=full_webhook_url)
        logger.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {full_webhook_url}")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook: {e}", exc_info=True)
        logger.error("–ë–æ—Ç –Ω–µ –±—É–¥–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ Telegram —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É –≤–µ–±—Ö—É–∫–∞.")
else:
    logger.critical("WEBHOOK_URL –∞–±–æ TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ë–æ—Ç –Ω–µ –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ —Ä–µ–∂–∏–º—ñ webhook.")

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ Flask-–¥–æ–¥–∞—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ...")
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=True)

@app.route(f'/{TOKEN}', methods=['POST'])
@error_handler
def webhook_receiver():
    """–û–±—Ä–æ–±–ª—è—î –≤—Ö—ñ–¥–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ Telegram."""
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ü—å–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ
        if update.message:
            logger.info(f"DEBUG: Webhook received message update from {update.message.chat.id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
        elif update.callback_query:
            logger.info(f"DEBUG: Webhook received callback query update from {update.callback_query.message.chat.id}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì
        else:
            logger.info(f"DEBUG: Webhook received unknown update type: {update}") # –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –õ–û–ì

        bot.process_new_updates([update])
        logger.info(f"Received webhook update processed by pyTelegramBotAPI: {json_string[:100]}...")
        return '!', 200
    else:
        logger.warning("Received non-JSON request on webhook path. Ignoring.")
        return 'Hello from bot webhook!', 200
