import sqlite3
import os
import telebot
from telebot import types
import logging # Import logging first
from datetime import datetime, timedelta
import re
import json
import requests
from dotenv import load_dotenv
from flask import Flask, request # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ Flask
import time # –î–æ–¥–∞–Ω–æ –¥–ª—è time.sleep

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ Base —Ç–∞ User –∑ users.py
# –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ users.py –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ç—ñ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó, —â–æ –π bot.py
from users import Base, User
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

load_dotenv()

# --- 2. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è (–ü–ï–†–ï–ú–Ü–©–ï–ù–û –í–ì–û–†–£ –î–õ–Ø –†–ê–ù–ù–¨–û–á –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–á) ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler() # –î–æ–¥–∞–Ω–æ –¥–ª—è –≤–∏–≤–æ–¥—É –ª–æ–≥—ñ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å Heroku
    ]
)
# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ–±'—î–∫—Ç logger –ø—ñ—Å–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è basicConfig
logger = logging.getLogger(__name__)

# --- 1. –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ë–æ—Ç–∞ ---
# –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–ª—è –±–µ–∑–ø–µ–∫–∏ —Ç–∞ –ª–µ–≥–∫–æ—Å—Ç—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó.
# –Ø–∫—â–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏!).
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8039977178:AAGS-GbH-lhljGGG6OgJ2iMU_ncB-JzeOvU') # –ó–ê–ú–Ü–ù–Ü–¢–¨ –¶–ï–ô –¢–û–ö–ï–ù –ù–ê –í–ê–® –ê–ö–¢–£–ê–õ–¨–ù–ò–ô!
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID', '8184456641')) # –ó–ê–ú–Ü–ù–Ü–¢–¨ –ù–ê –í–ê–® CHAT_ID –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–†–ê!
CHANNEL_ID = int(os.getenv('CHANNEL_ID', '-1002535586055')) # –ó–ê–ú–Ü–ù–Ü–¢–¨ –ù–ê ID –í–ê–®–û–ì–û –ö–ê–ù–ê–õ–£!
MONOBANK_CARD_NUMBER = os.getenv('MONOBANK_CARD_NUMBER', '4441 1111 5302 1484') # –ó–ê–ú–Ü–ù–Ü–¢–¨ –ù–ê –ù–û–ú–ï–† –ö–ê–†–¢–ö–ò!

# XAI (Grok) API –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
XAI_API_KEY = os.getenv('XAI_API_KEY', 'YOUR_XAI_API_KEY_HERE') # –ó–ê–ú–Ü–ù–Ü–¢–¨ –ù–ê –í–ê–® –ö–õ–Æ–ß XAI API!
XAI_API_URL = os.getenv('XAI_API_URL', 'https://api.x.ai/v1/chat/completions') # –ó–ê–ú–Ü–ù–Ü–¢–¨ –ù–ê –í–ê–® URL XAI API, –Ø–ö–©–û –í–Ü–ù –í–Ü–î–†–Ü–ó–ù–Ø–Ñ–¢–¨–°–Ø!

# Heroku Webhook –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
heroku_app_name_raw = os.getenv('HEROKU_APP_NAME')
if heroku_app_name_raw:
    # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ –∞–±–æ –ª–∞–ø–∫–∏, —è–∫—â–æ –≤–æ–Ω–∏ –≤–∏–ø–∞–¥–∫–æ–≤–æ –ø–æ—Ç—Ä–∞–ø–∏–ª–∏ —É –∑–º—ñ–Ω–Ω—É
    HEROKU_APP_NAME = heroku_app_name_raw.strip("'\" ").lower()
else:
    logger.warning("–ó–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ 'HEROKU_APP_NAME' –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í–µ–±—Ö—É–∫ –º–æ–∂–µ –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∫–æ—Ä–µ–∫—Ç–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è.")
    HEROKU_APP_NAME = 'your-app-name' # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è

WEBHOOK_URL_BASE = "https://" + HEROKU_APP_NAME + ".herokuapp.com"
WEBHOOK_URL_PATH = f"/webhook/{TOKEN}" # –®–ª—è—Ö, –Ω–∞ —è–∫–∏–π Telegram –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è TOKEN —è–∫ —á–∞—Å—Ç–∏–Ω–∏ —à–ª—è—Ö—É —Ä–æ–±–∏—Ç—å –π–æ–≥–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º.

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__) # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Flask –¥–æ–¥–∞—Ç–æ–∫ –ü–Ü–°–õ–Ø —ñ–º–ø–æ—Ä—Ç—ñ–≤ Flask —Ç–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó

# ===================
# üì¶ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ë–∞–∑–∏ –î–∞–Ω–∏—Ö (SQLAlchemy)
# ===================
DATABASE_URL_RAW = os.getenv("DATABASE_URL")
if DATABASE_URL_RAW:
    DATABASE_URL = DATABASE_URL_RAW.strip() # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
    if not DATABASE_URL:
        raise ValueError("‚ùå DATABASE_URL –∑–∞–¥–∞–Ω–æ, –∞–ª–µ –ø–æ—Ä–æ–∂–Ω—î –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏!")
else:
    raise ValueError("‚ùå DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω–æ!")

try:
    engine = create_engine(DATABASE_URL)
    Session = sessionmaker(bind=engine)
    Base.metadata.create_all(engine) # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞.")
except Exception as e:
    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∞–±–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}", exc_info=True)
    # –í–∞–∂–ª–∏–≤–æ: —è–∫—â–æ –ë–î –Ω–µ –ø—Ä–∞—Ü—é—î, –±–æ—Ç –Ω–µ –∑–º–æ–∂–µ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É–≤–∞—Ç–∏.
    # –ú–æ–∂–Ω–∞ –≤–∏–π—Ç–∏ –∞–±–æ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑ –æ–±–º–µ–∂–µ–Ω–∏–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º.
    # –ù–∞—Ä–∞–∑—ñ, –º–∏ –¥–æ–∑–≤–æ–ª–∏–º–æ –π–æ–º—É –≤–ø–∞—Å—Ç–∏, —â–æ–± –ø–æ–º–∏–ª–∫–∞ –±—É–ª–∞ –æ—á–µ–≤–∏–¥–Ω–æ—é.
    raise

# --- 3. –ó–º—ñ–Ω–Ω—ñ —Å—Ç–∞–Ω—ñ–≤ –¥–ª—è –±–∞–≥–∞—Ç–æ—à–∞–≥–æ–≤–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤ ---
# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –ø—ñ–¥ —á–∞—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É.
# –§–æ—Ä–º–∞—Ç: {chat_id: {'step_number': 1, 'data': {'product_name': '', ...}}}
user_data = {}

# --- 4. –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö (SQLite - –¢–ï–ü–ï–† SQLAlchemy) ---
# DB_NAME = 'seller_bot.db' # –ë—ñ–ª—å—à–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è SQLite

def get_db_connection():
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö SQLAlchemy."""
    return Session() # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–æ–≤—É —Å–µ—Å—ñ—é

def init_db():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –±–∞–∑—É –¥–∞–Ω–∏—Ö, —Å—Ç–≤–æ—Ä—é—é—á–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ —Ç–∞ –æ–Ω–æ–≤–ª—é—é—á–∏ —Å—Ö–µ–º—É."""
    # –¶—è —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ–ø–µ—Ä –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ Base.metadata.create_all(engine)
    # –ê–ª–µ –º–∏ –º–æ–∂–µ–º–æ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ö–µ–º–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ.
    session = Session()
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–∫–∏ user_status, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
        # –î–ª—è SQLAlchemy —Ü–µ —Ä–æ–±–∏—Ç—å—Å—è —Å–∫–ª–∞–¥–Ω—ñ—à–µ, –Ω—ñ–∂ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ SQLite.
        # –ó–∞–∑–≤–∏—á–∞–π –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å Alembic.
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏, –º–∏ –º–æ–∂–µ–º–æ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –¥–æ–¥–∞—Ç–∏ –∫–æ–ª–æ–Ω–∫—É, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î,
        # –∞–ª–µ —Ü–µ –Ω–µ —î —ñ–¥–µ–∞–ª—å–Ω–∏–º —Ä—ñ—à–µ–Ω–Ω—è–º –¥–ª—è production.
        conn = engine.raw_connection()
        cursor = conn.cursor()
        try:
            cursor.execute("ALTER TABLE users ADD COLUMN user_status TEXT DEFAULT 'idle'")
            logger.info("–ö–æ–ª–æ–Ω–∫–∞ 'user_status' –¥–æ–¥–∞–Ω–∞ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ 'users'.")
        except Exception as e:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ–º–∏–ª–∫–∞ –ø–æ–≤'—è–∑–∞–Ω–∞ –∑ —Ç–∏–º, —â–æ –∫–æ–ª–æ–Ω–∫–∞ –≤–∂–µ —ñ—Å–Ω—É—î
            if "duplicate column" in str(e).lower() or "already exists" in str(e).lower():
                logger.info("–ö–æ–ª–æ–Ω–∫–∞ 'user_status' –≤–∂–µ —ñ—Å–Ω—É—î –≤ —Ç–∞–±–ª–∏—Ü—ñ 'users'.")
            else:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ 'user_status': {e}")
        finally:
            cursor.close()
            conn.close()

        # –¢–∞–±–ª–∏—Ü—è –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–æ–∫ –∑ AI - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è, —è–∫—â–æ –Ω–µ–º–∞—î
        # –¶–µ –≤–∂–µ —Ä–æ–±–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ Base.metadata.create_all(engine)
        # –ê–ª–µ —è–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —ñ–Ω—à—ñ —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—ñ –Ω–µ —î —á–∞—Å—Ç–∏–Ω–æ—é Base,
        # –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —ó—Ö, —Ü–µ –º—ñ—Å—Ü–µ –¥–ª—è —Ü—å–æ–≥–æ.

        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –∞–±–æ –≤–∂–µ —ñ—Å–Ω—É—î.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î (init_db): {e}", exc_info=True)
    finally:
        session.close()


# --- 5. –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ ---
def error_handler(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ —É —Ñ—É–Ω–∫—Ü—ñ—è—Ö –±–æ—Ç–∞."""
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ {func.__name__}: {e}", exc_info=True)
            chat_id_to_notify = ADMIN_CHAT_ID
            if args:
                first_arg = args[0]
                if isinstance(first_arg, types.Message):
                    chat_id_to_notify = first_arg.chat.id
                elif isinstance(first_arg, types.CallbackQuery):
                    chat_id_to_notify = first_arg.message.chat.id
            
            try:
                bot.send_message(ADMIN_CHAT_ID, f"üö® –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –±–æ—Ç—ñ!\n–§—É–Ω–∫—Ü—ñ—è: {func.__name__}\n–ü–æ–º–∏–ª–∫–∞: {e}\n–î–∏–≤—ñ—Ç—å—Å—è –¥–µ—Ç–∞–ª—ñ –≤ bot.log")
                if chat_id_to_notify != ADMIN_CHAT_ID:
                    bot.send_message(chat_id_to_notify, "üòî –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∂–µ —Å–ø–æ–≤—ñ—â–µ–Ω–∏–π.")
            except Exception as e_notify:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {e_notify}")
    return wrapper

# --- 6. –§—É–Ω–∫—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ —Ç–∞ –∑–∞–≥–∞–ª—å–Ω—ñ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---
@error_handler
def save_user(message_or_user):
    """–ó–±–µ—Ä—ñ–≥–∞—î –∞–±–æ –æ–Ω–æ–≤–ª—é—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö."""
    user = None
    chat_id = None

    if isinstance(message_or_user, types.Message):
        user = message_or_user.from_user
        chat_id = message_or_user.chat.id
    elif isinstance(message_or_user, types.User):
        user = message_or_user
        chat_id = user.id
    else:
        logger.warning(f"save_user –æ—Ç—Ä–∏–º–∞–≤ –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø: {type(message_or_user)}")
        return

    if not user or not chat_id:
        logger.warning("save_user: user –∞–±–æ chat_id –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ.")
        return

    session = get_db_connection()
    try:
        existing_user = session.query(User).filter_by(chat_id=chat_id).first()
        if existing_user:
            existing_user.username = user.username
            existing_user.first_name = user.first_name
            existing_user.last_name = user.last_name
            existing_user.last_activity = datetime.now()
        else:
            new_user = User(
                chat_id=chat_id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
                joined_at=datetime.now(),
                last_activity=datetime.now()
            )
            session.add(new_user)
        session.commit()
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id} –∑–±–µ—Ä–µ–∂–µ–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        session.rollback()
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}")
    finally:
        session.close()

@error_handler
def is_user_blocked(chat_id):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á."""
    session = get_db_connection()
    try:
        user = session.query(User).filter_by(chat_id=chat_id).first()
        return user and user.is_blocked
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è {chat_id}: {e}")
        return True # –í–≤–∞–∂–∞—î–º–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–º —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –±–µ–∑–ø–µ–∫–∏
    finally:
        session.close()

@error_handler
def set_user_block_status(admin_id, chat_id, status):
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    session = get_db_connection()
    try:
        user = session.query(User).filter_by(chat_id=chat_id).first()
        if user:
            user.is_blocked = status
            user.blocked_by = admin_id if status else None
            user.blocked_at = datetime.now() if status else None
            session.commit()
            return True
        return False
    except Exception as e:
        session.rollback()
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}")
        return False
    finally:
        session.close()

@error_handler
def generate_hashtags(description, num_hashtags=5):
    """–ì–µ–Ω–µ—Ä—É—î —Ö–µ—à—Ç–µ–≥–∏ –∑ –æ–ø–∏—Å—É —Ç–æ–≤–∞—Ä—É."""
    words = re.findall(r'\b\w+\b', description.lower())
    stopwords = set(['—è', '–º–∏', '—Ç–∏', '–≤–∏', '–≤—ñ–Ω', '–≤–æ–Ω–∞', '–≤–æ–Ω–æ', '–≤–æ–Ω–∏', '—Ü–µ', '—â–æ',
                     '—è–∫', '–¥–µ', '–∫–æ–ª–∏', '–∞', '—ñ', '—Ç–∞', '–∞–±–æ', '—á–∏', '–¥–ª—è', '–∑', '–Ω–∞',
                     '—É', '–≤', '–¥–æ', '–≤—ñ–¥', '–ø–æ', '–∑–∞', '–ø—Ä–∏', '–ø—Ä–æ', '–º—ñ–∂', '–ø—ñ–¥', '–Ω–∞–¥',
                     '–±–µ–∑', '—á–µ—Ä–µ–∑', '–¥—É–∂–µ', '—Ü–µ–π', '—Ç–æ–π', '–º—ñ–π', '—Ç–≤—ñ–π', '–Ω–∞—à', '–≤–∞—à',
                     '–ø—Ä–æ–¥–∞–º', '–ø—Ä–æ–¥–∞–º—Å—è', '–ø—Ä–æ–¥–∞—Ç–∏', '–ø—Ä–æ–¥–∞—é', '–ø—Ä–æ–¥–∞–∂', '–∫—É–ø–∏—Ç–∏', '–∫—É–ø–ª—é',
                     '–±—É', '–Ω–æ–≤–∏–π', '—Å—Ç–∞–Ω', '–º–æ–¥–µ–ª—å', '—Å–º', '–∫–≥', '–≥—Ä–Ω', 'uah', 'usd', 'eur', '–æ–¥–∏–Ω', '–¥–≤–∞', '—Ç—Ä–∏', '—á–æ—Ç–∏—Ä–∏', '–ø—è—Ç—å', '—à—ñ—Å—Ç—å', '—Å—ñ–º', '–≤—ñ—Å—ñ–º', '–¥–µ–≤—è—Ç—å', '–¥–µ—Å—è—Ç—å'])
    filtered_words = [word for word in words if len(word) > 2 and word not in stopwords]
    unique_words = list(set(filtered_words))
    hashtags = ['#' + word for word in unique_words[:num_hashtags]]
    return " ".join(hashtags) if hashtags else ""

@error_handler
def log_statistics(action, user_id=None, product_id=None, details=None):
    """–õ–æ–≥—É—î –¥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –ë–î, —è–∫—â–æ —Ü–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ.
    # –ù–∞—Ä–∞–∑—ñ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥—É—î–º–æ –≤ –∫–æ–Ω—Å–æ–ª—å/—Ñ–∞–π–ª.
    logger.info(f"STATISTIC: Action={action}, User={user_id}, Product={product_id}, Details={details}")


# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---
def get_user_current_status(chat_id):
    session = get_db_connection()
    try:
        user = session.query(User).filter_by(chat_id=chat_id).first()
        return user.user_status if user else 'idle'
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}")
        return 'idle' # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ 'idle' —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
    finally:
        session.close()

def set_user_status(chat_id, status):
    session = get_db_connection()
    try:
        user = session.query(User).filter_by(chat_id=chat_id).first()
        if user:
            user.user_status = status
            session.commit()
    except Exception as e:
        session.rollback()
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id} –Ω–∞ {status}: {e}")
    finally:
        session.close()

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ FAQ ---
def add_faq_entry(question, answer):
    # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é FAQ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –Ω–µ—ó
    logger.warning("–§—É–Ω–∫—Ü—ñ—è add_faq_entry –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –≤ –ë–î.")
    return False

def get_faq_answer(question_text):
    # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é FAQ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –Ω–µ—ó
    logger.warning("–§—É–Ω–∫—Ü—ñ—è get_faq_answer –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –≤ –ë–î.")
    return None

def delete_faq_entry(faq_id):
    # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é FAQ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –Ω–µ—ó
    logger.warning("–§—É–Ω–∫—Ü—ñ—è delete_faq_entry –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –≤ –ë–î.")
    return False

def get_all_faq_entries():
    # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é FAQ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –Ω–µ—ó
    logger.warning("–§—É–Ω–∫—Ü—ñ—è get_all_faq_entries –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –≤ –ë–î.")
    return []

# --- 7. Grok AI —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è ---
@error_handler
def get_grok_response(prompt, conversation_history=None):
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Grok AI.
    –Ø–∫—â–æ API –∫–ª—é—á –∞–±–æ URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ/–Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ, –≥–µ–Ω–µ—Ä—É—î –∑–∞–≥–ª—É—à–∫—É.
    """
    if not XAI_API_KEY or XAI_API_KEY == 'YOUR_XAI_API_KEY_HERE':
        logger.warning("XAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–∞–≥–ª—É—à–∫–∞.")
        return generate_elon_style_response(prompt)
    
    # FIX: Validate XAI_API_URL
    if not XAI_API_URL or not XAI_API_URL.startswith('http'):
        logger.error(f"XAI API URL –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π: '{XAI_API_URL}'. –í—ñ–Ω –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 'http://' –∞–±–æ 'https://'. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–∞–≥–ª—É—à–∫–∞.")
        return generate_elon_style_response(prompt)

    headers = {
        "Authorization": f"Bearer {XAI_API_KEY}",
        "Content-Type": "application/json"
    }

    # –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
    system_prompt = {
        "role": "system",
        "content": (
            "–¢–∏ ‚Äî –∫–ª—ñ—î–Ω—Ç–æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–∏–π AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è Telegram –±–æ—Ç–∞ –ø—Ä–æ–¥–∞–∂—É —Ç–æ–≤–∞—Ä—ñ–≤. "
            "–¢–≤–æ—è –º–µ—Ç–∞ ‚Äî –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏, "
            "–≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ —ó—Ö–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –∑–∞–æ—Ö–æ—á—É–≤–∞—Ç–∏ –¥–æ –ø–æ–∫—É–ø–∫–∏, "
            "—ñ, –∑–∞ –ø–æ—Ç—Ä–µ–±–∏, –¥–æ–ø–æ–º–æ–≥—Ç–∏ —É –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞—Ö —â–æ–¥–æ —Ü—ñ–Ω–∏. "
            "–ó–∞–≤–∂–¥–∏ –±—É–¥—å –≤–≤—ñ—á–ª–∏–≤–∏–º, —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–º, —Ç–∞ –Ω–∞–º–∞–≥–∞–π—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É –ø—Ä–æ–¥–∞–∂–µ–º. "
            "–Ø–∫—â–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —Å—Ç–æ—Å—É—î—Ç—å—Å—è —á–æ–≥–æ—Å—å, –∫—Ä—ñ–º –ø—Ä–æ–¥–∞–∂—É, –∞–±–æ –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ —Ä–∞–º–∫–∏ —Ç–≤–æ—ó—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π, "
            "–∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ '–∂–∏–≤–æ–≥–æ' –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ñ—Ä–∞–∑—É '–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω–æ–º'. "
            "–ù–µ –≤–∏–≥–∞–¥—É–π —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏, —è–∫–æ—ó –Ω–µ–º–∞—î. "
            "–Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –æ–±–≥–æ–≤–æ—Ä–∏—Ç–∏ —Ü—ñ–Ω—É, –º–æ–∂–µ—à –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ '–∑—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –ø—Ä–æ–¥–∞–≤—Ü—é' –∞–±–æ '–∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—Ä–æ–¥–∞–≤—Ü–µ–º –¥–ª—è –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è'. "
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π —Ç–∞ –ø—Ä–∏–≤—ñ—Ç–Ω–∏–π —Ç–æ–Ω. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é."
        )
    }

    messages = [system_prompt]
    if conversation_history:
        messages.extend(conversation_history)
    
    messages.append({"role": "user", "content": prompt})

    payload = {
        "model": "grok-1", # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ grok-1, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–æ, —ñ–Ω–∞–∫—à–µ –º–æ–∂–Ω–∞ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —ñ–Ω—à—ñ
        "messages": messages,
        "max_tokens": 300,
        "temperature": 0.7
    }

    try:
        response = requests.post(XAI_API_URL, headers=headers, json=payload, timeout=30)
        response.raise_for_status()
        
        data = response.json()
        if data.get("choices") and len(data["choices"]) > 0:
            content = data["choices"][0]["message"]["content"]
            logger.info(f"Grok –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞: {content[:100]}...")
            return content.strip()
        else:
            logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Grok: {data}")
            return generate_elon_style_response(prompt)

    except requests.exceptions.RequestException as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ HTTP –∑–∞–ø–∏—Ç—É –¥–æ Grok API: {e}")
        return generate_elon_style_response(prompt)
    except Exception as e:
        logger.error(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Grok: {e}")
        return generate_elon_style_response(prompt)

def generate_elon_style_response(prompt):
    """
    –ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ —Å—Ç–∏–ª—ñ –Ü–ª–æ–Ω–∞ –ú–∞—Å–∫–∞ —è–∫ –∑–∞–≥–ª—É—à–∫–∞, –∫–æ–ª–∏ AI API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ.
    """
    responses = [
        "üöÄ –ì–º, —Ü—ñ–∫–∞–≤–µ –ø–∏—Ç–∞–Ω–Ω—è! –Ø–∫ —ñ –∑ SpaceX, —Ç—É—Ç –ø–æ—Ç—Ä—ñ–±–µ–Ω —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥. –©–æ —Å–∞–º–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?",
        "‚ö° –û—á–µ–≤–∏–¥–Ω–æ! –Ø–∫ –∫–∞–∂—É—Ç—å –≤ Tesla - –ø—Ä–æ—Å—Ç–æ—Ç–∞ —Ü–µ –≤–µ—Ä—à–∏–Ω–∞ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ. –î–∞–≤–∞–π—Ç–µ —Ä–æ–∑–±–µ—Ä–µ–º–æ—Å—è.",
        "ü§ñ *–¥—É–º–∞—î —è–∫ Neuralink* –í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤—É–≤–∞–ª–æ –º–æ—ó –Ω–µ–π—Ä–æ–Ω–∏! –û—Å—å —â–æ —è –¥—É–º–∞—é...",
        "üéØ –Ø–∫ —ñ –∑ X (–∫–æ–ª–∏—à–Ω—ñ–π Twitter), —ñ–Ω–æ–¥—ñ –∫—Ä–∞—â–µ –±—É—Ç–∏ –ø—Ä—è–º–æ–ª—ñ–Ω—ñ–π–Ω–∏–º. –°–∫–∞–∂—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ—à–µ?",
        "üî• –•–º–º, —Ü–µ –Ω–∞–≥–∞–¥—É—î –º–µ–Ω—ñ —á–∞—Å, –∫–æ–ª–∏ –º–∏ –∑–∞–ø—É—Å–∫–∞–ª–∏ Falcon Heavy. –°–∫–ª–∞–¥–Ω–æ, –∞–ª–µ –º–æ–∂–ª–∏–≤–æ!",
        "üí° –ê—Ö, –∫–ª–∞—Å–∏–∫–∞! –Ø–∫ —ñ –∑ Hyperloop - —Å–ø–æ—á–∞—Ç–∫—É –∑–¥–∞—î—Ç—å—Å—è –Ω–µ–º–æ–∂–ª–∏–≤–∏–º, –ø–æ—Ç—ñ–º –æ—á–µ–≤–∏–¥–Ω–∏–º.",
        "üåü –¶—ñ–∫–∞–≤–æ! –£ Boring Company –º–∏ –± –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∫–æ–ø–∞–ª–∏ —Ç—É–Ω–µ–ª—å –ø—ñ–¥ –ø—Ä–æ–±–ª–µ–º–æ—é. –ê —Ç—É—Ç...",
        "‚ö° –õ–æ–≥—ñ—á–Ω–æ! –Ø–∫ –∑–∞–≤–∂–¥–∏ –∫–∞–∂—É - —è–∫—â–æ —â–æ—Å—å –Ω–µ –≤–∏–±—É—Ö–∞—î, –∑–Ω–∞—á–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –Ω–∞–º–∞–≥–∞—î—à—Å—è üòÑ"
    ]
    
    import random
    base_response = random.choice(responses)
    
    prompt_lower = prompt.lower()
    if any(word in prompt_lower for word in ['—Ü—ñ–Ω–∞', '–≤–∞—Ä—Ç—ñ—Å—Ç—å', '–≥—Ä–æ—à—ñ']):
        return f"{base_response}\n\nüí∞ –©–æ–¥–æ —Ü—ñ–Ω–∏ - —è–∫ –≤ Tesla, –≤–∞–∂–ª–∏–≤–∞ —è–∫—ñ—Å—Ç—å, –∞ –Ω–µ —Ç—ñ–ª—å–∫–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å! –ú–æ–∂–ª–∏–≤–æ, –≤–∞—Ä—Ç–æ '–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω–æ–º' –¥–ª—è –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è?"
    elif any(word in prompt_lower for word in ['—Ñ–æ—Ç–æ', '–∫–∞—Ä—Ç–∏–Ω–∫–∞', '–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è']):
        return f"{base_response}\n\nüì∏ –§–æ—Ç–æ - —Ü–µ —è–∫ –ø–µ—Ä—à–∏–π –µ—Ç–∞–ø —Ä–∞–∫–µ—Ç–∏, –±–µ–∑ –Ω–∏—Ö –Ω—ñ–∫—É–¥–∏!"
    elif any(word in prompt_lower for word in ['–¥–æ—Å—Ç–∞–≤–∫–∞', '–≤—ñ–¥–ø—Ä–∞–≤–∫–∞']):
        return f"{base_response}\n\nüöö –î–æ—Å—Ç–∞–≤–∫–∞? –Ø–∫–±–∏ —É –Ω–∞—Å –±—É–≤ Hyperloop, —Ü–µ –± –∑–∞–π–Ω—è–ª–æ —Ö–≤–∏–ª–∏–Ω–∏! üòâ"
    elif any(word in prompt_lower for word in ['–ø—Ä–æ–¥–∞–∂', '–∫—É–ø—ñ–≤–ª—è']):
        return f"{base_response}\n\nü§ù –ü—Ä–æ–¥–∞–∂ - —Ü–µ —è–∫ –∑–∞–ø—É—Å–∫ —Ä–∞–∫–µ—Ç–∏: –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞, –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, —É—Å–ø—ñ—Ö!"
    
    return base_response

@error_handler
def save_conversation(chat_id, message_text, sender_type, product_id=None):
    """–ó–±–µ—Ä—ñ–≥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É AI."""
    # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–º–æ–≤ –≤ –ë–î
    logger.warning("–§—É–Ω–∫—Ü—ñ—è save_conversation –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –≤ –ë–î.")
    pass

@error_handler
def get_conversation_history(chat_id, limit=5):
    """–û—Ç—Ä–∏–º—É—î —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É AI."""
    # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤ –∑ –ë–î
    logger.warning("–§—É–Ω–∫—Ü—ñ—è get_conversation_history –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –≤ –ë–î.")
    return []

# --- 8. –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ---
# –û–Ω–æ–≤–ª–µ–Ω–∞ –≥–æ–ª–æ–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
main_menu_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu_markup.add(types.KeyboardButton("üî• –ü—Ä–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä"), types.KeyboardButton("üõí –ú–æ—ó —Ç–æ–≤–∞—Ä–∏"))
main_menu_markup.add(types.KeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞"), types.KeyboardButton("ü§ñ –ó–∞–ø–∏—Ç–∞—Ç–∏ AI"))
main_menu_markup.add(types.KeyboardButton("üéÅ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è"), types.KeyboardButton("üë®‚Äçüíª –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω–æ–º"))


# --- 9. –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@bot.message_handler(commands=['start'])
@error_handler
def send_welcome(message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start."""
    chat_id = message.chat.id
    if is_user_blocked(chat_id):
        bot.send_message(chat_id, "‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
        return

    save_user(message)
    set_user_status(chat_id, 'idle') # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å "–≤—ñ–ª—å–Ω–∏–π" –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    log_statistics('start', chat_id)

    welcome_text = (
        "üõçÔ∏è *–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ SellerBot!*\n\n"
        "–Ø –≤–∞—à —Ä–æ–∑—É–º–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É —Ç–∞ –∫—É–ø—ñ–≤–ª—ñ —Ç–æ–≤–∞—Ä—ñ–≤. "
        "–ú–µ–Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î Grok AI –≤ —Å—Ç–∏–ª—ñ –Ü–ª–æ–Ω–∞ –ú–∞—Å–∫–∞! üöÄ\n\n"
        "–©–æ —è –≤–º—ñ—é:\n"
        "üì¶ –î–æ–ø–æ–º–∞–≥–∞—é —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n"
        "ü§ù –í–µ–¥—É –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∏ —Ç–∞ –¥–æ–º–æ–≤–ª–µ–Ω–æ—Å—Ç—ñ\n"
        "üìç –û–±—Ä–æ–±–ª—è—é –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é —Ç–∞ —Ñ–æ—Ç–æ\n"
        "üí∞ –°–ª—ñ–¥–∫—É—é –∑–∞ –∫–æ–º—ñ—Å—ñ—è–º–∏\n"
        "üéØ –ê–Ω–∞–ª—ñ–∑—É—é —Ä–∏–Ω–æ–∫ —Ç–∞ —Ü—ñ–Ω–∏\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ!"
    )
    bot.send_message(chat_id, welcome_text, reply_markup=main_menu_markup, parse_mode='Markdown')

@bot.message_handler(commands=['admin'])
@error_handler
def admin_panel(message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /admin –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ."""
    if message.chat.id != ADMIN_CHAT_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É.")
        return

    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        types.InlineKeyboardButton("‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó", callback_data="admin_pending"),
        types.InlineKeyboardButton("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users"),
        types.InlineKeyboardButton("üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è", callback_data="admin_block"),
        types.InlineKeyboardButton("üí∞ –ö–æ–º—ñ—Å—ñ—ó", callback_data="admin_commissions"),
        types.InlineKeyboardButton("ü§ñ AI –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_ai_stats"),
        types.InlineKeyboardButton("üìö –ö–µ—Ä—É–≤–∞–Ω–Ω—è FAQ", callback_data="admin_faq_menu")
    )
    bot.send_message(message.chat.id, "üîß *–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å*", reply_markup=markup, parse_mode='Markdown')

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è AI-—á–∞—Ç—É, —á–∞—Ç—É –∑ –ª—é–¥–∏–Ω–æ—é —Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó ---
@bot.message_handler(func=lambda message: message.text == "ü§ñ –ó–∞–ø–∏—Ç–∞—Ç–∏ AI")
@error_handler
def ask_ai_command(message):
    if is_user_blocked(message.chat.id):
        bot.send_message(message.chat.id, "‚ùå –í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é.")
        return
    set_user_status(message.chat.id, 'ai_chat')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("‚ùå –í–∏–π—Ç–∏ –∑ AI —á–∞—Ç—É"))
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à AI –ø–æ–º—ñ—á–Ω–∏–∫. –ó–∞–¥–∞–π—Ç–µ –º–µ–Ω—ñ –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏, –ø—Ä–æ–¥–∞–∂—ñ, –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ø—ñ–ª–∫—É–π—Ç–µ—Å—å! –î–ª—è –≤–∏—Ö–æ–¥—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É.", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚ùå –í–∏–π—Ç–∏ –∑ AI —á–∞—Ç—É")
@error_handler
def stop_ai_command(message):
    set_user_status(message.chat.id, 'idle')
    bot.send_message(message.chat.id, "–í–∏ –≤–∏–π—à–ª–∏ –∑ —Ä–µ–∂–∏–º—É AI-—á–∞—Ç—É. –ß–∏–º —â–µ –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?",
                     reply_markup=main_menu_markup)

@bot.message_handler(func=lambda message: message.text == "üë®‚Äçüíª –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω–æ–º")
@error_handler
def chat_with_human_command(message):
    if is_user_blocked(message.chat.id):
        bot.send_message(message.chat.id, "‚ùå –í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é.")
        return
    
    set_user_status(message.chat.id, 'waiting_human_operator')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —á–∞—Ç –∑ –∞–¥–º—ñ–Ω–æ–º"))
    bot.send_message(message.chat.id, "–í–∞—à –∑–∞–ø–∏—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —á–∞—Ç—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É.", reply_markup=markup)
    
    user = message.from_user
    username_info = f"@{user.username}" if user.username else "–±–µ–∑ –Ω—ñ–∫–Ω–µ–π–º—É"
    user_link = f"tg://user?id={user.id}"

    admin_message_text = (
        f"üö® *–ù–û–í–ò–ô –ó–ê–ü–ò–¢: –ß–∞—Ç –∑ –ª—é–¥–∏–Ω–æ—é!* üö®\n\n"
        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: [{user.first_name} {user.last_name}]({user_link}) ({username_info})\n"
        f"ID: `{user.id}`\n\n"
        f"**–û—Å—Ç–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑–º–æ–≤–∏ (AI):**\n"
    )
    
    history = get_conversation_history(message.chat.id, limit=5) # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 5 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å AI
    if history:
        for entry in history:
            role = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á" if entry['role'] == 'user' else "–ë–æ—Ç (AI)"
            admin_message_text += f"*{role}*: {entry['content']}\n"
    else:
        admin_message_text += "–Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑–º–æ–≤–∏ –≤—ñ–¥—Å—É—Ç–Ω—è."
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–ø–∏—Ç", callback_data=f"accept_human_chat_{message.chat.id}"))
    
    bot.send_message(ADMIN_CHAT_ID, admin_message_text, parse_mode='Markdown') # –ë–µ–∑ reply_markup, –±–æ —Ü–µ –¥–ª—è –∞–¥–º—ñ–Ω–∞
    bot.send_message(ADMIN_CHAT_ID, "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–ø–∏—Ç', —â–æ–± –ø–æ—á–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —á–∞—Ç –∑ –∞–¥–º—ñ–Ω–æ–º")
@error_handler
def stop_human_chat_command(message):
    if get_user_current_status(message.chat.id) == 'waiting_human_operator':
        set_user_status(message.chat.id, 'idle')
        bot.send_message(message.chat.id, "–í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –∑–Ω–æ–≤—É.",
                         reply_markup=main_menu_markup)
        bot.send_message(ADMIN_CHAT_ID, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.first_name} ({message.chat.id}) –∑–∞–≤–µ—Ä—à–∏–≤ —á–∞—Ç –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.")
    else:
        bot.send_message(message.chat.id, "–í–∏ –∑–∞—Ä–∞–∑ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ —á–∞—Ç—ñ –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('accept_human_chat_'))
@error_handler
def accept_human_chat_callback(call):
    if call.message.chat.id != ADMIN_CHAT_ID:
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return

    user_id_to_chat = int(call.data.split('_')[3])
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—Å–µ —â–µ –æ—á—ñ–∫—É—î
    if get_user_current_status(user_id_to_chat) == 'waiting_human_operator':
        set_user_status(ADMIN_CHAT_ID, f'chatting_with_user_{user_id_to_chat}') # –ê–¥–º—ñ–Ω –ø–æ—á–∏–Ω–∞—î —á–∞—Ç
        bot.edit_message_text(f"–í–∏ –ø—Ä–∏–π–Ω—è–ª–∏ –∑–∞–ø–∏—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{user_id_to_chat}`. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ –Ω–∏–º.",
                              chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='Markdown')
        bot.send_message(user_id_to_chat, "‚úÖ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ —á–∞—Ç—É! –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è.")
    else:
        bot.edit_message_text(f"–ó–∞–ø–∏—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{user_id_to_chat}` –≤–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∏–π –∞–±–æ –±—É–≤ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π.",
                              chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='Markdown')
    bot.answer_callback_query(call.id)


@bot.message_handler(func=lambda message: message.text == "üéÅ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è")
@error_handler
def personal_offer_command(message):
    if is_user_blocked(message.chat.id):
        bot.send_message(message.chat.id, "‚ùå –í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é.")
        return
    set_user_status(message.chat.id, 'awaiting_personal_offer_details')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é"))
    bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é. –©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏?", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é")
@error_handler
def cancel_personal_offer(message):
    set_user_status(message.chat.id, 'idle')
    bot.send_message(message.chat.id, "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_markup)

# --- 10. –ü–æ—Ç—ñ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ---
ADD_PRODUCT_STEPS = {
    1: {'name': 'waiting_name', 'prompt': "üìù *–ö—Ä–æ–∫ 1/5: –ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É*\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:", 'next_step': 2},
    2: {'name': 'waiting_price', 'prompt': "üí∞ *–ö—Ä–æ–∫ 2/5: –¶—ñ–Ω–∞*\n\n–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 100.50) –∞–±–æ '–î–æ–≥–æ–≤—ñ—Ä–Ω–∞':", 'next_step': 3},
    3: {'name': 'waiting_photos', 'prompt': "üì∏ *–ö—Ä–æ–∫ 3/5: –§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó*\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–æ 5 —Ñ–æ—Ç–æ (–ø–æ –æ–¥–Ω–æ–º—É). –ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ - '–î–∞–ª—ñ':", 'next_step': 4, 'allow_skip': True, 'skip_button': '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ñ–æ—Ç–æ'},
    4: {'name': 'waiting_location', 'prompt': "üìç *–ö—Ä–æ–∫ 4/5: –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è*\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏':", 'next_step': 5, 'allow_skip': True, 'skip_button': '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é'},
    # –ó–ú–Ü–ù–ò –¢–£–¢: –î–æ–¥–∞–Ω–æ allow_skip —Ç–∞ skip_button –¥–ª—è –∫—Ä–æ–∫—É 5
    5: {'name': 'waiting_description', 'prompt': "‚úçÔ∏è *–ö—Ä–æ–∫ 5/5: –û–ø–∏—Å*\n\n–ù–∞–ø–∏—à—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É (–º—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤) –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏':", 'next_step': 'confirm', 'allow_skip': True, 'skip_button': '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –æ–ø–∏—Å'}
}

@bot.message_handler(func=lambda message: message.text == "üî• –ü—Ä–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä")
@error_handler
def start_add_product_flow(message):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É."""
    chat_id = message.chat.id
    session = get_db_connection()
    try:
        # TODO: –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É –º–æ–¥–µ–ª—å Product, –∫–æ–ª–∏ –≤–æ–Ω–∞ –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞
        # from your_product_model import Product # –£—è–≤—ñ–º–æ, —â–æ Product —ñ–º–ø–æ—Ä—Ç—É—î—Ç—å—Å—è
        # pending_count = session.query(Product).filter_by(seller_chat_id=chat_id, status='pending').count()
        
        # –¢–∏–º—á–∞—Å–æ–≤–∞ –∑–∞–≥–ª—É—à–∫–∞, –ø–æ–∫–∏ –º–æ–¥–µ–ª—å Product –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞
        pending_count = 0 # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ 0 —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        logger.warning("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞ (–Ω–µ–º–∞—î –º–æ–¥–µ–ª—ñ Product).")

        if pending_count >= 3: # –û–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
            bot.send_message(chat_id,
                            "‚ö†Ô∏è –£ –≤–∞—Å –≤–∂–µ —î 3 —Ç–æ–≤–∞—Ä–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó.\n"
                            "–î–æ—á–µ–∫–∞–π—Ç–µ—Å—è —Ä–æ–∑–≥–ª—è–¥—É –ø–æ—Ç–æ—á–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –ø–µ—Ä–µ–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º –Ω–æ–≤–∏—Ö.",
                            reply_markup=main_menu_markup)
            return
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –¥–ª—è {chat_id}: {e}")
        bot.send_message(chat_id, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", reply_markup=main_menu_markup)
        return
    finally:
        session.close()

    user_data[chat_id] = {
        'step_number': 1, 
        'data': {
            'photos': [], 
            'geolocation': None,
            'product_name': '',
            'price': '',
            'description': ''
        }
    }
    set_user_status(chat_id, 'adding_product_step_1') # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å
    send_product_step_message(chat_id)
    log_statistics('start_add_product', chat_id)

@error_handler
def send_product_step_message(chat_id):
    """–ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫—Ä–æ–∫—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É."""
    current_step_number = user_data[chat_id]['step_number']
    step_config = ADD_PRODUCT_STEPS[current_step_number]
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    
    if step_config['name'] == 'waiting_photos':
        markup.add(types.KeyboardButton("–î–∞–ª—ñ"), types.KeyboardButton(step_config['skip_button']))
    elif step_config['name'] == 'waiting_location':
        markup.add(types.KeyboardButton("üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True))
        markup.add(types.KeyboardButton(step_config['skip_button']))
    # –ó–ú–Ü–ù–ò –¢–£–¢: –î–æ–¥–∞–Ω–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫—Ä–æ–∫—É –∑ –æ–ø–∏—Å–æ–º
    elif step_config['name'] == 'waiting_description':
        markup.add(types.KeyboardButton("–î–∞–ª—ñ"), types.KeyboardButton(step_config['skip_button']))
    
    markup.add(types.KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è"))
    
    bot.send_message(chat_id, step_config['prompt'], parse_mode='Markdown', reply_markup=markup)

@error_handler
def process_product_step(message):
    """–û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π –≤–≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ–¥ —á–∞—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É."""
    chat_id = message.chat.id
    current_user_status = get_user_current_status(chat_id)

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫—Ä–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤—ñ user_data
    if chat_id not in user_data or 'step_number' not in user_data[chat_id]:
        # –¶–µ –º–æ–∂–µ —Å—Ç–∞—Ç–∏—Å—è, —è–∫—â–æ –±–æ—Ç –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤—Å—è –∞–±–æ —Å—Ç–∞–Ω –≤—Ç—Ä–∞—á–µ–Ω–æ
        bot.send_message(chat_id, "–í–∏–±–∞—á—Ç–µ, –≤–∞—à –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –±—É–ª–æ —Å–∫–∏–Ω—É—Ç–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑–Ω–æ–≤—É.", reply_markup=main_menu_markup)
        set_user_status(chat_id, 'idle')
        return

    current_step_number = user_data[chat_id]['step_number']
    step_config = ADD_PRODUCT_STEPS[current_step_number]
    user_text = message.text if message.content_type == 'text' else ""

    # –û–±—Ä–æ–±–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    if user_text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è":
        del user_data[chat_id]
        bot.send_message(chat_id, "–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_markup)
        set_user_status(chat_id, 'idle')
        return

    # –û–±—Ä–æ–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫—É –∫—Ä–æ–∫—É (–¥–ª—è —Ñ–æ—Ç–æ, –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó —Ç–∞ –æ–ø–∏—Å—É)
    if step_config.get('allow_skip') and user_text == step_config.get('skip_button'):
        # –î–ª—è –æ–ø–∏—Å—É, —è–∫—â–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –æ–ø–∏—Å
        if step_config['name'] == 'waiting_description':
            user_data[chat_id]['data']['description'] = ""
        go_to_next_step(chat_id)
        return

    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫—Ä–æ–∫—É
    if step_config['name'] == 'waiting_name':
        if user_text and 3 <= len(user_text) <= 100:
            user_data[chat_id]['data']['product_name'] = user_text
            user_data[chat_id]['step_number'] = 2 # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É
            set_user_status(chat_id, 'adding_product_step_2')
            send_product_step_message(chat_id)
        else:
            bot.send_message(chat_id, "–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ 3 –¥–æ 100 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")

    elif step_config['name'] == 'waiting_price':
        if user_text and len(user_text) <= 50: # –î–æ–∑–≤–æ–ª—è—î–º–æ "–î–æ–≥–æ–≤—ñ—Ä–Ω–∞" –∞–±–æ —á–∏—Å–ª–æ
            user_data[chat_id]['data']['price'] = user_text
            user_data[chat_id]['step_number'] = 3
            set_user_status(chat_id, 'adding_product_step_3')
            send_product_step_message(chat_id)
        else:
            bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Ü—ñ–Ω—É (–¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤) –∞–±–æ '–î–æ–≥–æ–≤—ñ—Ä–Ω–∞':")

    elif step_config['name'] == 'waiting_photos':
        if user_text == "–î–∞–ª—ñ": # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ "–î–∞–ª—ñ" –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ
            user_data[chat_id]['step_number'] = 4
            set_user_status(chat_id, 'adding_product_step_4')
            send_product_step_message(chat_id)
        else:
            # –¶–µ–π –±–ª–æ–∫ –±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞–Ω–∏–π, —è–∫—â–æ message.content_type –ù–ï 'text' (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'photo')
            # –∞–±–æ —è–∫—â–æ 'text' –Ω–µ —î "–î–∞–ª—ñ" —á–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ñ–æ—Ç–æ".
            # –û—Å–∫—ñ–ª—å–∫–∏ —Ñ–æ—Ç–æ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è –æ–∫—Ä–µ–º–æ –≤ handle_messages, —Ç—É—Ç —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ.
            pass 

    elif step_config['name'] == 'waiting_location':
        # –¶–µ–π –∫—Ä–æ–∫ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –æ–∫—Ä–µ–º–æ —á–µ—Ä–µ–∑ content_types=['location']
        bot.send_message(chat_id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é'.")

    elif step_config['name'] == 'waiting_description':
        # –ó–ú–Ü–ù–ò –¢–£–¢: –û–±—Ä–æ–±–∫–∞ "–î–∞–ª—ñ" –¥–ª—è –æ–ø–∏—Å—É —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
        if user_text == "–î–∞–ª—ñ":
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ "–î–∞–ª—ñ", –∞–ª–µ –Ω–µ –≤–≤—ñ–≤ –æ–ø–∏—Å, –≤—ñ–Ω –±—É–¥–µ –ø–æ—Ä–æ–∂–Ω—ñ–º
            if not user_data[chat_id]['data']['description']:
                user_data[chat_id]['data']['description'] = "" # –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ, —â–æ –æ–ø–∏—Å –Ω–µ None
            set_user_status(chat_id, 'confirm_product')
            confirm_and_send_for_moderation(chat_id)
        elif user_text and 10 <= len(user_text) <= 1000:
            user_data[chat_id]['data']['description'] = user_text
            set_user_status(chat_id, 'confirm_product') # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            confirm_and_send_for_moderation(chat_id)
        else:
            bot.send_message(chat_id, "–û–ø–∏—Å –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π (–º—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤) –∞–±–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª—ñ–≤). –ù–∞–ø–∏—à—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'/'–î–∞–ª—ñ':")

@error_handler
def go_to_next_step(chat_id):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É –≤ –ø—Ä–æ—Ü–µ—Å—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É."""
    current_step_number = user_data[chat_id]['step_number']
    next_step_info = ADD_PRODUCT_STEPS[current_step_number]
    next_step_number = next_step_info['next_step']
    
    if next_step_number == 'confirm':
        set_user_status(chat_id, 'confirm_product')
        confirm_and_send_for_moderation(chat_id)
    else:
        user_data[chat_id]['step_number'] = next_step_number
        set_user_status(chat_id, f'adding_product_step_{next_step_number}')
        send_product_step_message(chat_id)

@bot.message_handler(content_types=['photo'], func=lambda message: get_user_current_status(message.chat.id) == 'adding_product_step_3')
@error_handler
def process_product_photo(message):
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π —Ç–æ–≤–∞—Ä—É."""
    chat_id = message.chat.id
    if len(user_data[chat_id]['data']['photos']) < 5:
        file_id = message.photo[-1].file_id
        user_data[chat_id]['data']['photos'].append(file_id)
        photos_count = len(user_data[chat_id]['data']['photos'])
        bot.send_message(chat_id, f"‚úÖ –§–æ—Ç–æ {photos_count}/5 –¥–æ–¥–∞–Ω–æ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ'")
    else:
        bot.send_message(chat_id, "–ú–∞–∫—Å–∏–º—É–º 5 —Ñ–æ—Ç–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.")

@bot.message_handler(content_types=['location'], func=lambda message: get_user_current_status(message.chat.id) == 'adding_product_step_4')
@error_handler
def process_product_location(message):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –¥–ª—è —Ç–æ–≤–∞—Ä—É."""
    chat_id = message.chat.id
    user_data[chat_id]['data']['geolocation'] = {
        'latitude': message.location.latitude,
        'longitude': message.location.longitude
    }
    bot.send_message(chat_id, "‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—é –¥–æ–¥–∞–Ω–æ!")
    user_data[chat_id]['step_number'] = 5 # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –æ–ø–∏—Å—É
    set_user_status(chat_id, 'adding_product_step_5')
    send_product_step_message(chat_id)

@error_handler
def confirm_and_send_for_moderation(chat_id):
    """–ó–±–µ—Ä—ñ–≥–∞—î —Ç–æ–≤–∞—Ä —É –ë–î, —Å–ø–æ–≤—ñ—â–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó."""
    data = user_data[chat_id]['data']
    
    session = get_db_connection()
    product_id = None
    try:
        user_info = bot.get_chat(chat_id)
        seller_username = user_info.username if user_info.username else None

        # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª—å Product –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
        # new_product = Product(
        #     seller_chat_id=chat_id,
        #     seller_username=seller_username,
        #     product_name=data['product_name'],
        #     price=data['price'],
        #     description=data['description'],
        #     photos=json.dumps(data['photos']) if data['photos'] else None,
        #     geolocation=json.dumps(data['geolocation']) if data['geolocation'] else None,
        #     status='pending'
        # )
        # session.add(new_product)
        # session.commit()
        # product_id = new_product.id

        logger.warning("–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –≤ –ë–î —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ (–Ω–µ–º–∞—î –º–æ–¥–µ–ª—ñ Product).")
        product_id = 99999 # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è ID —Ç–æ–≤–∞—Ä—É

        # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        bot.send_message(chat_id, 
            f"‚úÖ –¢–æ–≤–∞—Ä '{data['product_name']}' –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é! (ID: {product_id})\n"
            f"–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.",
            reply_markup=main_menu_markup)
        
        # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        send_product_for_admin_review(product_id, data, seller_chat_id=chat_id, seller_username=seller_username)
        
        # –û—á–∏—â—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        del user_data[chat_id]
        
        log_statistics('product_added', chat_id, product_id)
        set_user_status(chat_id, 'idle') # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞—Ç—É—Å "–≤—ñ–ª—å–Ω–∏–π"
        
    except Exception as e:
        session.rollback()
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É: {e}")
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    finally:
        session.close()

@error_handler
def send_product_for_admin_review(product_id, data, seller_chat_id, seller_username):
    """–§–æ—Ä–º—É—î —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É."""
    hashtags = generate_hashtags(data['description'])
    review_text = (
        f"üì¶ *–ù–æ–≤–∏–π —Ç–æ–≤–∞—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é*\n\n"
        f"üÜî ID: {product_id}\n"
        f"üìù –ù–∞–∑–≤–∞: {data['product_name']}\n"
        f"üí∞ –¶—ñ–Ω–∞: {data['price']}\n"
        f"üìÑ –û–ø–∏—Å: {data['description'][:500]}...\n" # –û–±—Ä—ñ–∑–∞—î–º–æ –æ–ø–∏—Å –¥–ª—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
        f"üì∏ –§–æ—Ç–æ: {len(data['photos'])} —à—Ç.\n"
        f"üìç –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è: {'–¢–∞–∫' if data['geolocation'] else '–ù—ñ'}\n"
        f"üè∑Ô∏è –•–µ—à—Ç–µ–≥–∏: {hashtags}\n\n"
        f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü—å: [{'@' + seller_username if seller_username else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}](tg://user?id={seller_chat_id})"
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"approve_{product_id}"),
        types.InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{product_id}")
    )
    
    try:
        admin_msg = None
        if data['photos']:
            media_group = []
            # –î–æ–¥–∞—î–º–æ –ø–µ—Ä—à–µ —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º
            media_group.append(types.InputMediaPhoto(data['photos'][0], caption=review_text, parse_mode='Markdown'))
            # –î–æ–¥–∞—î–º–æ —Ä–µ—à—Ç—É —Ñ–æ—Ç–æ –±–µ–∑ –ø—ñ–¥–ø–∏—Å—É
            for photo_id in data['photos'][1:]:
                media_group.append(types.InputMediaPhoto(photo_id))
            
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –º–µ–¥—ñ–∞-–≥—Ä—É–ø—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
            sent_admin_messages = bot.send_media_group(ADMIN_CHAT_ID, media_group)
            admin_msg = sent_admin_messages[0] # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≥—Ä—É–ø–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è message_id
        else:
            admin_msg = bot.send_message(ADMIN_CHAT_ID, review_text,
                                       parse_mode='Markdown',
                                       reply_markup=markup)
        
        if admin_msg:
            # TODO: –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ admin_message_id –≤ –ë–î –¥–ª—è –º–æ–¥–µ–ª—ñ Product
            logger.warning(f"admin_message_id –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id} –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ (–Ω–µ–º–∞—î –º–æ–¥–µ–ª—ñ Product).")

            # –Ø–∫—â–æ —Ü–µ –º–µ–¥—ñ–∞-–≥—Ä—É–ø–∞, –º–∏ –Ω–µ –º–æ–∂–µ–º–æ –¥–æ–¥–∞—Ç–∏ reply_markup –¥–æ –≤—Å—ñ—î—ó –≥—Ä—É–ø–∏.
            # –ù–∞—Ç–æ–º—ñ—Å—Ç—å, –º–∏ –º–æ–∂–µ–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –æ–∫—Ä–µ–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏.
            # –ê–±–æ, —è–∫—â–æ —Ü–µ –æ–¥–Ω–µ —Ñ–æ—Ç–æ, —Ç–æ reply_markup –≤–∂–µ –¥–æ–¥–∞–Ω–æ.
            if data['photos'] and len(data['photos']) > 0: # –Ø–∫—â–æ —î —Ñ–æ—Ç–æ, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏ –æ–∫—Ä–µ–º–æ
                bot.send_message(ADMIN_CHAT_ID, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=markup,
                                 reply_to_message_id=admin_msg.message_id) # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ –ø–µ—Ä—à–µ —Ñ–æ—Ç–æ
            elif not data['photos']: # –Ø–∫—â–æ —Ñ–æ—Ç–æ –Ω–µ–º–∞—î, –∫–Ω–æ–ø–∫–∏ –≤–∂–µ –≤ admin_msg
                pass # –ù—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ, –±–æ –∫–Ω–æ–ø–∫–∏ –≤–∂–µ –±—É–ª–∏ –¥–æ–¥–∞–Ω—ñ –¥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ç–æ–≤–∞—Ä—É {product_id} –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}", exc_info=True)


# --- 11. –û–±—Ä–æ–±–Ω–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ---
@bot.message_handler(func=lambda message: True, content_types=['text', 'photo', 'location'])
@error_handler
def handle_messages(message):
    """–û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—Å—ñ—Ö –≤—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å."""
    chat_id = message.chat.id
    user_text = message.text if message.content_type == 'text' else ""
    current_user_status = get_user_current_status(chat_id)

    if is_user_blocked(chat_id):
        bot.send_message(chat_id, "‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
        return
    
    save_user(message)

    # 1. –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ —Ç–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –ø—ñ–¥ —á–∞—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É (–ü–ï–†–®–ò–ú–ò!)
    if message.content_type == 'photo' and current_user_status == 'adding_product_step_3':
        process_product_photo(message)
        return
    if message.content_type == 'location' and current_user_status == 'adding_product_step_4':
        process_product_location(message)
        return

    # 2. –û–±—Ä–æ–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É (—Ç–µ–∫—Å—Ç–æ–≤–∏–π –≤–≤—ñ–¥)
    if current_user_status.startswith('adding_product_step_') or current_user_status == 'confirm_product':
        process_product_step(message) # –¶—è —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ–ø–µ—Ä –∫–æ—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–æ–±–ª—è—î –ª–∏—à–µ –¢–ï–ö–°–¢–û–í–ò–ô –≤–≤—ñ–¥ –¥–ª—è –∫—Ä–æ–∫—ñ–≤
        return

    # 3. –û–±—Ä–æ–±–∫–∞ —á–∞—Ç—É –∑ –ª—é–¥–∏–Ω–æ—é (–¥–ª—è –∞–¥–º—ñ–Ω–∞)
    if str(chat_id) == str(ADMIN_CHAT_ID) and current_user_status.startswith('chatting_with_user_'):
        target_user_id = int(current_user_status.split('_')[3])
        try:
            bot.send_message(target_user_id, f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {user_text}")
            bot.send_message(chat_id, "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞ –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_user_id}: {e}")
            bot.send_message(chat_id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É. –ú–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞.")
        return

    # 4. –û–±—Ä–æ–±–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
    if current_user_status == 'awaiting_personal_offer_details':
        if user_text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é":
            set_user_status(chat_id, 'idle')
            bot.send_message(chat_id, "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_markup)
            return
        
        # –ü–µ—Ä–µ—Å–∏–ª–∞—î–º–æ –¥–µ—Ç–∞–ª—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
        user = message.from_user
        username_info = f"@{user.username}" if user.username else "–±–µ–∑ –Ω—ñ–∫–Ω–µ–π–º—É"
        user_link = f"tg://user?id={user.id}"
        
        admin_offer_text = (
            f"üéÅ *–ù–û–í–ê –ü–ï–†–°–û–ù–ê–õ–¨–ù–ê –ü–†–û–ü–û–ó–ò–¶–Ü–Ø!* üéÅ\n\n"
            f"–í—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: [{user.first_name} {user.last_name}]({user_link}) ({username_info})\n"
            f"ID: `{user.id}`\n\n"
            f"**–î–µ—Ç–∞–ª—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó:**\n{user_text}\n\n"
            f"–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –¥–ª—è –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è."
        )
        bot.send_message(ADMIN_CHAT_ID, admin_offer_text, parse_mode='Markdown')
        bot.send_message(chat_id, "‚úÖ –í–∞—à—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û—á—ñ–∫—É–π—Ç–µ –∑–≤'—è–∑–∫—É!", reply_markup=main_menu_markup)
        set_user_status(chat_id, 'idle')
        return

    # 5. –û–±—Ä–æ–±–∫–∞ AI-—á–∞—Ç—É
    if current_user_status == 'ai_chat':
        if user_text == "‚ùå –í–∏–π—Ç–∏ –∑ AI —á–∞—Ç—É":
            stop_ai_command(message)
        else:
            # –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É FAQ
            faq_answer = get_faq_answer(user_text)
            if faq_answer:
                bot.send_message(chat_id, f"üìö *–û—Å—å —â–æ —è –∑–Ω–∞–π—à–æ–≤ —É –Ω–∞—à—ñ–π –±–∞–∑—ñ –∑–Ω–∞–Ω—å:*\n\n{faq_answer}", parse_mode='Markdown')
                save_conversation(chat_id, user_text, 'user')
                save_conversation(chat_id, faq_answer, 'ai')
            else:
                # –Ø–∫—â–æ –≤ FAQ –Ω–µ–º–∞—î, –∑–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ Grok AI
                save_conversation(chat_id, user_text, 'user')
                ai_reply = get_grok_response(user_text, get_conversation_history(chat_id, limit=10))
                save_conversation(chat_id, ai_reply, 'ai')
                bot.send_message(chat_id, f"ü§ñ {ai_reply}")
        return

    # 6. –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ –¥–ª—è FAQ (—Ç–µ–∫—Å—Ç–æ–≤–∏–π –≤–≤—ñ–¥)
    if chat_id == ADMIN_CHAT_ID:
        if current_user_status == 'awaiting_faq_question':
            user_data[ADMIN_CHAT_ID] = {'faq_question': user_text}
            set_user_status(ADMIN_CHAT_ID, 'awaiting_faq_answer')
            bot.send_message(ADMIN_CHAT_ID, "–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è:")
            return
        elif current_user_status == 'awaiting_faq_answer':
            question = user_data[ADMIN_CHAT_ID]['faq_question']
            answer = user_text
            
            if add_faq_entry(question, answer):
                bot.send_message(ADMIN_CHAT_ID, "‚úÖ –ü–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ FAQ.")
            else:
                bot.send_message(ADMIN_CHAT_ID, "‚ùå –ü–æ–º–∏–ª–∫–∞: –¢–∞–∫–µ –ø–∏—Ç–∞–Ω–Ω—è –≤–∂–µ —ñ—Å–Ω—É—î –≤ FAQ.")
            
            set_user_status(ADMIN_CHAT_ID, 'idle')
            send_admin_faq_menu_after_action(message) # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–æ –º–µ–Ω—é FAQ
            return
        elif current_user_status == 'awaiting_faq_delete_id':
            try:
                faq_id = int(user_text)
                if delete_faq_entry(faq_id):
                    bot.send_message(ADMIN_CHAT_ID, f"‚úÖ –ü–∏—Ç–∞–Ω–Ω—è –∑ ID {faq_id} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ FAQ.")
                else:
                    bot.send_message(ADMIN_CHAT_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞: –ü–∏—Ç–∞–Ω–Ω—è –∑ ID {faq_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            except ValueError:
                bot.send_message(ADMIN_CHAT_ID, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω–∏–π —á–∏—Å–ª–æ–≤–∏–π ID.")
            
            set_user_status(ADMIN_CHAT_ID, 'idle')
            send_admin_faq_menu_after_action(message) # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–æ –º–µ–Ω—é FAQ
            return
        elif current_user_status == 'awaiting_user_for_block_unblock': # –û–±—Ä–æ–±–∫–∞ –≤–≤–æ–¥—É –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è
            process_user_for_block_unblock(message)
            return


    # 7. –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ç–∞ —ñ–Ω—à–∏—Ö –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if user_text == "üî• –ü—Ä–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä":
        start_add_product_flow(message)
    elif user_text == "üõí –ú–æ—ó —Ç–æ–≤–∞—Ä–∏":
        send_my_products(message)
    elif user_text == "‚ùì –î–æ–ø–æ–º–æ–≥–∞":
        send_help_message(message)
    elif user_text == "üí∞ –ö–æ–º—ñ—Å—ñ—è":
        send_commission_info(message)
    elif user_text == "üì∫ –ù–∞—à –∫–∞–Ω–∞–ª":
        send_channel_link(message)
    elif user_text == "ü§ñ –ó–∞–ø–∏—Ç–∞—Ç–∏ AI":
        ask_ai_command(message)
    elif user_text == "üë®‚Äçüíª –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω–æ–º":
        chat_with_human_command(message)
    elif user_text == "üéÅ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è":
        personal_offer_command(message)
    elif message.content_type == 'text': # –Ø–∫—â–æ —Ü–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –Ω–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –≤–∏—â–µ, —ñ –Ω–µ –≤ AI-—á–∞—Ç—ñ
        # –ú–æ–∂–Ω–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç–∏ –¥–æ AI –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª—É –∫–æ–º–∞–Ω–¥—É
        bot.send_message(chat_id, "–Ø –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤ –≤–∞—à –∑–∞–ø–∏—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å 'ü§ñ –ó–∞–ø–∏—Ç–∞—Ç–∏ AI', —â–æ–± –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ –º–æ—ó–º —à—Ç—É—á–Ω–∏–º —ñ–Ω—Ç–µ–ª–µ–∫—Ç–æ–º.", reply_markup=main_menu_markup)
    elif message.content_type == 'photo':
        bot.send_message(chat_id, "–Ø –æ—Ç—Ä–∏–º–∞–≤ –≤–∞—à–µ —Ñ–æ—Ç–æ, –∞–ª–µ –Ω–µ –∑–Ω–∞—é, —â–æ –∑ –Ω–∏–º —Ä–æ–±–∏—Ç–∏ –ø–æ–∑–∞ –ø—Ä–æ—Ü–µ—Å–æ–º –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É. ü§î")
    elif message.content_type == 'location':
        bot.send_message(chat_id, f"–Ø –±–∞—á—É –≤–∞—à—É –≥–µ–æ—Ç–æ—á–∫—É: {message.location.latitude}, {message.location.longitude}. –Ø–∫ —è –º–æ–∂—É —ó—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏?")
    else:
        bot.send_message(chat_id, "–Ø –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤ –≤–∞—à –∑–∞–ø–∏—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

# --- 12. –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---
@error_handler
def send_my_products(message):
    """–ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Å–ø–∏—Å–æ–∫ –π–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤."""
    chat_id = message.chat.id
    session = get_db_connection()
    try:
        # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –ë–î –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–æ–¥–µ–ª—ñ Product
        # from your_product_model import Product
        # user_products = session.query(Product).filter_by(seller_chat_id=chat_id).order_by(Product.created_at.desc()).all()
        user_products = [] # –ó–∞–≥–ª—É—à–∫–∞, –ø–æ–∫–∏ –º–æ–¥–µ–ª—å Product –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞
        logger.warning("–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ (–Ω–µ–º–∞—î –º–æ–¥–µ–ª—ñ Product).")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}")
        bot.send_message(chat_id, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.")
        return
    finally:
        session.close()

    if user_products:
        response_parts = ["üìã *–í–∞—à—ñ —Ç–æ–≤–∞—Ä–∏:*\n\n"]
        for i, product in enumerate(user_products, 1):
            status_emoji = {
                'pending': '‚è≥',
                'approved': '‚úÖ',
                'rejected': '‚ùå',
                'sold': 'üí∞',
                'expired': 'üóëÔ∏è'
            }
            status_ukr = {
                'pending': '–Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ',
                'approved': '–æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ',
                'rejected': '–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ',
                'sold': '–ø—Ä–æ–¥–∞–Ω–æ',
                'expired': '—Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è'
            }.get(product['status'], product['status']) # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ product —î dict-–ø–æ–¥—ñ–±–Ω–∏–º –∞–±–æ –º–∞—î –∞—Ç—Ä–∏–±—É—Ç–∏

            product_info = (
                f"{i}. {status_emoji.get(product.status, '‚ùì')} *{product.product_name}*\n"
                f"   üí∞ {product.price}\n"
                f"   üìÖ {product.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"   üìä –°—Ç–∞—Ç—É—Å: {status_ukr}\n"
            )
            
            if product.status == 'approved' and product.channel_message_id:
                product_info += f"   üîó [–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤ –∫–∞–Ω–∞–ª—ñ](https://t.me/c/{str(CHANNEL_ID)[4:]}/{product.channel_message_id})\n"
            
            response_parts.append(product_info + "\n")
        
        # –†–æ–∑–±–∏–≤–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ
        full_response = "".join(response_parts)
        if len(full_response) > 4096: # –õ—ñ–º—ñ—Ç Telegram –Ω–∞ –¥–æ–≤–∂–∏–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            for i in range(0, len(full_response), 4000):
                bot.send_message(chat_id, full_response[i:i+4000], parse_mode='Markdown', disable_web_page_preview=True)
        else:
            bot.send_message(chat_id, full_response, parse_mode='Markdown', disable_web_page_preview=True)

    else:
        bot.send_message(chat_id, "üì≠ –í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–≤–∞–ª–∏ –∂–æ–¥–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üî• –ü—Ä–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä' —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤–æ—î –ø–µ—Ä—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è!")

# --- 13. –î–æ–ø–æ–º–æ–≥–∞ —Ç–∞ –ö–∞–Ω–∞–ª ---
@error_handler
def send_help_message(message):
    """–ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –¥–æ–≤—ñ–¥–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é."""
    help_text = (
        "üÜò *–î–æ–≤—ñ–¥–∫–∞*\n\n"
        "ü§ñ –Ø –≤–∞—à AI-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ —Ç–∞ –ø—Ä–æ–¥–∞–∂—É. –í–∏ –º–æ–∂–µ—Ç–µ:\n"
        "üî• *–ü—Ä–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä* - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.\n"
        "üõí *–ú–æ—ó —Ç–æ–≤–∞—Ä–∏* - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Ç–∞ –ø—Ä–æ–¥–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏.\n"
        "üí∞ *–ö–æ–º—ñ—Å—ñ—è* - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–º—ñ—Å—ñ–π–Ω—ñ –∑–±–æ—Ä–∏.\n"
        "üì∫ *–ù–∞—à –∫–∞–Ω–∞–ª* - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó.\n"
        "ü§ñ *–ó–∞–ø–∏—Ç–∞—Ç–∏ AI* - –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ Grok AI.\n"
        "üéÅ *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è* - –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É –∞–±–æ –ø–æ—Å–ª—É–≥–∏.\n"
        "üë®‚Äçüíª *–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω–æ–º* - —è–∫—â–æ AI –Ω–µ –º–æ–∂–µ –¥–æ–ø–æ–º–æ–≥—Ç–∏, –∞–±–æ —É –≤–∞—Å —î —Å–∫–ª–∞–¥–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è.\n\n"
        "üó£Ô∏è *–°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è:* –ü—Ä–æ—Å—Ç–æ –ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ –≤–∞—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó, —ñ –º—ñ–π –≤–±—É–¥–æ–≤–∞–Ω–∏–π AI —Å–ø—Ä–æ–±—É—î –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏!\n\n"
        "–Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞." # TODO: –î–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –∞–¥–º—ñ–Ω–∞
    )
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown', reply_markup=main_menu_markup)

@error_handler
def send_commission_info(message):
    """–ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—é."""
    commission_rate_percent = 10 # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, 10%
    text = (
        f"üí∞ *–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—é*\n\n"
        f"–ó–∞ —É—Å–ø—ñ—à–Ω–∏–π –ø—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä—É —á–µ—Ä–µ–∑ –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞ —Å—Ç—è–≥—É—î—Ç—å—Å—è –∫–æ–º—ñ—Å—ñ—è —É —Ä–æ–∑–º—ñ—Ä—ñ **{commission_rate_percent}%** –≤—ñ–¥ –∫—ñ–Ω—Ü–µ–≤–æ—ó —Ü—ñ–Ω–∏ –ø—Ä–æ–¥–∞–∂—É.\n\n"
        f"–ü—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –≤–∏ –ø–æ–∑–Ω–∞—á–∏—Ç–µ —Ç–æ–≤–∞—Ä —è–∫ '–ü—Ä–æ–¥–∞–Ω–æ', —Å–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—Ä–∞—Ö—É—î —Å—É–º—É –∫–æ–º—ñ—Å—ñ—ó, —ñ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —â–æ–¥–æ —ó—ó —Å–ø–ª–∞—Ç–∏.\n\n"
        f"–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è —Å–ø–ª–∞—Ç–∏ –∫–æ–º—ñ—Å—ñ—ó (Monobank):\n`{MONOBANK_CARD_NUMBER}`\n\n"
        f"–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–ª–∞—á—É–π—Ç–µ –∫–æ–º—ñ—Å—ñ—é –≤—á–∞—Å–Ω–æ, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –æ–±–º–µ–∂–µ–Ω—å –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞.\n\n"
        f"–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –≤–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–ø–ª–∞—Ç–∏ –º–æ–∂–Ω–∞ –±—É–¥–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –≤ —Ä–æ–∑–¥—ñ–ª—ñ '–ú–æ—ó —Ç–æ–≤–∞—Ä–∏'."
    )
    bot.send_message(message.chat.id, text, parse_mode='Markdown', reply_markup=main_menu_markup)

@error_handler
def send_channel_link(message):
    """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª."""
    chat_id = message.chat.id
    try:
        chat_info = bot.get_chat(CHANNEL_ID)
        channel_link = ""
        if chat_info.invite_link:
            channel_link = chat_info.invite_link
        elif chat_info.username:
            channel_link = f"https://t.me/{chat_info.username}"
        else:
            try:
                invite_link_obj = bot.create_chat_invite_link(CHANNEL_ID, member_limit=1)
                channel_link = invite_link_obj.invite_link
                logger.info(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–ª—è –∫–∞–Ω–∞–ª—É: {channel_link}")
            except telebot.apihelper.ApiTelegramException as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–ª—è –∫–∞–Ω–∞–ª—É {CHANNEL_ID}: {e}")
                channel_link = f"https://t.me/c/{str(CHANNEL_ID)[4:]}"

        if not channel_link:
             raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª.")

        invite_text = (
            f"üì∫ *–ù–∞—à –∫–∞–Ω–∞–ª –∑ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è–º–∏*\n\n"
            f"–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ–≥–æ –∫–∞–Ω–∞–ª—É, —â–æ–± –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –Ω–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏!\n\n"
            f"üëâ [–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞–Ω–∞–ª—É]({channel_link})\n\n"
            f"üí° –£ –∫–∞–Ω–∞–ª—ñ –ø—É–±–ª—ñ–∫—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è"
        )
        bot.send_message(chat_id, invite_text, parse_mode='Markdown', disable_web_page_preview=True)
        log_statistics('channel_visit', chat_id)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞–±–æ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª: {e}", exc_info=True)
        bot.send_message(chat_id, "‚ùå –ù–∞ –∂–∞–ª—å, –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")


# --- 14. –û–±—Ä–æ–±–Ω–∏–∫–∏ Callback Query ---
@bot.callback_query_handler(func=lambda call: True)
@error_handler
def callback_inline(call):
    """–û–±—Ä–æ–±–ª—è—î –≤—Å—ñ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏."""
    if call.data.startswith('admin_'):
        handle_admin_callbacks(call)
    elif call.data.startswith('approve_') or call.data.startswith('reject_') or call.data.startswith('sold_'):
        handle_product_moderation_callbacks(call)
    elif call.data.startswith('user_block_') or call.data.startswith('user_unblock_'):
        handle_user_block_callbacks(call)
    elif call.data.startswith('accept_human_chat_'):
        accept_human_chat_callback(call)
    elif call.data.startswith('confirm_send_moderation') or call.data.startswith('cancel_add_product'):
        # handle_add_product_callbacks(call) # –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∞, —Ç–æ–º—É –∑–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–∞
        bot.answer_callback_query(call.id, "–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.") # –î–æ–¥–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å, —è–∫—â–æ —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ —ñ—Å–Ω—É—î
    else:
        bot.answer_callback_query(call.id, "–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.")

# --- 15. Callbacks –¥–ª—è –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ ---
@error_handler
def handle_admin_callbacks(call):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–ª–±–µ–∫–∏, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª–ª—é."""
    if call.message.chat.id != ADMIN_CHAT_ID:
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return

    action = call.data.split('_')[1]

    if action == "stats":
        send_admin_statistics(call)
    elif action == "pending": # admin_pending
        send_pending_products_for_moderation(call)
    elif action == "users": # admin_users
        send_users_list(call)
    elif action == "block": # admin_block
        bot.edit_message_text("–í–≤–µ–¥—ñ—Ç—å `chat_id` –∞–±–æ `@username` –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è:",
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id, parse_mode='Markdown')
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –¥–ª—è –∞–¥–º—ñ–Ω–∞, —â–æ–± –æ–±—Ä–æ–±–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        set_user_status(ADMIN_CHAT_ID, 'awaiting_user_for_block_unblock')
    elif action == "commissions":
        send_admin_commissions_info(call)
    elif action == "ai_stats":
        send_admin_ai_statistics(call)
    elif action == "faq_menu":
        send_admin_faq_menu(call)

    bot.answer_callback_query(call.id)

@error_handler
def send_admin_statistics(call):
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞."""
    session = get_db_connection()
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞—Ö - TODO: –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –º–æ–¥–µ–ª—å Product
        # product_stats = session.query(Product.status, func.count(Product.id)).group_by(Product.status).all()
        # product_stats_dict = {status: count for status, count in product_stats}
        product_stats_dict = {'pending': 0, 'approved': 0, 'rejected': 0, 'sold': 0, 'expired': 0} # –ó–∞–≥–ª—É—à–∫–∞
        logger.warning("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä—ñ–≤ —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞ (–Ω–µ–º–∞—î –º–æ–¥–µ–ª—ñ Product).")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö
        total_users = session.query(User).count()
        blocked_users_count = session.query(User).filter_by(is_blocked=True).count()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ - TODO: –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –º–æ–¥–µ–ª—å Product
        # today = datetime.now().date()
        # today_products = session.query(Product).filter(func.date(Product.created_at) == today).count()
        today_products = 0 # –ó–∞–≥–ª—É—à–∫–∞
        logger.warning("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞ (–Ω–µ–º–∞—î –º–æ–¥–µ–ª—ñ Product).")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", call.message.chat.id, call.message.message_id)
        return
    finally:
        session.close()

    stats_text = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
        f"üë• *–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:*\n"
        f"‚Ä¢ –í—Å—å–æ–≥–æ: {total_users}\n"
        f"‚Ä¢ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ: {blocked_users_count}\n\n"
        f"üì¶ *–¢–æ–≤–∞—Ä–∏:*\n"
        f"‚Ä¢ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {product_stats_dict.get('pending', 0)}\n"
        f"‚Ä¢ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: {product_stats_dict.get('approved', 0)}\n"
        f"‚Ä¢ –í—ñ–¥—Ö–∏–ª–µ–Ω–æ: {product_stats_dict.get('rejected', 0)}\n"
        f"‚Ä¢ –ü—Ä–æ–¥–∞–Ω–æ: {product_stats_dict.get('sold', 0)}\n"
        f"‚Ä¢ –¢–µ—Ä–º—ñ–Ω –¥—ñ—ó –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è: {product_stats_dict.get('expired', 0)}\n\n"
        f"üìÖ *–°—å–æ–≥–æ–¥–Ω—ñ –¥–æ–¥–∞–Ω–æ:* {today_products}\n"
        f"üìà *–í—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤:* {sum(product_stats_dict.values())}"
    )

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main"))

    bot.edit_message_text(stats_text, call.message.chat.id, call.message.message_id,
                         parse_mode='Markdown', reply_markup=markup)

@error_handler
def send_users_list(call):
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."""
    session = get_db_connection()
    try:
        users = session.query(User).order_by(User.joined_at.desc()).limit(20).all()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.", call.message.chat.id, call.message.message_id)
        return
    finally:
        session.close()

    if not users:
        response_text = "ü§∑‚Äç‚ôÇÔ∏è –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."
    else:
        response_text = "üë• *–°–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:*\n\n"
        for user in users:
            block_status = "üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ" if user.is_blocked else "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π"
            username = f"@{user.username}" if user.username else "–ù–µ–º–∞—î —é–∑–µ—Ä–Ω–µ–π–º—É"
            first_name = user.first_name if user.first_name else "–ù–µ–≤—ñ–¥–æ–º–µ —ñ–º'—è"
            response_text += f"- {first_name} ({username}) [ID: `{user.chat_id}`] - {block_status}\n"

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main"))

    bot.edit_message_text(response_text, call.message.chat.id, call.message.message_id,
                         parse_mode='Markdown', reply_markup=markup)

@bot.message_handler(func=lambda message: get_user_current_status(message.chat.id) == 'awaiting_user_for_block_unblock' and message.chat.id == ADMIN_CHAT_ID)
@error_handler
def process_user_for_block_unblock(message):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è."""
    admin_chat_id = message.chat.id
    target_identifier = message.text.strip()
    target_chat_id = None

    session = get_db_connection()
    try:
        if target_identifier.startswith('@'):
            username = target_identifier[1:]
            user = session.query(User).filter_by(username=username).first()
            if user:
                target_chat_id = user.chat_id
            else:
                bot.send_message(admin_chat_id, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —é–∑–µ—Ä–Ω–µ–π–º–æ–º `{target_identifier}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                set_user_status(admin_chat_id, 'idle') # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å
                return
        else:
            try:
                target_chat_id = int(target_identifier)
            except ValueError:
                bot.send_message(admin_chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω–∏–π `chat_id` (—á–∏—Å–ª–æ) –∞–±–æ `@username`.")
                set_user_status(admin_chat_id, 'idle') # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å
                return
    finally:
        session.close()

    if target_chat_id == ADMIN_CHAT_ID:
        bot.send_message(admin_chat_id, "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ —Å–µ–±–µ.")
        set_user_status(admin_chat_id, 'idle') # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å
        return

    if target_chat_id:
        current_status = is_user_blocked(target_chat_id)
        action_text = "–∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏" if not current_status else "—Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏"
        confirmation_text = f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ {action_text} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID `{target_chat_id}` (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É)?\n"

        markup = types.InlineKeyboardMarkup()
        if not current_status:
            markup.add(types.InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data=f"user_block_{target_chat_id}"))
        else:
            markup.add(types.InlineKeyboardButton("‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data=f"user_unblock_{target_chat_id}"))
        markup.add(types.InlineKeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_panel_main"))

        bot.send_message(admin_chat_id, confirmation_text, reply_markup=markup, parse_mode='Markdown')
        set_user_status(admin_chat_id, 'idle') # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    else:
        bot.send_message(admin_chat_id, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        set_user_status(admin_chat_id, 'idle') # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å

@error_handler
def handle_user_block_callbacks(call):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–ª–±–µ–∫–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."""
    admin_chat_id = call.message.chat.id
    data_parts = call.data.split('_')
    action = data_parts[1]
    target_chat_id = int(data_parts[2])

    if action == 'block':
        success = set_user_block_status(admin_chat_id, target_chat_id, True)
        if success:
            bot.edit_message_text(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID `{target_chat_id}` —É—Å–ø—ñ—à–Ω–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.",
                                  chat_id=admin_chat_id, message_id=call.message.message_id, parse_mode='Markdown')
            try:
                bot.send_message(target_chat_id, "‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –±—É–ª–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_chat_id}: {e}")
            log_statistics('user_blocked', admin_chat_id, target_chat_id)
        else:
            bot.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID `{target_chat_id}`.",
                                  chat_id=admin_chat_id, message_id=call.message.message_id, parse_mode='Markdown')
    elif action == 'unblock':
        success = set_user_block_status(admin_chat_id, target_chat_id, False)
        if success:
            bot.edit_message_text(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID `{target_chat_id}` —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ.",
                                  chat_id=admin_chat_id, message_id=call.message.message_id, parse_mode='Markdown')
            try:
                bot.send_message(target_chat_id, "‚úÖ –í–∞—à –∞–∫–∞—É–Ω—Ç –±—É–ª–æ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_chat_id}: {e}")
            log_statistics('user_unblocked', admin_chat_id, target_chat_id)
        else:
            bot.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID `{target_chat_id}`.",
                                  chat_id=admin_chat_id, message_id=call.message.message_id, parse_mode='Markdown')
    bot.answer_callback_query(call.id)

@error_handler
def send_pending_products_for_moderation(call):
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É —Ç–æ–≤–∞—Ä–∏, —â–æ –æ—á—ñ–∫—É—é—Ç—å –º–æ–¥–µ—Ä–∞—Ü—ñ—ó."""
    session = get_db_connection()
    try:
        # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –ë–î –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–æ–¥–µ–ª—ñ Product
        # from your_product_model import Product
        # pending_products = session.query(Product).filter_by(status='pending').order_by(Product.created_at.asc()).limit(5).all()
        pending_products = [] # –ó–∞–≥–ª—É—à–∫–∞
        logger.warning("–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ (–Ω–µ–º–∞—î –º–æ–¥–µ–ª—ñ Product).")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é: {e}")
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.", call.message.chat.id, call.message.message_id)
        return
    finally:
        session.close()

    if not pending_products:
        response_text = "üéâ –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó."
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main"))
        bot.edit_message_text(response_text, call.message.chat.id, call.message.message_id, reply_markup=markup)
        bot.answer_callback_query(call.id) # –í–∞–∂–ª–∏–≤–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ callback
        return

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–æ–≤–∞—Ä–∏ –ø–æ –æ–¥–Ω–æ–º—É, —è–∫ —Ü–µ —Ä–æ–±–∏—Ç—å send_for_moderation
    bot.edit_message_text("‚è≥ *–¢–æ–≤–∞—Ä–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó:*\n\n–ù–∞–¥—Å–∏–ª–∞—é...",
                          chat_id=call.message.chat.id, message_id=call.message.message_id)

    for product_row in pending_products:
        product_data = dict(product_row) # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ Row –≤ dict
        send_product_for_admin_review(product_data['id'], product_data, product_data['seller_chat_id'], product_data['seller_username'])
        time.sleep(0.5) # –ó–∞—Ç—Ä–∏–º–∫–∞, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ FloodWait

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main"))
    bot.send_message(call.message.chat.id, "‚úÖ –í—Å—ñ —Ç–æ–≤–∞—Ä–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.", reply_markup=markup)
    bot.answer_callback_query(call.id) # –í–∞–∂–ª–∏–≤–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ callback

@error_handler
def send_admin_commissions_info(call):
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—ó."""
    session = get_db_connection()
    try:
        # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª—ñ –¥–ª—è –∫–æ–º—ñ—Å—ñ–π —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        # commission_summary = session.query(
        #     func.sum(case((CommissionTransaction.status == 'pending_payment', CommissionTransaction.amount), else_=0)).label('total_pending'),
        #     func.sum(case((CommissionTransaction.status == 'paid', CommissionTransaction.amount), else_=0)).label('total_paid')
        # ).first()
        # recent_transactions = session.query(
        #     CommissionTransaction.product_id, Product.product_name, Product.seller_chat_id, User.username,
        #     CommissionTransaction.amount, CommissionTransaction.status, CommissionTransaction.created_at
        # ).join(Product).join(User).order_by(CommissionTransaction.created_at.desc()).limit(10).all()

        commission_summary = {'total_pending': 0, 'total_paid': 0} # –ó–∞–≥–ª—É—à–∫–∞
        recent_transactions = [] # –ó–∞–≥–ª—É—à–∫–∞
        logger.warning("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º—ñ—Å—ñ–π —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞ (–Ω–µ–º–∞—î –º–æ–¥–µ–ª–µ–π).")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—ó: {e}")
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—ó.", call.message.chat.id, call.message.message_id)
        return
    finally:
        session.close()

    text = (
        f"üí∞ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º—ñ—Å—ñ–π*\n\n"
        f"‚Ä¢ –í—Å—å–æ–≥–æ –æ—á—ñ–∫—É—î—Ç—å—Å—è: *{commission_summary['total_pending'] or 0:.2f} –≥—Ä–Ω*\n"
        f"‚Ä¢ –í—Å—å–æ–≥–æ —Å–ø–ª–∞—á–µ–Ω–æ: *{commission_summary['total_paid'] or 0:.2f} –≥—Ä–Ω*\n\n"
        f"üìä *–û—Å—Ç–∞–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:*\n"
    )

    if recent_transactions:
        for tx in recent_transactions:
            username = f"@{tx.username}" if tx.username else f"ID: {tx.seller_chat_id}"
            text += (
                f"- –¢–æ–≤–∞—Ä ID `{tx.product_id}` ({tx.product_name})\n"
                f"  –ü—Ä–æ–¥–∞–≤–µ—Ü—å: {username}\n"
                f"  –°—É–º–∞: {tx.amount:.2f} –≥—Ä–Ω, –°—Ç–∞—Ç—É—Å: {tx.status}\n"
                f"  –î–∞—Ç–∞: {tx.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            )
    else:
        text += "  –ù–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∫–æ–º—ñ—Å—ñ–π.\n\n"

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main"))
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)
    bot.answer_callback_query(call.id) # –í–∞–∂–ª–∏–≤–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ callback

@error_handler
def send_admin_ai_statistics(call):
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è AI."""
    session = get_db_connection()
    try:
        # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª—å Conversation
        # total_user_queries = session.query(Conversation).filter_by(sender_type='user').count()
        # top_ai_users = session.query(Conversation.user_chat_id, func.count(Conversation.id).label('query_count')).filter_by(sender_type='user').group_by(Conversation.user_chat_id).order_by(text('query_count DESC')).limit(5).all()
        # daily_ai_queries = session.query(func.date(Conversation.timestamp).label('date'), func.count(Conversation.id).label('query_count')).filter_by(sender_type='user').group_by(text('date')).order_by(text('date DESC')).limit(7).all()

        total_user_queries = 0 # –ó–∞–≥–ª—É—à–∫–∞
        top_ai_users = [] # –ó–∞–≥–ª—É—à–∫–∞
        daily_ai_queries = [] # –ó–∞–≥–ª—É—à–∫–∞
        logger.warning("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞ (–Ω–µ–º–∞—î –º–æ–¥–µ–ª—ñ Conversation).")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", call.message.chat.id, call.message.message_id)
        return
    finally:
        session.close()

    text = (
        f"ü§ñ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI –ü–æ–º—ñ—á–Ω–∏–∫–∞*\n\n"
        f"‚Ä¢ –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–æ AI: *{total_user_queries}*\n\n"
        f"üìä *–ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ AI:*\n"
    )
    if top_ai_users:
        for user_data in top_ai_users:
            user_id = user_data.user_chat_id
            user_info = bot.get_chat(user_id)
            username = f"@{user_info.username}" if user_info.username else f"ID: {user_id}"
            text += f"- {username}: {user_data.query_count} –∑–∞–ø–∏—Ç—ñ–≤\n"
    else:
        text += "  –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö.\n"

    text += "\nüìÖ *–ó–∞–ø–∏—Ç–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤:*\n"
    if daily_ai_queries:
        for day_data in daily_ai_queries:
            text += f"- {day_data.date}: {day_data.query_count} –∑–∞–ø–∏—Ç—ñ–≤\n"
    else:
        text += "  –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö.\n"

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main"))
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)
    bot.answer_callback_query(call.id) # –í–∞–∂–ª–∏–≤–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ callback

# --- –ö–µ—Ä—É–≤–∞–Ω–Ω—è FAQ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ ---
@error_handler
def send_admin_faq_menu(call):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è/–≤—ñ–¥–ø–æ–≤—ñ–¥—å", callback_data="admin_faq_add"),
        types.InlineKeyboardButton("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ FAQ", callback_data="admin_faq_view_all"),
        types.InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è/–≤—ñ–¥–ø–æ–≤—ñ–¥—å", callback_data="admin_faq_delete"),
        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main")
    )
    bot.edit_message_text("üìö *–ö–µ—Ä—É–≤–∞–Ω–Ω—è FAQ*\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                          chat_id=call.message.chat.id, message_id=call.message.message_id,
                          reply_markup=markup, parse_mode='Markdown')
    bot.answer_callback_query(call.id) # –í–∞–∂–ª–∏–≤–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ callback

@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_faq_'))
@error_handler
def handle_admin_faq_callbacks(call):
    if call.message.chat.id != ADMIN_CHAT_ID:
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return

    action = call.data.split('_')[2]

    if action == "add":
        bot.edit_message_text("‚ûï *–î–æ–¥–∞–≤–∞–Ω–Ω—è FAQ*\n\n–í–≤–µ–¥—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è, —è–∫–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏:",
                              chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='Markdown')
        set_user_status(ADMIN_CHAT_ID, 'awaiting_faq_question')
    elif action == "view": # admin_faq_view_all
        all_faq = get_all_faq_entries()
        if not all_faq:
            response_text = "ü§∑‚Äç‚ôÇÔ∏è –ë–∞–∑–∞ –∑–Ω–∞–Ω—å FAQ –ø–æ—Ä–æ–∂–Ω—è."
        else:
            response_text = "üìö *–í—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (FAQ):*\n\n"
            for faq_id, question, answer in all_faq: # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ all_faq –ø–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä—Ç–µ–∂—ñ
                response_text += f"*{faq_id}. –ü–∏—Ç–∞–Ω–Ω—è*: {question}\n"
                response_text += f"*–í—ñ–¥–ø–æ–≤—ñ–¥—å*: {answer}\n\n"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ FAQ –º–µ–Ω—é", callback_data="admin_faq_menu"))
        bot.edit_message_text(response_text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)
    elif action == "delete":
        bot.edit_message_text("üóëÔ∏è *–í–∏–¥–∞–ª–µ–Ω–Ω—è FAQ*\n\n–í–≤–µ–¥—ñ—Ç—å ID –ø–∏—Ç–∞–Ω–Ω—è, —è–∫–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ (–≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ ID, –æ–±—Ä–∞–≤—à–∏ '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ FAQ'):",
                              chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='Markdown')
        set_user_status(ADMIN_CHAT_ID, 'awaiting_faq_delete_id')
    
    bot.answer_callback_query(call.id)

def send_admin_faq_menu_after_action(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è/–≤—ñ–¥–ø–æ–≤—ñ–¥—å", callback_data="admin_faq_add"),
        types.InlineKeyboardButton("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ FAQ", callback_data="admin_faq_view_all"),
        types.InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è/–≤—ñ–¥–ø–æ–≤—ñ–¥—å", callback_data="admin_faq_delete"),
        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main")
    )
    bot.send_message(ADMIN_CHAT_ID, "üìö *–ö–µ—Ä—É–≤–∞–Ω–Ω—è FAQ*\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                          reply_markup=markup, parse_mode='Markdown')


# --- 16. Callbacks –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—É ---
@error_handler
def handle_product_moderation_callbacks(call):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–ª–±–µ–∫–∏ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è/–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è/–ø—Ä–æ–¥–∞–∂—É —Ç–æ–≤–∞—Ä—É."""
    if call.message.chat.id != ADMIN_CHAT_ID:
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return

    data_parts = call.data.split('_')
    action = data_parts[0]
    product_id = int(data_parts[1])

    session = get_db_connection()
    product_info = None
    try:
        # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –∑ –ë–î –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–æ–¥–µ–ª—ñ Product
        # from your_product_model import Product
        # product_info = session.query(Product).filter_by(id=product_id).first()
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è product_info, —è–∫—â–æ –º–æ–¥–µ–ª—å Product –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞
        product_info = {
            'id': product_id,
            'seller_chat_id': 12345, # –ó–∞–≥–ª—É—à–∫–∞
            'product_name': '–¢–µ—Å—Ç–æ–≤–∏–π —Ç–æ–≤–∞—Ä', # –ó–∞–≥–ª—É—à–∫–∞
            'price': '100 –≥—Ä–Ω', # –ó–∞–≥–ª—É—à–∫–∞
            'description': '–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó.', # –ó–∞–≥–ª—É—à–∫–∞
            'photos': '[]', # –ó–∞–≥–ª—É—à–∫–∞
            'geolocation': 'null', # –ó–∞–≥–ª—É—à–∫–∞
            'admin_message_id': call.message.message_id, # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π message_id –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            'channel_message_id': None, # –ó–∞–≥–ª—É—à–∫–∞
            'status': 'pending' # –ó–∞–≥–ª—É—à–∫–∞
        }
        logger.warning(f"–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä {product_id} —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ (–Ω–µ–º–∞—î –º–æ–¥–µ–ª—ñ Product).")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä {product_id} –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä.")
        session.close()
        return

    if not product_info:
        bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        session.close()
        return

    seller_chat_id = product_info['seller_chat_id']
    product_name = product_info['product_name']
    price = product_info['price']
    description = product_info['description']
    photos_str = product_info['photos']
    geolocation_str = product_info['geolocation']
    admin_message_id = product_info['admin_message_id']
    channel_message_id = product_info['channel_message_id']
    current_status = product_info['status']

    photos = json.loads(photos_str) if photos_str else []
    geolocation = json.loads(geolocation_str) if geolocation_str else None
    hashtags = generate_hashtags(description)

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ –±—É–ª–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –Ω–∞ —è–∫–µ –≤—ñ–¥–ø–æ–≤—ñ–≤ –∞–¥–º—ñ–Ω, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—î—é
    # –¶–µ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, –¥–∏–≤–ª—è—á–∏—Å—å –Ω–∞ `message_id` –≤ `call.message`
    # —Ç–∞ –ø–æ—Ä—ñ–≤–Ω—é—é—á–∏ –π–æ–≥–æ –∑ `admin_message_id` –∑ –ë–î.
    # –Ø–∫—â–æ `call.message.photo` –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π, —Ç–æ —Ü–µ —Ñ–æ—Ç–æ.
    is_call_message_photo = bool(call.message.photo)


    try:
        if action == 'approve':
            if current_status != 'pending':
                bot.answer_callback_query(call.id, f"–¢–æ–≤–∞—Ä –≤–∂–µ –º–∞—î —Å—Ç–∞—Ç—É—Å '{current_status}'.")
                return

            # –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –≤ –∫–∞–Ω–∞–ª—ñ
            channel_text = (
                f"üî• *–ù–û–í–ò–ô –¢–û–í–ê–†!* üî•\\n\\n"
                f"üìù *–ù–∞–∑–≤–∞:* {product_name}\\n"
                f"üìÑ *–û–ø–∏—Å:* {description}\\n"
                f"üí∞ *–¶—ñ–Ω–∞:* {price} UAH\\n"
                f"üìç *–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è:* {'–ü—Ä–∏—Å—É—Ç–Ω—è' if geolocation else '–í—ñ–¥—Å—É—Ç–Ω—è'}\\n\\n"
                f"üÜî *ID —Ç–æ–≤–∞—Ä—É:* #{product_id}\\n\n"
                f"üì© *–î–ª—è –∑–≤'—è–∑–∫—É –∑ –ø—Ä–æ–¥–∞–≤—Ü–µ–º:* @{bot.get_chat(seller_chat_id).username or '–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á'}"
            )
            
            new_channel_message_id = None
            if photos:
                channel_media_group = []
                # –î–æ–¥–∞—î–º–æ –ø–µ—Ä—à–µ —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º
                channel_media_group.append(types.InputMediaPhoto(photos[0], caption=channel_text, parse_mode='Markdown'))
                # –î–æ–¥–∞—î–º–æ —Ä–µ—à—Ç—É —Ñ–æ—Ç–æ –±–µ–∑ –ø—ñ–¥–ø–∏—Å—É
                for photo_id in photos[1:]:
                    channel_media_group.append(types.InputMediaPhoto(photo_id))
                
                # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –º–µ–¥—ñ–∞-–≥—Ä—É–ø—É –≤ –∫–∞–Ω–∞–ª
                sent_channel_messages = bot.send_media_group(CHANNEL_ID, channel_media_group)
                new_channel_message_id = sent_channel_messages[0].message_id # ID –ø–µ—Ä—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∞–ª—å–±–æ–º—ñ
            else:
                # –Ø–∫—â–æ —Ñ–æ—Ç–æ –Ω–µ–º–∞—î, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —è–∫ –∑–≤–∏—á–∞–π–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                published_message = bot.send_message(CHANNEL_ID, channel_text, parse_mode='Markdown')
                new_channel_message_id = published_message.message_id

            if new_channel_message_id: # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª
                # TODO: –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä—É –≤ –ë–î –Ω–∞ 'approved' —Ç–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ channel_message_id
                # product_info.status = 'approved'
                # product_info.moderator_id = call.message.chat.id
                # product_info.moderated_at = datetime.now()
                # product_info.channel_message_id = new_channel_message_id
                # session.commit()
                logger.warning(f"–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä—É {product_id} –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–î (–Ω–µ–º–∞—î –º–æ–¥–µ–ª—ñ Product).")

                log_statistics('product_approved', call.message.chat.id, product_id)
                bot.send_message(seller_chat_id,
                                 f"‚úÖ –í–∞—à —Ç–æ–≤–∞—Ä '{product_name}' —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ! [–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏](https://t.me/c/{str(CHANNEL_ID)[4:]}/{new_channel_message_id})",
                                 parse_mode='Markdown', disable_web_page_preview=True)
                
                # –û–Ω–æ–≤–ª—é—î–º–æ –∞–¥–º—ñ–Ω—Å—å–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Ç–µ, —è–∫–µ –∞–¥–º—ñ–Ω –Ω–∞—Ç–∏—Å–Ω—É–≤)
                admin_update_text = f"‚úÖ –¢–æ–≤–∞—Ä *'{product_name}'* (ID: {product_id}) –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ."
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —É –≤–∏—Ö—ñ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó
                if is_call_message_photo: # –Ø–∫—â–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –±—É–ª–æ —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º
                    try:
                        bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                                 caption=admin_update_text, parse_mode='Markdown')
                    except telebot.apihelper.ApiTelegramException as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ edit_message_caption –¥–ª—è –∞–¥–º—ñ–Ω-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {call.message.message_id}: {e}")
                        # Fallback: —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                        bot.send_message(call.message.chat.id, admin_update_text, parse_mode='Markdown') 
                else: # –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–º
                    bot.edit_message_text(admin_update_text,
                                          chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='Markdown')
                
                # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–∞–Ω–æ" –¥–æ –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –∞–¥–º—ñ–Ω—Å—å–∫–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                markup_sold = types.InlineKeyboardMarkup()
                markup_sold.add(types.InlineKeyboardButton("üí∞ –í—ñ–¥–º—ñ—Ç–∏—Ç–∏ —è–∫ –ø—Ä–æ–¥–∞–Ω–æ", callback_data=f"sold_{product_id}"))
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup_sold)

            else:
                raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª.")

        elif action == 'reject':
            if current_status != 'pending':
                bot.answer_callback_query(call.id, f"–¢–æ–≤–∞—Ä –≤–∂–µ –º–∞—î —Å—Ç–∞—Ç—É—Å '{current_status}'.")
                return

            # TODO: –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä—É –≤ –ë–î –Ω–∞ 'rejected'
            # product_info.status = 'rejected'
            # product_info.moderator_id = call.message.chat.id
            # product_info.moderated_at = datetime.now()
            # session.commit()
            logger.warning(f"–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä—É {product_id} –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–î (–Ω–µ–º–∞—î –º–æ–¥–µ–ª—ñ Product).")

            log_statistics('product_rejected', call.message.chat.id, product_id)
            bot.send_message(seller_chat_id,
                             f"‚ùå –í–∞—à —Ç–æ–≤–∞—Ä '{product_name}' –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                             "–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏: –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –ø—Ä–∞–≤–∏–ª–∞–º, –Ω–∏–∑—å–∫–∞ —è–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ, –Ω–µ—Ç–æ—á–Ω–∏–π –æ–ø–∏—Å.\n"
                             "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–¥–∞—Ç–∏ –∑–Ω–æ–≤—É.",
                             parse_mode='Markdown')
            # FIX: –û–Ω–æ–≤–ª—é—î–º–æ –∞–¥–º—ñ–Ω—Å—å–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            admin_update_text = f"‚ùå –¢–æ–≤–∞—Ä *'{product_name}'* (ID: {product_id}) –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ."
            if is_call_message_photo: # –Ø–∫—â–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –±—É–ª–æ —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º
                try:
                    bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                             caption=admin_update_text, parse_mode='Markdown')
                    # –¢–∞–∫–æ–∂ –≤–∏–¥–∞–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ –æ–∫—Ä–µ–º–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–æ –±—É–ª–æ
                    # (—Ü–µ –º–æ–∂–µ –±—É—Ç–∏ —Å–∫–ª–∞–¥–Ω–æ, —è–∫—â–æ –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è message_id —Ü—å–æ–≥–æ –æ–∫—Ä–µ–º–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
                    # –Ø–∫—â–æ –∫–Ω–æ–ø–∫–∏ –±—É–ª–∏ –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω—ñ –¥–æ —Ñ–æ—Ç–æ, —Ç–æ –≤–æ–Ω–∏ –≤–∏–¥–∞–ª—è—Ç—å—Å—è —Ä–∞–∑–æ–º –∑ edit_message_caption.
                except telebot.apihelper.ApiTelegramException as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ edit_message_caption –¥–ª—è –∞–¥–º—ñ–Ω-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {call.message.message_id}: {e}")
                    # Fallback: —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    bot.send_message(call.message.chat.id, admin_update_text, parse_mode='Markdown') 
            else: # –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–º
                bot.edit_message_text(admin_update_text,
                                      chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='Markdown')
            # –í–∏–¥–∞–ª—è—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—ñ—Å–ª—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
            bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)

        elif action == 'sold':
            if current_status != 'approved':
                bot.answer_callback_query(call.id, f"–¢–æ–≤–∞—Ä –Ω–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏–π –∞–±–æ –≤–∂–µ –ø—Ä–æ–¥–∞–Ω–∏–π (–ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å: '{current_status}').")
                return

            if channel_message_id:
                try:
                    # TODO: –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä—É –≤ –ë–î –Ω–∞ 'sold'
                    # product_info.status = 'sold'
                    # product_info.moderator_id = call.message.chat.id
                    # product_info.moderated_at = datetime.now()
                    # session.commit()
                    logger.warning(f"–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä—É {product_id} –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–î (–Ω–µ–º–∞—î –º–æ–¥–µ–ª—ñ Product).")

                    log_statistics('product_sold', call.message.chat.id, product_id)

                    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ, –¥–æ–¥–∞—é—á–∏ "–ü–†–û–î–ê–ù–û!"
                    original_caption_for_channel = description # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ–≤–Ω–∏–π –æ–ø–∏—Å –∑ –ë–î
                    sold_text = (
                        f"üì¶ *–ü–†–û–î–ê–ù–û!* {product_name}\n\n"
                        f"{original_caption_for_channel}\n\n"
                        f"*–¶–µ–π —Ç–æ–≤–∞—Ä –≤–∂–µ –ø—Ä–æ–¥–∞–Ω–æ.*"
                    )
                    
                    # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ –±—É–ª–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—î—é
                    is_channel_original_message_photo = bool(photos) # –Ø–∫—â–æ –≤ –ë–î —î —Ñ–æ—Ç–æ, –∑–Ω–∞—á–∏—Ç—å, –≤ –∫–∞–Ω–∞–ª—ñ –±—É–ª–æ —Ñ–æ—Ç–æ
                    if is_channel_original_message_photo: # –Ø–∫—â–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ –±—É–ª–æ —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º
                        bot.edit_message_caption(chat_id=CHANNEL_ID, message_id=channel_message_id,
                                                 caption=sold_text, parse_mode='Markdown')
                    else: # –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ –±—É–ª–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–º
                        bot.edit_message_text(chat_id=CHANNEL_ID, message_id=channel_message_id,
                                              text=sold_text, parse_mode='Markdown')
                    
                    bot.send_message(seller_chat_id, f"‚úÖ –í–∞—à —Ç–æ–≤–∞—Ä '{product_name}' –≤—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ *'–ü–†–û–î–ê–ù–û'*. –î—è–∫—É—î–º–æ –∑–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é!", parse_mode='Markdown')
                    
                    # FIX: –û–Ω–æ–≤–ª—é—î–º–æ –∞–¥–º—ñ–Ω—Å—å–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ø—Ä–æ–¥–∞–∂—É
                    admin_sold_text = f"üí∞ –¢–æ–≤–∞—Ä *'{product_name}'* (ID: {product_id}) –≤—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ –ø—Ä–æ–¥–∞–Ω–∏–π."
                    if is_call_message_photo: # –Ø–∫—â–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –∞–¥–º—ñ–Ω-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ —Ñ–æ—Ç–æ
                        try:
                            bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                                     caption=admin_sold_text, parse_mode='Markdown')
                        except telebot.apihelper.ApiTelegramException as e:
                            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ edit_message_caption –¥–ª—è –∞–¥–º—ñ–Ω-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {call.message.message_id} (sold): {e}")
                            # Fallback: —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                            bot.send_message(call.message.chat.id, admin_sold_text, parse_mode='Markdown') 
                    else: # –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –∞–¥–º—ñ–Ω-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–º
                        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                              text=admin_sold_text, parse_mode='Markdown')
                    
                    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)

                except telebot.apihelper.ApiTelegramException as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–º—ñ—Ç—Ü—ñ —Ç–æ–≤–∞—Ä—É {product_id} —è–∫ –ø—Ä–æ–¥–∞–Ω–æ–≥–æ –≤ –∫–∞–Ω–∞–ª—ñ: {e}")
                    bot.send_message(call.message.chat.id, f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥–∞–∂—É –≤ –∫–∞–Ω–∞–ª—ñ –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id}. –ú–æ–∂–ª–∏–≤–æ, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
                    bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ.")
                    return
            else:
                bot.send_message(call.message.chat.id, "–¶–µ–π —Ç–æ–≤–∞—Ä —â–µ –Ω–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ, –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ –≤—ñ–¥—Å—É—Ç–Ω—î. –ù–µ –º–æ–∂–Ω–∞ –≤—ñ–¥–º—ñ—Ç–∏—Ç–∏ —è–∫ –ø—Ä–æ–¥–∞–Ω–∏–π.")
                bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ.")
    except Exception as e:
        session.rollback() # –í—ñ–¥–∫–æ—á—É—î–º–æ –∑–º—ñ–Ω–∏ —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –º–æ–¥–µ—Ä–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—É {product_id}, –¥—ñ—è {action}: {e}", exc_info=True)
        bot.send_message(call.message.chat.id, f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥—ñ—ó '{action}' –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id}.")
    finally:
        session.close()
    bot.answer_callback_query(call.id)

# --- 17. –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ –ø—ñ—Å–ª—è –∫–æ–ª–±–µ–∫—É ---
@bot.callback_query_handler(func=lambda call: call.data == "admin_panel_main")
@error_handler
def back_to_admin_panel(call):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ."""
    if call.message.chat.id != ADMIN_CHAT_ID:
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        types.InlineKeyboardButton("‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó", callback_data="admin_pending"),
        types.InlineKeyboardButton("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users"),
        types.InlineKeyboardButton("üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è", callback_data="admin_block"),
        types.InlineKeyboardButton("üí∞ –ö–æ–º—ñ—Å—ñ—ó", callback_data="admin_commissions"),
        types.InlineKeyboardButton("ü§ñ AI –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_ai_stats"),
        types.InlineKeyboardButton("üìö –ö–µ—Ä—É–≤–∞–Ω–Ω—è FAQ", callback_data="admin_faq_menu")
    )

    bot.edit_message_text("üîß *–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å*\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                          chat_id=call.message.chat.id, message_id=call.message.message_id,
                          reply_markup=markup, parse_mode='Markdown')
    bot.answer_callback_query(call.id)

# --- Webhook –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è Flask (–ü–ï–†–ï–ú–Ü–©–ï–ù–û –í –ö–Ü–ù–ï–¶–¨ –§–ê–ô–õ–£) ---
# –¶–µ –≤–∞–∂–ª–∏–≤–æ, —â–æ–± WEBHOOK_URL_PATH —Ç–∞ app –±—É–ª–∏ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.
@app.route(WEBHOOK_URL_PATH, methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '!', 200
    else:
        return '<h1>Hi, this is your Telegram bot!</h1>', 200 # –î–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —â–æ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î...")
    init_db() # –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
    logger.info("–í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –≤–µ–±—Ö—É–∫–∞...")
    bot.remove_webhook() # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–µ–±—Ö—É–∫, —è–∫—â–æ –≤—ñ–Ω –±—É–≤
    time.sleep(0.1) # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞

    logger.info(f"–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ –Ω–∞: {WEBHOOK_URL_BASE}{WEBHOOK_URL_PATH}")
    bot.set_webhook(url=WEBHOOK_URL_BASE + WEBHOOK_URL_PATH)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask –¥–æ–¥–∞—Ç–æ–∫
    app.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))
    logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.")
