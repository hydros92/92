import sqlite3
import os
import telebot
from telebot import types # –Ø–≤–Ω–æ —ñ–º–ø–æ—Ä—Ç—É—î–º–æ types –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
import logging
from datetime import datetime, timedelta
import re
import json # –î–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ñ–æ—Ç–æ —è–∫ JSON —Ä—è–¥–∫–∞
import requests # –î–ª—è HTTP –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ AI API
from dotenv import load_dotenv
import os

load_dotenv()  # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–º—ñ–Ω–Ω—ñ –∑ .env

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')
CHANNEL_ID = os.getenv('CHANNEL_ID')
MONOBANK_CARD_NUMBER = os.getenv('MONOBANK_CARD_NUMBER')
GROK_API_KEY = os.getenv('GROK_API_KEY')
GROK_API_URL = os.getenv('GROK_API_URL')

print("Token:", TOKEN)
print("Admin Chat ID:", ADMIN_CHAT_ID)
print("Channel ID:", CHANNEL_ID)
print("Monobank Card Number:", MONOBANK_CARD_NUMBER)
print("Grok API Key:", GROK_API_KEY)
print("Grok API URL:", GROK_API_URL)






# --- 1. –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ë–æ—Ç–∞ ---
# !!! –í–ê–ñ–õ–ò–í–û: –ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ —Ü—ñ –¥–∞–Ω—ñ —è–∫ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ !!!
# TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '–í–ê–®_–ù–û–í–ò–ô_–ê–ö–¢–£–ê–õ–¨–ù–ò–ô_–¢–û–ö–ï–ù')
# ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID', '–í–ê–®_ADMIN_CHAT_ID'))
# CHANNEL_ID = int(os.getenv('CHANNEL_ID', '–í–ê–®_CHANNEL_ID'))
# MONOBANK_CARD_NUMBER = os.getenv('MONOBANK_CARD_NUMBER', '–í–ê–®–ê_–ö–ê–†–¢–ö–ê_MONOBANK')
# GROK_API_KEY = os.getenv('GROK_API_KEY', '–í–ê–®_GROK_API_KEY') # NEW: API –∫–ª—é—á –¥–ª—è Grok
# GROK_API_URL = os.getenv('GROK_API_URL', 'URL_–î–õ–Ø_GROK_API') # NEW: URL –¥–ª—è Grok API

# –ó–ê–ì–õ–£–®–ö–ò –ù–ê –ß–ê–° –†–û–ó–†–û–ë–ö–ò (–∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ!)
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8039977178:AAGS-GbH-lhljGGG6OgJ2iMU_ncB-JzeOvU') # –ó–ê–ú–Ü–ù–Ü–¢–¨ –¶–ï–ô –¢–û–ö–ï–ù –ù–ï–ì–ê–ô–ù–û!
admin_chat_id_str = os.getenv('ADMIN_CHAT_ID', '8184456641').strip("'\"")
ADMIN_CHAT_ID = int(admin_chat_id_str)
channel_id_str = os.getenv('CHANNEL_ID', '-1002535586055').strip("'\"")
CHANNEL_ID = int(channel_id_str)
MONOBANK_CARD_NUMBER = '4441 1111 5302 1484' # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É –∞–±–æ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
GROK_API_KEY = 'YOUR_GROK_API_KEY_HERE' # NEW: –ó–∞–º—ñ–Ω—ñ—Ç—å –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ env
GROK_API_URL = 'YOUR_GROK_API_ENDPOINT_HERE' # NEW: –ó–∞–º—ñ–Ω—ñ—Ç—å –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ env


# --- 2. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    handlers=[
                        logging.FileHandler("bot.log", encoding='utf-8'), # –î–æ–¥–∞–Ω–æ encoding
                        logging.StreamHandler()
                    ])
logger = logging.getLogger(__name__)

# --- 3. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ ---
bot = telebot.TeleBot(TOKEN)

# --- 4. –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –±–∞–≥–∞—Ç–æ—à–∞–≥–æ–≤–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤ ---
user_data = {} # {chat_id: {'step': '...', 'data': {...}}}

# --- 5. –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö (SQLite) ---
DB_NAME = 'seller_bot.db'

def get_db_connection():
    conn = sqlite3.connect(DB_NAME)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()

    # –¢–∞–±–ª–∏—Ü—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            chat_id INTEGER PRIMARY KEY UNIQUE,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            is_blocked BOOLEAN DEFAULT FALSE,
            blocked_by INTEGER, -- ID –∞–¥–º—ñ–Ω–∞, —è–∫–∏–π –∑–∞–±–ª–æ–∫—É–≤–∞–≤
            blocked_at TIMESTAMP,
            commission_paid REAL DEFAULT 0, -- NEW: –°–ø–ª–∞—á–µ–Ω–∞ –∫–æ–º—ñ—Å—ñ—è
            commission_due REAL DEFAULT 0,   -- NEW: –ù–∞–ª–µ–∂–Ω–∞ –∫–æ–º—ñ—Å—ñ—è
            last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    # –¢–∞–±–ª–∏—Ü—è —Ç–æ–≤–∞—Ä—ñ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            seller_chat_id INTEGER NOT NULL,
            seller_username TEXT,
            product_name TEXT NOT NULL,
            price TEXT NOT NULL, -- –ú–æ–∂–µ –±—É—Ç–∏ —á–∏—Å–ª–æ–º –∞–±–æ "–î–æ–≥–æ–≤—ñ—Ä–Ω–∞"
            description TEXT NOT NULL,
            photos TEXT, -- JSON —Ä—è–¥–æ–∫ file_id
            geolocation TEXT, -- NEW: JSON —Ä—è–¥–æ–∫ {'latitude': ..., 'longitude': ...}
            status TEXT DEFAULT 'pending', -- pending, approved, rejected, sold, expired
            commission_rate REAL DEFAULT 0.10, -- NEW: –°—Ç–∞–≤–∫–∞ –∫–æ–º—ñ—Å—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 10%)
            commission_amount REAL DEFAULT 0,  -- NEW: –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ —Å—É–º–∞ –∫–æ–º—ñ—Å—ñ—ó
            moderator_id INTEGER,
            moderated_at TIMESTAMP,
            admin_message_id INTEGER,
            channel_message_id INTEGER,
            views INTEGER DEFAULT 0, -- NEW: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ (—è–∫—â–æ —Ä–µ–∞–ª—ñ–∑–æ–≤—É–≤–∞—Ç–∏)
            promotion_ends_at TIMESTAMP, -- NEW: –î–ª—è "–ø—ñ–¥–Ω—è—Ç—Ç—è" –æ–≥–æ–ª–æ—à–µ–Ω—å
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (seller_chat_id) REFERENCES users (chat_id)
        )
    ''')

    # –¢–∞–±–ª–∏—Ü—è –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–æ–∫ (—è–∫—â–æ AI –±—É–¥–µ –≤–µ—Å—Ç–∏ –¥—ñ–∞–ª–æ–≥–∏)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS conversations ( -- NEW:
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_chat_id INTEGER NOT NULL,
            product_id INTEGER, -- –Ø–∫—â–æ —Ä–æ–∑–º–æ–≤–∞ —Å—Ç–æ—Å—É—î—Ç—å—Å—è —Ç–æ–≤–∞—Ä—É
            message_text TEXT,
            sender_type TEXT, -- 'user' –∞–±–æ 'ai'
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_chat_id) REFERENCES users (chat_id),
            FOREIGN KEY (product_id) REFERENCES products (id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü—è –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∫–æ–º—ñ—Å—ñ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS commission_transactions ( -- NEW:
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            product_id INTEGER NOT NULL,
            seller_chat_id INTEGER NOT NULL,
            amount REAL NOT NULL,
            status TEXT DEFAULT 'pending_payment', -- pending_payment, paid, cancelled
            payment_details TEXT, -- –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —Å–∫—Ä—ñ–Ω—à–æ—Ç –∞–±–æ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            paid_at TIMESTAMP,
            FOREIGN KEY (product_id) REFERENCES products (id),
            FOREIGN KEY (seller_chat_id) REFERENCES users (chat_id)
        )
    ''')


    cursor.execute('''
        CREATE TABLE IF NOT EXISTS statistics (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            action TEXT NOT NULL,
            user_id INTEGER, -- –ú–æ–∂–µ –±—É—Ç–∏ NULL –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –¥—ñ–π
            product_id INTEGER,
            details TEXT, -- –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Å—É–º–∞ –∫–æ–º—ñ—Å—ñ—ó)
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    conn.commit()
    conn.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –∞–±–æ –≤–∂–µ —ñ—Å–Ω—É—î.")

# --- 6. –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ ---
def error_handler(func):
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ {func.__name__}: {e}", exc_info=True)
            # –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ chat_id –∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
            chat_id_to_notify = ADMIN_CHAT_ID
            if args:
                first_arg = args[0]
                if isinstance(first_arg, types.Message):
                    chat_id_to_notify = first_arg.chat.id
                elif isinstance(first_arg, types.CallbackQuery):
                    chat_id_to_notify = first_arg.message.chat.id
            
            try:
                bot.send_message(ADMIN_CHAT_ID, f"üö® –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –±–æ—Ç—ñ!\n–§—É–Ω–∫—Ü—ñ—è: {func.__name__}\n–ü–æ–º–∏–ª–∫–∞: {e}\n–î–∏–≤—ñ—Ç—å—Å—è –¥–µ—Ç–∞–ª—ñ –≤ bot.log")
                if chat_id_to_notify != ADMIN_CHAT_ID:
                    bot.send_message(chat_id_to_notify, "üòî –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∂–µ —Å–ø–æ–≤—ñ—â–µ–Ω–∏–π.")
            except Exception as e_notify:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {e_notify}")
    return wrapper

# --- 7. –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---
@error_handler
def save_user(message_or_user):
    """–ó–±–µ—Ä—ñ–≥–∞—î –∞–±–æ –æ–Ω–æ–≤–ª—é—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    user = None
    chat_id = None

    if isinstance(message_or_user, types.Message):
        user = message_or_user.from_user
        chat_id = message_or_user.chat.id
    elif isinstance(message_or_user, types.User):
        user = message_or_user
        chat_id = user.id # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ chat_id = user.id
    else:
        logger.warning(f"save_user –æ—Ç—Ä–∏–º–∞–≤ –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø: {type(message_or_user)}")
        return

    if not user or not chat_id:
        logger.warning("save_user: user –∞–±–æ chat_id –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ.")
        return

    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT chat_id FROM users WHERE chat_id = ?", (chat_id,))
        exists = cursor.fetchone()
        if exists:
            cursor.execute('''
                UPDATE users SET username = ?, first_name = ?, last_name = ?, last_activity = CURRENT_TIMESTAMP
                WHERE chat_id = ?
            ''', (user.username, user.first_name, user.last_name, chat_id))
        else:
            cursor.execute('''
                INSERT INTO users (chat_id, username, first_name, last_name)
                VALUES (?, ?, ?, ?)
            ''', (chat_id, user.username, user.first_name, user.last_name))
        conn.commit()
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id} –∑–±–µ—Ä–µ–∂–µ–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}")
    finally:
        conn.close()

@error_handler
def is_user_blocked(chat_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT is_blocked FROM users WHERE chat_id = ?", (chat_id,))
        result = cursor.fetchone()
        return result and result['is_blocked']
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è {chat_id}: {e}")
        return True # –í–≤–∞–∂–∞—î–º–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–º —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –±–µ–∑–ø–µ–∫–∏
    finally:
        conn.close()

# TODO: –î–æ–¥–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó set_user_block_status, generate_hashtags, log_statistics (–≤–æ–Ω–∏ —î —É –≤–∞—à–æ–º—É –∫–æ–¥—ñ)

@error_handler
def get_ai_response(prompt, conversation_history=None): # NEW: –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ AI
    """
    –ù–∞–¥—Å–∏–ª–∞—î –∑–∞–ø–∏—Ç –¥–æ AI (Grok –∞–±–æ —ñ–Ω—à–æ–≥–æ LLM) —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å.
    `conversation_history` - —Ü–µ —Å–ø–∏—Å–æ–∫ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.
    –ü—Ä–∏–∫–ª–∞–¥ —Ñ–æ—Ä–º–∞—Ç—É –¥–ª—è conversation_history:
    [
        {"role": "user", "content": "–ü—Ä–∏–≤—ñ—Ç"},
        {"role": "assistant", "content": "–í—ñ—Ç–∞—é! –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?"}
    ]
    """
    if not GROK_API_KEY or not GROK_API_URL:
        logger.warning("GROK_API_KEY –∞–±–æ GROK_API_URL –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ. AI –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ–º–æ–∂–ª–∏–≤–∞.")
        return "–ù–∞ –∂–∞–ª—å, –º—ñ–π —à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç –∑–∞—Ä–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π."

    headers = {
        "Authorization": f"Bearer {GROK_API_KEY}",
        "Content-Type": "application/json"
    }
    # –§–æ—Ä–º–∞—Ç payload –º–æ–∂–µ –≤—ñ–¥—Ä—ñ–∑–Ω—è—Ç–∏—Å—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ API
    payload = {
        "model": "grok-1", # –ê–±–æ —ñ–Ω—à–∞ –º–æ–¥–µ–ª—å
        "messages": [],
        "prompt": prompt, # –î–µ—è–∫—ñ API –º–æ–∂—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ 'prompt' –∑–∞–º—ñ—Å—Ç—å 'messages'
        # "max_tokens": 150 # –û–±–º–µ–∂–µ–Ω–Ω—è –¥–æ–≤–∂–∏–Ω–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    }
    if conversation_history:
         payload["messages"].extend(conversation_history)
    payload["messages"].append({"role": "user", "content": prompt})


    try:
        logger.info(f"–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–æ AI: {prompt[:100]}...")
        response = requests.post(GROK_API_URL, headers=headers, json=payload, timeout=30) # timeout 30 —Å–µ–∫—É–Ω–¥
        response.raise_for_status() # –ì–µ–Ω–µ—Ä—É—î –ø–æ–º–∏–ª–∫—É –¥–ª—è –ø–æ–≥–∞–Ω–∏—Ö —Å—Ç–∞—Ç—É—Å—ñ–≤ (4xx –∞–±–æ 5xx)
        
        ai_data = response.json()
        # –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ JSON, —è–∫—É –ø–æ–≤–µ—Ä—Ç–∞—î API
        # –¶–µ –ª–∏—à–µ –ø—Ä–∏–∫–ª–∞–¥:
        if ai_data.get("choices") and len(ai_data["choices"]) > 0:
            content = ai_data["choices"][0].get("message", {}).get("content")
            if not content and ai_data["choices"][0].get("text"): # –¥–ª—è –¥–µ—è–∫–∏—Ö API
                 content = ai_data["choices"][0].get("text")
            
            if content:
                logger.info(f"AI –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞: {content[:100]}...")
                return content.strip()
            else:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ AI: {ai_data}")
                return "–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –∑–º—ñ–≥ –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç."
        else:
            logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ AI: {ai_data}")
            return "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—ñ –∑—ñ —à—Ç—É—á–Ω–∏–º —ñ–Ω—Ç–µ–ª–µ–∫—Ç–æ–º."

    except requests.exceptions.RequestException as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ HTTP –∑–∞–ø–∏—Ç—É –¥–æ AI API: {e}")
        return "–ü—Ä–æ–±–ª–µ–º–∞ –∑—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è–º –¥–æ –º–æ–≥–æ –ø–æ–º—ñ—á–Ω–∏–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
    except Exception as e:
        logger.error(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ AI: {e}")
        return "–í–∏–Ω–∏–∫–ª–∞ –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑ AI."

# --- 8. –†–æ–∑–º—ñ—Ç–∫–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä ---
main_menu_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu_markup.add(types.KeyboardButton("üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä"), types.KeyboardButton("üìã –ú–æ—ó —Ç–æ–≤–∞—Ä–∏"))
main_menu_markup.add(types.KeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞"), types.KeyboardButton("üí∞ –ö–æ–º—ñ—Å—ñ—è")) # NEW: –ö–Ω–æ–ø–∫–∞ –ö–æ–º—ñ—Å—ñ—è
main_menu_markup.add(types.KeyboardButton("üì∫ –ù–∞—à –∫–∞–Ω–∞–ª"))

# --- 9. –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@bot.message_handler(commands=['start'])
@error_handler
def send_welcome(message):
    chat_id = message.chat.id
    if is_user_blocked(chat_id):
        bot.send_message(chat_id, "‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
        return

    save_user(message)
    # log_statistics('start', chat_id) # TODO: –†–æ–∑–∫–æ–º–µ–Ω—Ç—É–≤–∞—Ç–∏ —Ç–∞ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ log_statistics

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {chat_id} –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞.")
    welcome_text = (
        "üõçÔ∏è *–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ SellerBot!*\n\n"
        "–Ø –≤–∞—à –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É —Ç–∞ –∫—É–ø—ñ–≤–ª—ñ —Ç–æ–≤–∞—Ä—ñ–≤. "
        "–ú–µ–Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –ø–µ—Ä–µ–¥–æ–≤–∏–π AI –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏ —É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—ñ —Ç–∞ —É–≥–æ–¥–∞—Ö!\n\n" # NEW: –ó–≥–∞–¥–∫–∞ –ø—Ä–æ AI
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é:"
    )
    bot.send_message(chat_id, welcome_text, reply_markup=main_menu_markup, parse_mode='Markdown')

@bot.message_handler(commands=['admin'])
@error_handler
def admin_panel(message):
    if message.chat.id != ADMIN_CHAT_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É.")
        return

    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        types.InlineKeyboardButton("‚è≥ –¢–æ–≤–∞—Ä–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó", callback_data="admin_pending"),
        types.InlineKeyboardButton("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users"),
        types.InlineKeyboardButton("üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è", callback_data="admin_block_user"),
        types.InlineKeyboardButton("üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∫–æ–º—ñ—Å—ñ–π", callback_data="admin_commissions") # NEW
    )
    bot.send_message(message.chat.id, "üîß *–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å*", reply_markup=markup, parse_mode='Markdown')

# --- 10. –û–±—Ä–æ–±–Ω–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ---
@bot.message_handler(func=lambda message: True, content_types=['text', 'photo', 'location']) # NEW: –î–æ–¥–∞–Ω–æ location
@error_handler
def handle_text_messages(message):
    chat_id = message.chat.id
    user_text = message.text if message.content_type == 'text' else ""

    if is_user_blocked(chat_id):
        bot.send_message(chat_id, "‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
        return
    
    save_user(message) # –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    # –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
    if chat_id in user_data and user_data[chat_id].get('step'):
        current_step = user_data[chat_id]['step']
        if message.content_type == 'text':
            if user_text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è":
                del user_data[chat_id]
                bot.send_message(chat_id, "–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_markup)
                return
            # TODO: –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ª–æ–≥—ñ–∫—É process_product_input —Å—é–¥–∏ –∞–±–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —ó—ó
            # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: process_product_step(message)
            bot.send_message(chat_id, f"–û–±—Ä–æ–±–∫–∞ –∫—Ä–æ–∫—É: {current_step} –¥–ª—è —Ç–µ–∫—Å—Ç—É: {user_text}") # –ó–∞–≥–ª—É—à–∫–∞
            return # –í–∞–∂–ª–∏–≤–æ, —â–æ–± –Ω–µ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ AI –æ–±—Ä–æ–±–∫–∏
        elif message.content_type == 'photo' and current_step == 'waiting_photos':
            # TODO: –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ª–æ–≥—ñ–∫—É process_product_photo —Å—é–¥–∏
            bot.send_message(chat_id, f"–û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –∫—Ä–æ–∫—É: {current_step}") # –ó–∞–≥–ª—É—à–∫–∞
            return
        elif message.content_type == 'location' and current_step == 'waiting_location': # NEW
            # TODO: –û–±—Ä–æ–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –¥–ª—è —Ç–æ–≤–∞—Ä—É
            process_product_location(message)
            return
        # –Ø–∫—â–æ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ—á—ñ–∫—É–≤–∞–Ω–æ–º—É –Ω–∞ –ø–æ—Ç–æ—á–Ω–æ–º—É –∫—Ä–æ—Ü—ñ
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫—Ä–æ–∫—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è'.")
        return


    # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if user_text == "üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä":
        start_add_product_flow(message)
    elif user_text == "üìã –ú–æ—ó —Ç–æ–≤–∞—Ä–∏":
        # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é send_my_products(message)
        bot.send_message(chat_id, "–§—É–Ω–∫—Ü—ñ—è '–ú–æ—ó —Ç–æ–≤–∞—Ä–∏' –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.")
    elif user_text == "‚ùì –î–æ–ø–æ–º–æ–≥–∞":
        send_help_message(message)
    elif user_text == "üí∞ –ö–æ–º—ñ—Å—ñ—è": # NEW
        send_commission_info(message)
    elif user_text == "üì∫ –ù–∞—à –∫–∞–Ω–∞–ª":
        # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é send_channel_link(message)
        bot.send_message(chat_id, f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: [–ö–∞–Ω–∞–ª](https://t.me/c/{str(CHANNEL_ID)[4:]})", parse_mode='Markdown') # –ü—Ä–∏–∫–ª–∞–¥
    # NEW: –Ø–∫—â–æ —Ü–µ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ —ñ –Ω–µ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é, —ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É - –ø–µ—Ä–µ–¥–∞—î–º–æ AI
    elif user_text: # –¢—ñ–ª—å–∫–∏ —è–∫—â–æ —î —Ç–µ–∫—Å—Ç
        # TODO: –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É AI
        # conversation_history = get_conversation_history(chat_id)
        # ai_reply = get_ai_response(user_text, conversation_history)
        ai_reply = get_ai_response(user_text) # –ü–æ–∫–∏ –±–µ–∑ —ñ—Å—Ç–æ—Ä—ñ—ó
        bot.send_message(chat_id, f"ü§ñ –Ü–ª–æ–Ω –¥—É–º–∞—î...\n{ai_reply}")
        # TODO: –ó–±–µ—Ä–µ–≥—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å AI –≤ conversations
    elif message.content_type == 'photo':
        bot.send_message(chat_id, "–Ø –æ—Ç—Ä–∏–º–∞–≤ –≤–∞—à–µ —Ñ–æ—Ç–æ, –∞–ª–µ –Ω–µ –∑–Ω–∞—é, —â–æ –∑ –Ω–∏–º —Ä–æ–±–∏—Ç–∏ –ø–æ–∑–∞ –ø—Ä–æ—Ü–µ—Å–æ–º –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É. ü§î")
    elif message.content_type == 'location':
        bot.send_message(chat_id, f"–Ø –±–∞—á—É –≤–∞—à—É –≥–µ–æ—Ç–æ—á–∫—É: {message.location.latitude}, {message.location.longitude}. –Ø–∫ —è –º–æ–∂—É —ó—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏?")
    # else: # –Ø–∫—â–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –Ω–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –≤–∏—â–µ
        # bot.send_message(chat_id, "–Ø –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤ –≤–∞—à –∑–∞–ø–∏—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")


# --- 11. –ü–æ—Ç—ñ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ---
ADD_PRODUCT_STEPS = {
    1: {'name': 'waiting_name', 'prompt': "üìù *–ö—Ä–æ–∫ 1/5: –ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É*\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'iPhone 13 Pro Max 256GB Sierra Blue'):", 'next_step': 2},
    2: {'name': 'waiting_price', 'prompt': "üí∞ *–ö—Ä–æ–∫ 2/5: –¶—ñ–Ω–∞*\n\n–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '25000 –≥—Ä–Ω', '700 USD', '–î–æ–≥–æ–≤—ñ—Ä–Ω–∞'):", 'next_step': 3},
    3: {'name': 'waiting_photos', 'prompt': "üì∏ *–ö—Ä–æ–∫ 3/5: –§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó*\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–æ 5 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π —Ç–æ–≤–∞—Ä—É (–∫–æ–∂–Ω–µ –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º). –ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ'.", 'next_step': 4, 'allow_skip': True, 'skip_button': '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ñ–æ—Ç–æ'},
    4: {'name': 'waiting_location', 'prompt': "üìç *–ö—Ä–æ–∫ 4/5: –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)*\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –ø–æ–∫—É–ø—Ü—ñ–≤ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'.", 'next_step': 5, 'content_type': 'location', 'allow_skip': True, 'skip_button': '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é'}, # NEW
    5: {'name': 'waiting_description', 'prompt': "‚úçÔ∏è *–ö—Ä–æ–∫ 5/5: –û–ø–∏—Å*\n\n–ù–∞–¥–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å (—Å—Ç–∞–Ω, –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü—ñ—è, –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ):", 'next_step': 'confirm'}
}

cancel_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
cancel_markup.add(types.KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è"))

@error_handler
def start_add_product_flow(message):
    chat_id = message.chat.id
    # TODO: –î–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_data[chat_id] = {'step_number': 1, 'data': {'photos': [], 'geolocation': None}} # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    send_product_step_message(chat_id)

@error_handler
def send_product_step_message(chat_id):
    current_step_number = user_data[chat_id]['step_number']
    step_config = ADD_PRODUCT_STEPS[current_step_number]
    user_data[chat_id]['step'] = step_config['name'] # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –∫—Ä–æ–∫ –¥–ª—è –æ–±—Ä–æ–±–Ω–∏–∫–∞

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    if step_config.get('skip_button'):
        markup.add(types.KeyboardButton(step_config['skip_button']))
    markup.add(types.KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è"))
    
    bot.send_message(chat_id, step_config['prompt'], parse_mode='Markdown', reply_markup=markup)

# TODO: –ù–µ–æ–±—Ö—ñ–¥–Ω–æ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ process_product_step(message), —è–∫–∏–π –±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏—Å—è –∑ handle_text_messages
# –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –º–∞—î –æ–±—Ä–æ–±–ª—è—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞ –∫–æ–∂–Ω–æ–º—É –∫—Ä–æ—Ü—ñ, –≤–∞–ª—ñ–¥—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ, –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —ó—Ö –≤ user_data[chat_id]['data']
# —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–∏ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É —á–µ—Ä–µ–∑ send_product_step_message –∞–±–æ –∑–∞–≤–µ—Ä—à—É–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å.

# –ü—Ä–∏–∫–ª–∞–¥ –æ–±—Ä–æ–±–∫–∏ –æ–¥–Ω–æ–≥–æ –∫—Ä–æ–∫—É (—ñ–Ω—à—ñ –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ)
# def process_product_step(message):
#     chat_id = message.chat.id
#     if chat_id not in user_data or 'step_number' not in user_data[chat_id]: return
#
#     current_step_number = user_data[chat_id]['step_number']
#     step_config = ADD_PRODUCT_STEPS[current_step_number]
#     current_data_key = step_config['name'].replace('waiting_', '') # 'name', 'price', etc.
#
#     if message.text == step_config.get('skip_button'):
#         # –û–±—Ä–æ–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫—É –∫—Ä–æ–∫—É
#         user_data[chat_id]['step_number'] = step_config['next_step']
#         send_product_step_message(chat_id)
#         return
#
#     # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
#     if step_config['name'] == 'waiting_name':
#         user_data[chat_id]['data']['product_name'] = message.text # –ü—Ä–∏–∫–ª–∞–¥
#     # ... —ñ–Ω—à—ñ –∫—Ä–æ–∫–∏ ...
#
#     # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É
#     if step_config['next_step'] == 'confirm':
#         # TODO: –ø–æ–∫–∞–∑–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é
#         confirm_and_send_for_moderation(chat_id)
#     else:
#         user_data[chat_id]['step_number'] = step_config['next_step']
#         send_product_step_message(chat_id)

@error_handler
def process_product_location(message): # NEW
    chat_id = message.chat.id
    if chat_id in user_data and user_data[chat_id]['step'] == 'waiting_location':
        user_data[chat_id]['data']['geolocation'] = {
            'latitude': message.location.latitude,
            'longitude': message.location.longitude
        }
        bot.send_message(chat_id, "‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—é –¥–æ–¥–∞–Ω–æ.")
        # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É
        current_step_number = user_data[chat_id]['step_number']
        next_step_number = ADD_PRODUCT_STEPS[current_step_number]['next_step']
        user_data[chat_id]['step_number'] = next_step_number
        send_product_step_message(chat_id)
    else:
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é —Ç—ñ–ª—å–∫–∏ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–º—É –∫—Ä–æ—Ü—ñ.")


# --- 12. –î–æ–ø–æ–º—ñ–∂–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ---
@error_handler
def send_help_message(message):
    help_text = (
        "üÜò *–î–æ–≤—ñ–¥–∫–∞*\n\n"
        "ü§ñ –Ø –≤–∞—à AI-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ —Ç–∞ –ø—Ä–æ–¥–∞–∂—É. –í–∏ –º–æ–∂–µ—Ç–µ:\n"
        "üì¶ *–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä* - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.\n"
        "üìã *–ú–æ—ó —Ç–æ–≤–∞—Ä–∏* - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Ç–∞ –ø—Ä–æ–¥–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏.\n"
        "üí∞ *–ö–æ–º—ñ—Å—ñ—è* - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–º—ñ—Å—ñ–π–Ω—ñ –∑–±–æ—Ä–∏.\n"
        "üì∫ *–ù–∞—à –∫–∞–Ω–∞–ª* - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó.\n\n"
        "üó£Ô∏è *–°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è:* –ü—Ä–æ—Å—Ç–æ –ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ –≤–∞—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó, —ñ –º—ñ–π –≤–±—É–¥–æ–≤–∞–Ω–∏–π AI —Å–ø—Ä–æ–±—É—î –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏!\n\n"
        "–Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞." # TODO: –î–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –∞–¥–º—ñ–Ω–∞
    )
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown', reply_markup=main_menu_markup)

@error_handler
def send_commission_info(message): # NEW
    # TODO: –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É —Å—Ç–∞–≤–∫—É –∫–æ–º—ñ—Å—ñ—ó –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∞–±–æ –ë–î
    commission_rate_percent = 10 # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, 10%
    text = (
        f"üí∞ *–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—é*\n\n"
        f"–ó–∞ —É—Å–ø—ñ—à–Ω–∏–π –ø—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä—É —á–µ—Ä–µ–∑ –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞ —Å—Ç—è–≥—É—î—Ç—å—Å—è –∫–æ–º—ñ—Å—ñ—è —É —Ä–æ–∑–º—ñ—Ä—ñ **{commission_rate_percent}%** –≤—ñ–¥ –∫—ñ–Ω—Ü–µ–≤–æ—ó —Ü—ñ–Ω–∏ –ø—Ä–æ–¥–∞–∂—É.\n\n"
        f"–ü—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –≤–∏ –ø–æ–∑–Ω–∞—á–∏—Ç–µ —Ç–æ–≤–∞—Ä —è–∫ '–ü—Ä–æ–¥–∞–Ω–æ', —Å–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—Ä–∞—Ö—É—î —Å—É–º—É –∫–æ–º—ñ—Å—ñ—ó, —ñ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —â–æ–¥–æ —ó—ó —Å–ø–ª–∞—Ç–∏.\n\n"
        f"–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è —Å–ø–ª–∞—Ç–∏ –∫–æ–º—ñ—Å—ñ—ó (Monobank):\n`{MONOBANK_CARD_NUMBER}`\n\n"
        f"–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–ª–∞—á—É–π—Ç–µ –∫–æ–º—ñ—Å—ñ—é –≤—á–∞—Å–Ω–æ, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –æ–±–º–µ–∂–µ–Ω—å –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞.\n\n"
        f"–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –≤–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–ø–ª–∞—Ç–∏ –º–æ–∂–Ω–∞ –±—É–¥–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –≤ —Ä–æ–∑–¥—ñ–ª—ñ '–ú–æ—ó —Ç–æ–≤–∞—Ä–∏' (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)."
    )
    bot.send_message(message.chat.id, text, parse_mode='Markdown', reply_markup=main_menu_markup)


# --- 13. –û–±—Ä–æ–±–Ω–∏–∫–∏ Callback Query (–¥–ª—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ —Ç–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó) ---
# TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ callback_inline, handle_admin_callbacks, handle_product_moderation_callbacks
# –í–æ–Ω–∏ –º–∞—é—Ç—å –±—É—Ç–∏ —Å—Ö–æ–∂–∏–º–∏ –Ω–∞ —Ç—ñ, —â–æ —É –≤–∞—à–æ–º—É –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –∫–æ–¥—ñ, –∞–ª–µ –∞–¥–∞–ø—Ç–æ–≤–∞–Ω—ñ –¥–æ –Ω–æ–≤–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ë–î.
# –û—Å–Ω–æ–≤–Ω—ñ –¥—ñ—ó: approve_PRODUCTID, reject_PRODUCTID, sold_PRODUCTID, admin_stats, admin_pending, etc.

# –ü—Ä–∏–∫–ª–∞–¥ –æ–±—Ä–æ–±–Ω–∏–∫–∞ –¥–ª—è —Å—Ö–≤–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
@bot.callback_query_handler(func=lambda call: call.data.startswith('approve_'))
@error_handler
def handle_approve_product(call):
    if call.message.chat.id != ADMIN_CHAT_ID:
        bot.answer_callback_query(call.id, "–¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")
        return
    
    try:
        product_id = int(call.data.split('_')[1])
    except (IndexError, ValueError):
        logger.error(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è approve: {call.data}")
        bot.answer_callback_query(call.id, "–ü–æ–º–∏–ª–∫–∞ ID —Ç–æ–≤–∞—Ä—É.")
        return

    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT * FROM products WHERE id = ? AND status = 'pending'", (product_id,))
        product = cursor.fetchone()

        if not product:
            bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.")
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            return

        # TODO: –õ–æ–≥—ñ–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ –∫–∞–Ω–∞–ª
        # 1. –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–∞–Ω–∞–ª—É (–∑ —Ñ–æ—Ç–æ, –æ–ø–∏—Å–æ–º, —Ü—ñ–Ω–æ—é, –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é, –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –ø—Ä–æ–¥–∞–≤—Ü—è)
        # 2. –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤ CHANNEL_ID
        # 3. –û—Ç—Ä–∏–º–∞—Ç–∏ channel_message_id
        # 4. –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä—É –≤ –ë–î –Ω–∞ 'approved', –∑–∞–ø–∏—Å–∞—Ç–∏ channel_message_id, moderator_id, moderated_at
        # 5. –°–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–æ–¥–∞–≤—Ü—è
        # 6. –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–≤–∏–¥–∞–ª–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏, –Ω–∞–ø–∏—Å–∞—Ç–∏ "–°—Ö–≤–∞–ª–µ–Ω–æ")

        # –ó–∞–≥–ª—É—à–∫–∞
        cursor.execute("UPDATE products SET status = 'approved', moderator_id = ?, moderated_at = CURRENT_TIMESTAMP WHERE id = ?",
                       (ADMIN_CHAT_ID, product_id))
        conn.commit()
        
        bot.answer_callback_query(call.id, f"–¢–æ–≤–∞—Ä ID {product_id} —Å—Ö–≤–∞–ª–µ–Ω–æ (–∑–∞–≥–ª—É—à–∫–∞).")
        bot.edit_message_text(f"–¢–æ–≤–∞—Ä ID {product_id} ({product['product_name']}) –°–•–í–ê–õ–ï–ù–û.",
                              call.message.chat.id, call.message.message_id, reply_markup=None)
        bot.send_message(product['seller_chat_id'], f"–í–∞—à —Ç–æ–≤–∞—Ä '{product['product_name']}' —Å—Ö–≤–∞–ª–µ–Ω–æ —Ç–∞ –±—É–¥–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!")
        # log_statistics('product_approved', ADMIN_CHAT_ID, product_id)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ö–≤–∞–ª–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É {product_id}: {e}")
        bot.answer_callback_query(call.id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ö–≤–∞–ª–µ–Ω–Ω—ñ.")
    finally:
        conn.close()


# --- XX. –§—É–Ω–∫—Ü—ñ—ó, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ (TODO) ---
# def process_product_input(message): ... (–æ–±—Ä–æ–±–∫–∞ –∫—Ä–æ–∫—ñ–≤ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É)
# def confirm_and_send_for_moderation(chat_id): ...
# def send_my_products(message): ...
# def send_channel_link(message): ...
# def handle_admin_callbacks(call): ...
# def handle_product_moderation_callbacks(call): ... (approve, reject, sold)
# def handle_user_block_callbacks(call): ...
# def calculate_and_record_commission(product_id, final_price): ...
# def notify_seller_about_commission(seller_chat_id, commission_amount, product_name): ...
# def get_conversation_history(chat_id, product_id=None, limit=10): ... (–¥–ª—è AI)
# def save_ai_conversation_message(chat_id, text, sender_type, product_id=None): ... (–¥–ª—è AI)


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î...")
    init_db()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    try:
        bot.infinity_polling(logger_level=logging.DEBUG, skip_pending=True) # skip_pending - —â–æ–± –Ω–µ –æ–±—Ä–æ–±–ª—è—Ç–∏ —Å—Ç–∞—Ä—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É polling: {e}", exc_info=True)

