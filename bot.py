import os
import telebot
from telebot import types
import logging
from datetime import datetime, timedelta
import re
import json
import requests
import time # –î–æ–¥–∞–Ω–æ —ñ–º–ø–æ—Ä—Ç time
from dotenv import load_dotenv
from flask import Flask, request, abort
from sqlalchemy import create_engine, text, inspect
from sqlalchemy.orm import sessionmaker

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –Ω–∞ —Å–∞–º–æ–º—É –ø–æ—á–∞—Ç–∫—É
load_dotenv()

# --- 1. –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ë–æ—Ç–∞ (–ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞) ---
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8039977178:AAGS-GbH-lhljGGG6OgJ2iMU_ncB-JzeOvU')
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID', '8184456641'))
CHANNEL_ID = int(os.getenv('CHANNEL_ID', '-1002535586055'))
MONOBANK_CARD_NUMBER = os.getenv('MONOBANK_CARD_NUMBER', '4441 1111 5302 1484')

# XAI (Grok) API –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
XAI_API_KEY = os.getenv('XAI_API_KEY', 'YOUR_XAI_API_KEY_HERE')
XAI_API_URL = os.getenv('XAI_API_URL', 'https://api.x.ai/v1/chat/completions')

# --- 2. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ Base —Ç–∞ User –∑ users.py
from users import Base, User

# ===================
# üì¶ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ë–∞–∑–∏ –î–∞–Ω–∏—Ö (SQLAlchemy)
# ===================
DATABASE_URL_RAW = os.getenv("DATABASE_URL")
if DATABASE_URL_RAW:
    DATABASE_URL = DATABASE_URL_RAW.strip()
    if not DATABASE_URL:
        raise ValueError("‚ùå DATABASE_URL –∑–∞–¥–∞–Ω–æ, –∞–ª–µ –ø–æ—Ä–æ–∂–Ω—î –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏!")
else:
    raise ValueError("‚ùå DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω–æ!")

engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)

def init_db():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –±–∞–∑—É –¥–∞–Ω–∏—Ö, —Å—Ç–≤–æ—Ä—é—é—á–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ —Ç–∞ –æ–Ω–æ–≤–ª—é—é—á–∏ —Å—Ö–µ–º—É."""
    try:
        Base.metadata.create_all(engine)
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞.")

        inspector = inspect(engine)
        if 'users' in inspector.get_table_names():
            existing_columns = [col['name'] for col in inspector.get_columns('users')]
            if 'user_status' not in existing_columns:
                logger.info("–ö–æ–ª–æ–Ω–∫–∞ 'user_status' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –¥–æ–¥–∞—é...")
                with engine.connect() as connection:
                    connection.execute(text('ALTER TABLE users ADD COLUMN user_status TEXT DEFAULT \'idle\''))
                    connection.commit()
                logger.info("–ö–æ–ª–æ–Ω–∫–∞ 'user_status' –¥–æ–¥–∞–Ω–∞ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ 'users'.")
            else:
                logger.info("–ö–æ–ª–æ–Ω–∫–∞ 'user_status' –≤–∂–µ —ñ—Å–Ω—É—î.")

            if 'user_session_data' not in existing_columns:
                logger.info("–ö–æ–ª–æ–Ω–∫–∞ 'user_session_data' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –¥–æ–¥–∞—é...")
                with engine.connect() as connection:
                    connection.execute(text('ALTER TABLE users ADD COLUMN user_session_data TEXT DEFAULT \'{}\''))
                    connection.commit()
                logger.info("–ö–æ–ª–æ–Ω–∫–∞ 'user_session_data' –¥–æ–¥–∞–Ω–∞ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ 'users'.")
            else:
                logger.info("–ö–æ–ª–æ–Ω–∫–∞ 'user_session_data' –≤–∂–µ —ñ—Å–Ω—É—î.")
        else:
            logger.info("–¢–∞–±–ª–∏—Ü—è 'users' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –í–æ–Ω–∞ –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø—É—Å–∫—É.")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∞–±–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}", exc_info=True)
        raise

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞–Ω–∏–º–∏ —Å–µ—Å—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---
def get_user_session_data(chat_id):
    session = Session()
    try:
        user = session.query(User).filter_by(chat_id=chat_id).first()
        if user and user.user_session_data:
            return json.loads(user.user_session_data)
        return {}
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å–µ—Å—ñ—ó –¥–ª—è {chat_id}: {e}")
        return {}
    finally:
        session.close()

def set_user_session_data(chat_id, data):
    session = Session()
    try:
        user = session.query(User).filter_by(chat_id=chat_id).first()
        if user:
            user.user_session_data = json.dumps(data)
            session.commit()
    except Exception as e:
        session.rollback()
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å–µ—Å—ñ—ó –¥–ª—è {chat_id}: {e}")
    finally:
        session.close()

def clear_user_session_data(chat_id):
    session = Session()
    try:
        user = session.query(User).filter_by(chat_id=chat_id).first()
        if user:
            user.user_session_data = '{}'
            session.commit()
    except Exception as e:
        session.rollback()
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å–µ—Å—ñ—ó –¥–ª—è {chat_id}: {e}")
    finally:
        session.close()

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ ---
def error_handler(func):
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ {func.__name__}: {e}", exc_info=True)
            chat_id_to_notify = ADMIN_CHAT_ID
            
            # Access the global 'bot' instance directly.
            # This relies on 'bot' being assigned globally after create_app() runs.
            _current_bot_instance = globals().get('bot') 

            if args:
                first_arg = args[0]
                if isinstance(first_arg, types.Message):
                    chat_id_to_notify = first_arg.chat.id
                elif isinstance(first_arg, types.CallbackQuery):
                    chat_id_to_notify = first_arg.message.chat.id
            
            try:
                if _current_bot_instance:
                    _current_bot_instance.send_message(ADMIN_CHAT_ID, f"üö® –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –±–æ—Ç—ñ!\n–§—É–Ω–∫—Ü—ñ—è: {func.__name__}\n–ü–æ–º–∏–ª–∫–∞: {e}\n–î–∏–≤—ñ—Ç—å—Å—è –¥–µ—Ç–∞–ª—ñ –≤ bot.log")
                    if chat_id_to_notify != ADMIN_CHAT_ID:
                        _current_bot_instance.send_message(chat_id_to_notify, "üòî –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∂–µ —Å–ø–æ–≤—ñ—â–µ–Ω–∏–π.")
                else:
                    logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É.")
            except Exception as e_notify:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {e_notify}")
    return wrapper

# --- –§—É–Ω–∫—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ —Ç–∞ –∑–∞–≥–∞–ª—å–Ω—ñ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---
@error_handler
def save_user(message_or_user):
    user = None
    chat_id = None

    if isinstance(message_or_user, types.Message):
        user = message_or_user.from_user
        chat_id = message.chat.id # message.chat.id –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    elif isinstance(message_or_user, types.User):
        user = message_or_user
        chat_id = user.id
    else:
        logger.warning(f"save_user –æ—Ç—Ä–∏–º–∞–≤ –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø: {type(message_or_user)}")
        return

    if not user or not chat_id:
        logger.warning("save_user: user –∞–±–æ chat_id –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ.")
        return

    session = Session()
    try:
        existing_user = session.query(User).filter_by(chat_id=chat_id).first()
        if existing_user:
            existing_user.username = user.username
            existing_user.first_name = user.first_name
            existing_user.last_name = user.last_name
            existing_user.last_activity = datetime.now()
        else:
            new_user = User(
                chat_id=chat_id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
                joined_at=datetime.now(),
                last_activity=datetime.now()
            )
            session.add(new_user)
        session.commit()
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id} –∑–±–µ—Ä–µ–∂–µ–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        session.rollback()
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}")
    finally:
        session.close()

@error_handler
def is_user_blocked(chat_id):
    session = Session()
    try:
        user = session.query(User).filter_by(chat_id=chat_id).first()
        return user and user.is_blocked
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è {chat_id}: {e}")
        return True
    finally:
        session.close()

@error_handler
def set_user_block_status(admin_id, chat_id, status):
    session = Session()
    try:
        user = session.query(User).filter_by(chat_id=chat_id).first()
        if user:
            user.is_blocked = status
            user.blocked_by = admin_id if status else None
            user.blocked_at = datetime.now() if status else None
            session.commit()
            return True
        return False
    except Exception as e:
        session.rollback()
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}")
        return False
    finally:
        session.close()

@error_handler
def generate_hashtags(description, num_hashtags=5):
    words = re.findall(r'\b\w+\b', description.lower())
    stopwords = set(['—è', '–º–∏', '—Ç–∏', '–≤–∏', '–≤—ñ–Ω', '–≤–æ–Ω–∞', '–≤–æ–Ω–æ', '–≤–æ–Ω–∏', '—Ü–µ', '—â–æ',
                     '—è–∫', '–¥–µ', '–∫–æ–ª–∏', '–∞', '—ñ', '—Ç–∞', '–∞–±–æ', '—á–∏', '–¥–ª—è', '–∑', '–Ω–∞',
                     '—É', '–≤', '–¥–æ', '–≤—ñ–¥', '–ø–æ', '–∑–∞', '–ø—Ä–∏', '–ø—Ä–æ', '–º—ñ–∂', '–ø—ñ–¥', '–Ω–∞–¥',
                     '–±–µ–∑', '—á–µ—Ä–µ–∑', '–¥—É–∂–µ', '—Ü–µ–π', '—Ç–æ–π', '–º—ñ–π', '—Ç–≤—ñ–π', '–Ω–∞—à', '–≤–∞—à',
                     '–ø—Ä–æ–¥–∞–º', '–ø—Ä–æ–¥–∞–º—Å—è', '–ø—Ä–æ–¥–∞—Ç–∏', '–ø—Ä–æ–¥–∞—é', '–ø—Ä–æ–¥–∞–∂', '–∫—É–ø–∏—Ç–∏', '–∫—É–ø–ª—é',
                     '–±—É', '–Ω–æ–≤–∏–π', '—Å—Ç–∞–Ω', '–º–æ–¥–µ–ª—å', '—Å–º', '–∫–≥', '–≥—Ä–Ω', 'uah', 'usd', 'eur', '–æ–¥–∏–Ω', '–¥–≤–∞', '—Ç—Ä–∏', '—á–æ—Ç–∏—Ä–∏', '–ø—è—Ç—å', '—à—ñ—Å—Ç—å', '—Å—ñ–º', '–≤—ñ—Å—ñ–º', '–¥–µ–≤—è—Ç—å', '–¥–µ—Å—è—Ç—å'])
    filtered_words = [word for word in words if len(word) > 2 and word not in stopwords]
    unique_words = list(set(filtered_words))
    hashtags = ['#' + word for word in unique_words[:num_hashtags]]
    return " ".join(hashtags) if hashtags else ""

@error_handler
def log_statistics(action, user_id=None, product_id=None, details=None):
    logger.info(f"STATISTIC: Action={action}, User={user_id}, Product={product_id}, Details={details}")

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---
def get_user_current_status(chat_id):
    session = Session()
    try:
        user = session.query(User).filter_by(chat_id=chat_id).first()
        return user.user_status if user else 'idle'
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}")
        return 'idle'
    finally:
        session.close()

def set_user_status(chat_id, status):
    session = Session()
    try:
        user = session.query(User).filter_by(chat_id=chat_id).first()
        if user:
            user.user_status = status
            session.commit()
    except Exception as e:
        session.rollback()
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id} –Ω–∞ {status}: {e}")
    finally:
        session.close()

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ FAQ ---
def add_faq_entry(question, answer):
    logger.warning("–§—É–Ω–∫—Ü—ñ—è add_faq_entry –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –≤ –ë–î.")
    return False

def get_faq_answer(question_text):
    logger.warning("–§—É–Ω–∫—Ü—ñ—è get_faq_answer –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –≤ –ë–î.")
    return None

def delete_faq_entry(faq_id):
    logger.warning("–§—É–Ω–∫—Ü—ñ—è delete_faq_entry –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –≤ –ë–î.")
    return False

def get_all_faq_entries():
    logger.warning("–§—É–Ω–∫—Ü—ñ—è get_all_faq_entries –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –≤ –ë–î.")
    return []

# --- Grok AI —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è ---
@error_handler
def get_grok_response(prompt, conversation_history=None):
    if not XAI_API_KEY or XAI_API_KEY == 'YOUR_XAI_API_KEY_HERE':
        logger.warning("XAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–∞–≥–ª—É—à–∫–∞.")
        return generate_elon_style_response(prompt)
    
    if not XAI_API_URL or not XAI_API_URL.startswith('http'):
        logger.error(f"XAI API URL –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π: '{XAI_API_URL}'. –í—ñ–Ω –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 'http://' –∞–±–æ 'https://'. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–∞–≥–ª—É—à–∫–∞.")
        return generate_elon_style_response(prompt)

    headers = {
        "Authorization": f"Bearer {XAI_API_KEY}",
        "Content-Type": "application/json"
    }

    system_prompt = {
        "role": "system",
        "content": (
            "–¢–∏ ‚Äî –∫–ª—ñ—î–Ω—Ç–æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–∏–π AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è Telegram –±–æ—Ç–∞ –ø—Ä–æ–¥–∞–∂—É —Ç–æ–≤–∞—Ä—ñ–≤. "
            "–¢–≤–æ—è –º–µ—Ç–∞ ‚Äî –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏, "
            "–≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ —ó—Ö–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –∑–∞–æ—Ö–æ—á—É–≤–∞—Ç–∏ –¥–æ –ø–æ–∫—É–ø–∫–∏, "
            "—ñ, –∑–∞ –ø–æ—Ç—Ä–µ–±–∏, –¥–æ–ø–æ–º–æ–≥—Ç–∏ —É –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞—Ö —â–æ–¥–æ —Ü—ñ–Ω–∏. "
            "–ó–∞–≤–∂–¥–∏ –±—É–¥—å –≤–≤—ñ—á–ª–∏–≤–∏–º, —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–º, —Ç–∞ –Ω–∞–º–∞–≥–∞–π—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É –ø—Ä–æ–¥–∞–∂–µ–º. "
            "–Ø–∫—â–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —Å—Ç–æ—Å—É—î—Ç—å—Å—è —á–æ–≥–æ—Å—å, –∫—Ä—ñ–º –ø—Ä–æ–¥–∞–∂—É, –∞–±–æ –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ —Ä–∞–º–∫–∏ —Ç–≤–æ—ó—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π, "
            "–∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ '–∂–∏–≤–æ–≥–æ' –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ñ—Ä–∞–∑—É '–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω–æ–º'. "
            "–ù–µ –≤–∏–≥–∞–¥—É–π —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏, —è–∫–æ—ó –Ω–µ–º–∞—î. "
            "–Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –æ–±–≥–æ–≤–æ—Ä–∏—Ç–∏ —Ü—ñ–Ω—É, –º–æ–∂–µ—à –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ '–∑—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –ø—Ä–æ–¥–∞–≤—Ü—é' –∞–±–æ '–∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—Ä–æ–¥–∞–≤—Ü–µ–º –¥–ª—è –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è'. "
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π —Ç–∞ –ø—Ä–∏–≤—ñ—Ç–Ω–∏–π —Ç–æ–Ω. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é."
        )
    }

    messages = [system_prompt]
    if conversation_history:
        messages.extend(conversation_history)
    
    messages.append({"role": "user", "content": prompt})

    payload = {
        "model": "grok-1",
        "messages": messages,
        "max_tokens": 300,
        "temperature": 0.7
    }

    try:
        response = requests.post(XAI_API_URL, headers=headers, json=payload, timeout=30)
        response.raise_for_status()
        
        data = response.json()
        if data.get("choices") and len(data["choices"]) > 0:
            content = data["choices"][0]["message"]["content"]
            logger.info(f"Grok –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞: {content[:100]}...")
            return content.strip()
        else:
            logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Grok: {data}")
            return generate_elon_style_response(prompt)

    except requests.exceptions.RequestException as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ HTTP –∑–∞–ø–∏—Ç—É –¥–æ Grok API: {e}")
        return generate_elon_style_response(prompt)
    except Exception as e:
        logger.error(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Grok: {e}")
        return generate_elon_style_response(prompt)

def generate_elon_style_response(prompt):
    responses = [
        "üöÄ –ì–º, —Ü—ñ–∫–∞–≤–µ –ø–∏—Ç–∞–Ω–Ω—è! –Ø–∫ —ñ –∑ SpaceX, —Ç—É—Ç –ø–æ—Ç—Ä—ñ–±–µ–Ω —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥. –©–æ —Å–∞–º–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?",
        "‚ö° –û—á–µ–≤–∏–¥–Ω–æ! –Ø–∫ –∫–∞–∂—É—Ç—å –≤ Tesla - –ø—Ä–æ—Å—Ç–æ—Ç–∞ —Ü–µ –≤–µ—Ä—à–∏–Ω–∞ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ. –î–∞–≤–∞–π—Ç–µ —Ä–æ–∑–±–µ—Ä–µ–º–æ—Å—è.",
        "ü§ñ *–¥—É–º–∞—î —è–∫ Neuralink* –í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤—É–≤–∞–ª–æ –º–æ—ó –Ω–µ–π—Ä–æ–Ω–∏! –û—Å—å —â–æ —è –¥—É–º–∞—é...",
        "üéØ –Ø–∫ —ñ –∑ X (–∫–æ–ª–∏—à–Ω—ñ–π Twitter), —ñ–Ω–æ–¥—ñ –∫—Ä–∞—â–µ –±—É—Ç–∏ –ø—Ä—è–º–æ–ª—ñ–Ω—ñ–π–Ω–∏–º. –°–∫–∞–∂—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ—à–µ?",
        "üî• –•–º–º, —Ü–µ –Ω–∞–≥–∞–¥—É—î –º–µ–Ω—ñ —á–∞—Å, –∫–æ–ª–∏ –º–∏ –∑–∞–ø—É—Å–∫–∞–ª–∏ Falcon Heavy. –°–∫–ª–∞–¥–Ω–æ, –∞–ª–µ –º–æ–∂–ª–∏–≤–æ!",
        "üí° –ê—Ö, –∫–ª–∞—Å–∏–∫–∞! –Ø–∫ —ñ –∑ Hyperloop - —Å–ø–æ—á–∞—Ç–∫—É –∑–¥–∞—î—Ç—å—Å—è –Ω–µ–º–æ–∂–ª–∏–≤–∏–º, –ø–æ—Ç—ñ–º –æ—á–µ–≤–∏–¥–Ω–∏–º.",
        "üåü –¶—ñ–∫–∞–≤–æ! –£ Boring Company –º–∏ –± –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∫–æ–ø–∞–ª–∏ —Ç—É–Ω–µ–ª—å –ø—ñ–¥ –ø—Ä–æ–±–ª–µ–º–æ—é. –ê —Ç—É—Ç...",
        "‚ö° –õ–æ–≥—ñ—á–Ω–æ! –Ø–∫ –∑–∞–≤–∂–¥–∏ –∫–∞–∂—É - —è–∫—â–æ —â–æ—Å—å –Ω–µ –≤–∏–±—É—Ö–∞—î, –∑–Ω–∞—á–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –Ω–∞–º–∞–≥–∞—î—à—Å—è üòÑ"
    ]
    
    import random
    base_response = random.choice(responses)
    
    prompt_lower = prompt.lower()
    if any(word in prompt_lower for word in ['—Ü—ñ–Ω–∞', '–≤–∞—Ä—Ç—ñ—Å—Ç—å', '–≥—Ä–æ—à—ñ']):
        return f"{base_response}\n\nüí∞ –©–æ–¥–æ —Ü—ñ–Ω–∏ - —è–∫ –≤ Tesla, –≤–∞–∂–ª–∏–≤–∞ —è–∫—ñ—Å—Ç—å, –∞ –Ω–µ —Ç—ñ–ª—å–∫–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å! –ú–æ–∂–ª–∏–≤–æ, –≤–∞—Ä—Ç–æ '–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω–æ–º' –¥–ª—è –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è?"
    elif any(word in prompt_lower for word in ['—Ñ–æ—Ç–æ', '–∫–∞—Ä—Ç–∏–Ω–∫–∞', '–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è']):
        return f"{base_response}\n\nüì∏ –§–æ—Ç–æ - —Ü–µ —è–∫ –ø–µ—Ä—à–∏–π –µ—Ç–∞–ø —Ä–∞–∫–µ—Ç–∏, –±–µ–∑ –Ω–∏—Ö –Ω—ñ–∫—É–¥–∏!"
    elif any(word in prompt_lower for word in ['–¥–æ—Å—Ç–∞–≤–∫–∞', '–≤—ñ–¥–ø—Ä–∞–≤–∫–∞']):
        return f"{base_response}\n\nüöö –î–æ—Å—Ç–∞–≤–∫–∞? –Ø–∫–±–∏ —É –Ω–∞—Å –±—É–≤ Hyperloop, —Ü–µ –± –∑–∞–π–Ω—è–ª–æ —Ö–≤–∏–ª–∏–Ω–∏! üòâ"
    elif any(word in prompt_lower for word in ['–ø—Ä–æ–¥–∞–∂', '–∫—É–ø—ñ–≤–ª—è']):
        return f"{base_response}\n\nü§ù –ü—Ä–æ–¥–∞–∂ - —Ü–µ —è–∫ –∑–∞–ø—É—Å–∫ —Ä–∞–∫–µ—Ç–∏: –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞, –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, —É—Å–ø—ñ—Ö!"
    
    return base_response

@error_handler
def save_conversation(chat_id, message_text, sender_type, product_id=None):
    logger.warning("–§—É–Ω–∫—Ü—ñ—è save_conversation –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –≤ –ë–î.")
    pass

@error_handler
def get_conversation_history(chat_id, limit=5):
    logger.warning("–§—É–Ω–∫—Ü—ñ—è get_conversation_history –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –≤ –ë–î.")
    return []

# --- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ (–º–æ–∂—É—Ç—å –±—É—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω–∏–º–∏, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∏ —î —Å—Ç–∞—Ç–∏—á–Ω–∏–º–∏) ---
main_menu_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu_markup.add(types.KeyboardButton("üî• –ü—Ä–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä"), types.KeyboardButton("üõí –ú–æ—ó —Ç–æ–≤–∞—Ä–∏"))
main_menu_markup.add(types.KeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞"), types.KeyboardButton("ü§ñ –ó–∞–ø–∏—Ç–∞—Ç–∏ AI"))
main_menu_markup.add(types.KeyboardButton("üéÅ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è"), types.KeyboardButton("üë®‚Äçüíª –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω–æ–º"))

# --- –§–∞–±—Ä–∏—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Flask-–¥–æ–¥–∞—Ç–∫—É —Ç–∞ TeleBot ---
def create_app():
    _app = Flask(__name__)
    _bot = telebot.TeleBot(TOKEN)

    # --- –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Webhook ---
    _heroku_app_name = os.getenv('HEROKU_APP_NAME', 'telegram-ad-bot-2025')
    # –ë–∞–∑–æ–≤–∏–π —à–ª—è—Ö –≤–µ–±—Ö—É–∫–∞
    _webhook_path_base = "" # –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫
    # –ü–æ–≤–Ω–∏–π —à–ª—è—Ö –≤–µ–±—Ö—É–∫–∞, —è–∫–∏–π Telegram –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ (–≤–∫–ª—é—á–∞—î —Ç–æ–∫–µ–Ω)
    _webhook_path_full = f"{_webhook_path_base}{TOKEN}" # –¢–µ–ø–µ—Ä —Ü–µ –±—É–¥–µ –ø—Ä–æ—Å—Ç–æ TOKEN, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "8039977178:AAGS-GbH-lhljGGG6OgJ2iMU_ncB-JzeOvU"
    _heroku_app_url = f"https://{_heroku_app_name}.herokuapp.com"
    # URL, —è–∫–∏–π –º–∏ –≤—Å—Ç–∞–Ω–æ–≤–∏–º–æ –¥–ª—è Telegram
    _webhook_url = f"{_heroku_app_url}/{_webhook_path_full}" # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω–∏–π URL –∑ —Ç–æ–∫–µ–Ω–æ–º —É –∫–æ—Ä–µ–Ω—ñ

    # --- –¢–ï–°–¢–û–í–ò–ô –ú–ê–†–®–†–£–¢ ---
    @_app.route('/')
    def hello_world():
        return 'Hello, world! Bot is running.'

    # --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–¢–µ–ø–µ—Ä –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ create_app) ---

    # –ú–∞—Ä—à—Ä—É—Ç Flask —Ç–µ–ø–µ—Ä —Ç–æ—á–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î URL –≤–µ–±—Ö—É–∫–∞ Telegram
    @_app.route(f"/{TOKEN}", methods=['POST']) # –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ —Ç–æ—á–Ω–∏–π —à–ª—è—Ö –∑ —Ç–æ–∫–µ–Ω–æ–º
    def webhook():
        logger.info("Webhook received!") # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        
        if request.headers.get('content-type') == 'application/json':
            json_string = request.get_data().decode('utf-8')
            update = telebot.types.Update.de_json(json_string)
            _bot.process_new_updates([update])
            return '', 200
        return 'Unsupported Media Type', 415

    @_bot.message_handler(commands=['start'])
    @error_handler
    def send_welcome(message):
        chat_id = message.chat.id
        if is_user_blocked(chat_id):
            _bot.send_message(chat_id, "‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
            return

        save_user(message)
        set_user_status(chat_id, 'idle')
        clear_user_session_data(chat_id)
        log_statistics('start', chat_id)

        welcome_text = (
            "üõçÔ∏è *–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ SellerBot!*\n\n"
            "–Ø –≤–∞—à —Ä–æ–∑—É–º–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É —Ç–∞ –∫—É–ø—ñ–≤–ª—ñ —Ç–æ–≤–∞—Ä—ñ–≤. "
            "–ú–µ–Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î Grok AI –≤ —Å—Ç–∏–ª—ñ –Ü–ª–æ–Ω–∞ –ú–∞—Å–∫–∞! üöÄ\n\n"
            "–©–æ —è –≤–º—ñ—é:\n"
            "üì¶ –î–æ–ø–æ–º–∞–≥–∞—é —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n"
            "ü§ù –í–µ–¥—É –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∏ —Ç–∞ –¥–æ–º–æ–≤–ª–µ–Ω–æ—Å—Ç—ñ\n"
            "üìç –û–±—Ä–æ–±–ª—è—é –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é —Ç–∞ —Ñ–æ—Ç–æ\n"
            "üí∞ –°–ª—ñ–¥–∫—É—é –∑–∞ –∫–æ–º—ñ—Å—ñ—è–º–∏\n"
            "üéØ –ê–Ω–∞–ª—ñ–∑—É—é —Ä–∏–Ω–æ–∫ —Ç–∞ —Ü—ñ–Ω–∏\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ!"
        )
        _bot.send_message(chat_id, welcome_text, reply_markup=main_menu_markup, parse_mode='Markdown')

    @_bot.message_handler(commands=['admin'])
    @error_handler
    def admin_panel(message):
        if message.chat.id != ADMIN_CHAT_ID:
            _bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É.")
            return

        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            types.InlineKeyboardButton("‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó", callback_data="admin_pending"),
            types.InlineKeyboardButton("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users"),
            types.InlineKeyboardButton("üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è", callback_data="admin_block"),
            types.InlineKeyboardButton("üí∞ –ö–æ–º—ñ—Å—ñ—ó", callback_data="admin_commissions"),
            types.InlineKeyboardButton("ü§ñ AI –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_ai_stats"),
            types.InlineKeyboardButton("üìö –ö–µ—Ä—É–≤–∞–Ω–Ω—è FAQ", callback_data="admin_faq_menu")
        )
        _bot.send_message(message.chat.id, "üîß *–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å*", reply_markup=markup, parse_mode='Markdown')

    @_bot.message_handler(func=lambda message: message.text == "ü§ñ –ó–∞–ø–∏—Ç–∞—Ç–∏ AI")
    @error_handler
    def ask_ai_command(message):
        if is_user_blocked(message.chat.id):
            _bot.send_message(message.chat.id, "‚ùå –í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é.")
            return
        set_user_status(message.chat.id, 'ai_chat')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(types.KeyboardButton("‚ùå –í–∏–π—Ç–∏ –∑ AI —á–∞—Ç—É"))
        _bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à AI –ø–æ–º—ñ—á–Ω–∏–∫. –ó–∞–¥–∞–π—Ç–µ –º–µ–Ω—ñ –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏, –ø—Ä–æ–¥–∞–∂—ñ, –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ø—ñ–ª–∫—É–π—Ç–µ—Å—å! –î–ª—è –≤–∏—Ö–æ–¥—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É.", reply_markup=markup)

    @_bot.message_handler(func=lambda message: message.text == "‚ùå –í–∏–π—Ç–∏ –∑ AI —á–∞—Ç—É")
    @error_handler
    def stop_ai_command(message):
        set_user_status(message.chat.id, 'idle')
        _bot.send_message(message.chat.id, "–í–∏ –≤–∏–π—à–ª–∏ –∑ —Ä–µ–∂–∏–º—É AI-—á–∞—Ç—É. –ß–∏–º —â–µ –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?",
                         reply_markup=main_menu_markup)

    @_bot.message_handler(func=lambda message: message.text == "üë®‚Äçüíª –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω–æ–º")
    @error_handler
    def chat_with_human_command(message):
        if is_user_blocked(message.chat.id):
            _bot.send_message(message.chat.id, "‚ùå –í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é.")
            return
        
        set_user_status(message.chat.id, 'waiting_human_operator')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(types.KeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —á–∞—Ç –∑ –∞–¥–º—ñ–Ω–æ–º"))
        _bot.send_message(message.chat.id, "–í–∞—à –∑–∞–ø–∏—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —á–∞—Ç—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É.", reply_markup=markup)
        
        user = message.from_user
        username_info = f"@{user.username}" if user.username else "–±–µ–∑ –Ω—ñ–∫–Ω–µ–π–º—É"
        user_link = f"tg://user?id={user.id}"

        admin_message_text = (
            f"üö® *–ù–û–í–ò–ô –ó–ê–ü–ò–¢: –ß–∞—Ç –∑ –ª—é–¥–∏–Ω–æ—é!* üö®\n\n"
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: [{user.first_name} {user.last_name}]({user_link}) ({username_info})\n"
            f"ID: `{user.id}`\n\n"
            f"**–û—Å—Ç–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑–º–æ–≤–∏ (AI):**\n"
        )
        
        history = get_conversation_history(message.chat.id, limit=5)
        if history:
            for entry in history:
                role = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á" if entry['role'] == 'user' else "–ë–æ—Ç (AI)"
                admin_message_text += f"*{role}*: {entry['content']}\n"
        else:
            admin_message_text += "–Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑–º–æ–≤–∏ –≤—ñ–¥—Å—É—Ç–Ω—è."
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–ø–∏—Ç", callback_data=f"accept_human_chat_{message.chat.id}"))
        
        _bot.send_message(ADMIN_CHAT_ID, admin_message_text, parse_mode='Markdown')
        _bot.send_message(ADMIN_CHAT_ID, "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–ø–∏—Ç', —â–æ–± –ø–æ—á–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.", reply_markup=markup)

    @_bot.message_handler(func=lambda message: message.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —á–∞—Ç –∑ –∞–¥–º—ñ–Ω–æ–º")
    @error_handler
    def stop_human_chat_command(message):
        if get_user_current_status(message.chat.id) == 'waiting_human_operator':
            set_user_status(message.chat.id, 'idle')
            _bot.send_message(message.chat.id, "–í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –∑–Ω–æ–≤—É.",
                             reply_markup=main_menu_markup)
            _bot.send_message(ADMIN_CHAT_ID, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.first_name} ({message.chat.id}) –∑–∞–≤–µ—Ä—à–∏–≤ —á–∞—Ç –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.")
        else:
            _bot.send_message(message.chat.id, "–í–∏ –∑–∞—Ä–∞–∑ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ —á–∞—Ç—ñ –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.")

    @_bot.callback_query_handler(func=lambda call: call.data.startswith('accept_human_chat_'))
    @error_handler
    def accept_human_chat_callback(call):
        if call.message.chat.id != ADMIN_CHAT_ID:
            _bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
            return

        user_id_to_chat = int(call.data.split('_')[3])
        
        if get_user_current_status(user_id_to_chat) == 'waiting_human_operator':
            set_user_status(ADMIN_CHAT_ID, f'chatting_with_user_{user_id_to_chat}')
            _bot.edit_message_text(f"–í–∏ –ø—Ä–∏–π–Ω—è–ª–∏ –∑–∞–ø–∏—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{user_id_to_chat}`. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ –Ω–∏–º.",
                                  chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='Markdown')
            _bot.send_message(user_id_to_chat, "‚úÖ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ —á–∞—Ç—É! –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è.")
        else:
            _bot.edit_message_text(f"–ó–∞–ø–∏—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{user_id_to_chat}` –≤–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∏–π –∞–±–æ –±—É–≤ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π.",
                                  chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='Markdown')
        _bot.answer_callback_query(call.id)


    @_bot.message_handler(func=lambda message: message.text == "üéÅ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è")
    @error_handler
    def personal_offer_command(message):
        if is_user_blocked(message.chat.id):
            _bot.send_message(message.chat.id, "‚ùå –í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é.")
            return
        set_user_status(message.chat.id, 'awaiting_personal_offer_details')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(types.KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é"))
        _bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é. –©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏?", reply_markup=markup)

    @_bot.message_handler(func=lambda message: message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é")
    @error_handler
    def cancel_personal_offer(message):
        set_user_status(message.chat.id, 'idle')
        _bot.send_message(message.chat.id, "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_markup)

    # --- –ü–æ—Ç—ñ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ---
    ADD_PRODUCT_STEPS = {
        1: {'name': 'waiting_name', 'prompt': "üìù *–ö—Ä–æ–∫ 1/5: –ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É*\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:", 'next_step': 2},
        2: {'name': 'waiting_price', 'prompt': "üí∞ *–ö—Ä–æ–∫ 2/5: –¶—ñ–Ω–∞*\n\n–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 100.50) –∞–±–æ '–î–æ–≥–æ–≤—ñ—Ä–Ω–∞':", 'next_step': 3},
        3: {'name': 'waiting_photos', 'prompt': "üì∏ *–ö—Ä–æ–∫ 3/5: –§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó*\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–æ 5 —Ñ–æ—Ç–æ (–ø–æ –æ–¥–Ω–æ–º—É). –ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ - '–î–∞–ª—ñ':", 'next_step': 4, 'allow_skip': True, 'skip_button': '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ñ–æ—Ç–æ'},
        4: {'name': 'waiting_location', 'prompt': "üìç *–ö—Ä–æ–∫ 4/5: –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è*\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏':", 'next_step': 5, 'allow_skip': True, 'skip_button': '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é'},
        5: {'name': 'waiting_description', 'prompt': "‚úçÔ∏è *–ö—Ä–æ–∫ 5/5: –û–ø–∏—Å*\n\n–ù–∞–ø–∏—à—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É (–º—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤) –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏':", 'next_step': 'confirm', 'allow_skip': True, 'skip_button': '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –æ–ø–∏—Å'}
    }

    @_bot.message_handler(func=lambda message: message.text == "üî• –ü—Ä–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä")
    @error_handler
    def start_add_product_flow(message):
        chat_id = message.chat.id
        session = Session()
        try:
            pending_count = 0
            logger.warning("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞ (–Ω–µ–º–∞—î –º–æ–¥–µ–ª—ñ Product).")

            if pending_count >= 3:
                _bot.send_message(chat_id,
                                "‚ö†Ô∏è –£ –≤–∞—Å –≤–∂–µ —î 3 —Ç–æ–≤–∞—Ä–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó.\n"
                                "–î–æ—á–µ–∫–∞–π—Ç–µ—Å—è —Ä–æ–∑–≥–ª—è–¥—É –ø–æ—Ç–æ—á–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –ø–µ—Ä–µ–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º –Ω–æ–≤–∏—Ö.",
                                reply_markup=main_menu_markup)
                return
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –¥–ª—è {chat_id}: {e}")
            _bot.send_message(chat_id, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", reply_markup=main_menu_markup)
            return
        finally:
            session.close()

        initial_data = {
            'step_number': 1, 
            'data': {
                'photos': [], 
                'geolocation': None,
                'product_name': '',
                'price': '',
                'description': ''
            }
        }
        set_user_session_data(chat_id, initial_data)
        set_user_status(chat_id, 'adding_product_step_1')
        send_product_step_message(chat_id, _bot)
        log_statistics('start_add_product', chat_id)

    @error_handler
    def send_product_step_message(chat_id, bot_instance):
        user_session = get_user_session_data(chat_id)
        current_step_number = user_session.get('step_number', 1)
        
        if current_step_number not in ADD_PRODUCT_STEPS:
            logger.error(f"–ù–µ–¥—ñ–π—Å–Ω–∏–π –Ω–æ–º–µ—Ä –∫—Ä–æ–∫—É {current_step_number} –¥–ª—è {chat_id}. –°–∫–∏–¥–∞—é –ø—Ä–æ—Ü–µ—Å.")
            bot_instance.send_message(chat_id, "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑ –∫—Ä–æ–∫–æ–º. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –∑–Ω–æ–≤—É.", reply_markup=main_menu_markup)
            set_user_status(chat_id, 'idle')
            clear_user_session_data(chat_id)
            return

        step_config = ADD_PRODUCT_STEPS[current_step_number]
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        
        if step_config['name'] == 'waiting_photos':
            markup.add(types.KeyboardButton("–î–∞–ª—ñ"), types.KeyboardButton(step_config['skip_button']))
        elif step_config['name'] == 'waiting_location':
            markup.add(types.KeyboardButton("üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True))
            markup.add(types.KeyboardButton(step_config['skip_button']))
        elif step_config['name'] == 'waiting_description':
            markup.add(types.KeyboardButton("–î–∞–ª—ñ"), types.KeyboardButton(step_config['skip_button'])) 
        
        markup.add(types.KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è"))
        
        bot_instance.send_message(chat_id, step_config['prompt'], parse_mode='Markdown', reply_markup=markup)

    @error_handler
    def process_product_step(message, bot_instance):
        chat_id = message.chat.id
        current_user_status = get_user_current_status(chat_id)
        user_session = get_user_session_data(chat_id)

        if 'step_number' not in user_session:
            bot_instance.send_message(chat_id, "–í–∏–±–∞—á—Ç–µ, –≤–∞—à –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –±—É–ª–æ —Å–∫–∏–Ω—É—Ç–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑–Ω–æ–≤—É.", reply_markup=main_menu_markup)
            set_user_status(chat_id, 'idle')
            clear_user_session_data(chat_id)
            return

        current_step_number = user_session['step_number']
        step_config = ADD_PRODUCT_STEPS[current_step_number]
        user_text = message.text if message.content_type == 'text' else ""

        if user_text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è":
            clear_user_session_data(chat_id)
            bot_instance.send_message(chat_id, "–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_markup)
            set_user_status(chat_id, 'idle')
            return

        if step_config.get('allow_skip') and user_text == step_config.get('skip_button'):
            if step_config['name'] == 'waiting_description':
                user_session['data']['description'] = ""
            set_user_session_data(chat_id, user_session)
            go_to_next_step(chat_id, bot_instance)
            return

        if step_config['name'] == 'waiting_name':
            if user_text and 3 <= len(user_text) <= 100:
                user_session['data']['product_name'] = user_text
                user_session['step_number'] = 2
                set_user_session_data(chat_id, user_session)
                set_user_status(chat_id, 'adding_product_step_2')
                send_product_step_message(chat_id, bot_instance)
            else:
                bot_instance.send_message(chat_id, "–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ 3 –¥–æ 100 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")

        elif step_config['name'] == 'waiting_price':
            if user_text and len(user_text) <= 50:
                user_session['data']['price'] = user_text
                user_session['step_number'] = 3
                set_user_session_data(chat_id, user_session)
                set_user_status(chat_id, 'adding_product_step_3')
                send_product_step_message(chat_id, bot_instance)
            else:
                bot_instance.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Ü—ñ–Ω—É (–¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤) –∞–±–æ '–î–æ–≥–æ–≤—ñ—Ä–Ω–∞':")

        elif step_config['name'] == 'waiting_photos':
            if user_text == "–î–∞–ª—ñ":
                user_session['step_number'] = 4
                set_user_session_data(chat_id, user_session)
                set_user_status(chat_id, 'adding_product_step_4')
                send_product_step_message(chat_id, bot_instance)
            else:
                pass 

        elif step_config['name'] == 'waiting_location':
            bot_instance.send_message(chat_id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é'.")

        elif step_config['name'] == 'waiting_description':
            if user_text == "–î–∞–ª—ñ":
                if not user_session['data']['description']:
                    user_session['data']['description'] = ""
                set_user_session_data(chat_id, user_session)
                set_user_status(chat_id, 'confirm_product')
                confirm_and_send_for_moderation(chat_id, bot_instance)
            elif user_text and 10 <= len(user_text) <= 1000:
                user_session['data']['description'] = user_text
                set_user_session_data(chat_id, user_session)
                set_user_status(chat_id, 'confirm_product')
                confirm_and_send_for_moderation(chat_id, bot_instance)
            else:
                bot_instance.send_message(chat_id, "–û–ø–∏—Å –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π (–º—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤) –∞–±–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª—ñ–≤). –ù–∞–ø–∏—à—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'/'–î–∞–ª—ñ':")

    @error_handler
    def go_to_next_step(chat_id, bot_instance):
        user_session = get_user_session_data(chat_id)
        current_step_number = user_session.get('step_number', 1)
        
        if current_step_number not in ADD_PRODUCT_STEPS:
            logger.error(f"–ù–µ–¥—ñ–π—Å–Ω–∏–π –Ω–æ–º–µ—Ä –∫—Ä–æ–∫—É {current_step_number} –¥–ª—è {chat_id} –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ. –°–∫–∏–¥–∞—é –ø—Ä–æ—Ü–µ—Å.")
            bot_instance.send_message(chat_id, "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑ –∫—Ä–æ–∫–æ–º. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –∑–Ω–æ–≤—É.", reply_markup=main_menu_markup)
            set_user_status(chat_id, 'idle')
            clear_user_session_data(chat_id)
            return

        next_step_info = ADD_PRODUCT_STEPS[current_step_number]
        next_step_number = next_step_info['next_step']
        
        if next_step_number == 'confirm':
            set_user_status(chat_id, 'confirm_product')
            confirm_and_send_for_moderation(chat_id, bot_instance)
        else:
            user_session['step_number'] = next_step_number
            set_user_session_data(chat_id, user_session)
            set_user_status(chat_id, f'adding_product_step_{next_step_number}')
            send_product_step_message(chat_id, bot_instance)

    @_bot.message_handler(content_types=['photo'], func=lambda message: get_user_current_status(message.chat.id) == 'adding_product_step_3')
    @error_handler
    def process_product_photo(message):
        chat_id = message.chat.id
        user_session = get_user_session_data(chat_id)

        if len(user_session['data']['photos']) < 5:
            file_id = message.photo[-1].file_id
            user_session['data']['photos'].append(file_id)
            set_user_session_data(chat_id, user_session)
            photos_count = len(user_session['data']['photos'])
            _bot.send_message(chat_id, f"‚úÖ –§–æ—Ç–æ {photos_count}/5 –¥–æ–¥–∞–Ω–æ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ'")
        else:
            _bot.send_message(chat_id, "–ú–∞–∫—Å–∏–º—É–º 5 —Ñ–æ—Ç–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.")

    @_bot.message_handler(content_types=['location'], func=lambda message: get_user_current_status(message.chat.id) == 'adding_product_step_4')
    @error_handler
    def process_product_location(message):
        chat_id = message.chat.id
        user_session = get_user_session_data(chat_id)

        user_session['data']['geolocation'] = {
            'latitude': message.location.latitude,
            'longitude': message.location.longitude
        }
        set_user_session_data(chat_id, user_session)
        _bot.send_message(chat_id, "‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—é –¥–æ–¥–∞–Ω–æ!")
        user_session['step_number'] = 5
        set_user_session_data(chat_id, user_session)
        set_user_status(chat_id, 'adding_product_step_5')
        send_product_step_message(chat_id, _bot)

    @error_handler
    def confirm_and_send_for_moderation(chat_id, bot_instance):
        data = get_user_session_data(chat_id)['data']
        
        session = Session()
        product_id = None
        try:
            user_info = bot_instance.get_chat(chat_id)
            seller_username = user_info.username if user_info.username else None

            logger.warning("–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –≤ –ë–î —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ (–Ω–µ–º–∞—î –º–æ–¥–µ–ª—ñ Product).")
            product_id = 99999

            bot_instance.send_message(chat_id, 
                f"‚úÖ –¢–æ–≤–∞—Ä '{data['product_name']}' –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é! (ID: {product_id})\n"
                f"–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.",
                reply_markup=main_menu_markup)
            
            send_product_for_admin_review(product_id, data, seller_chat_id=chat_id, seller_username=seller_username, bot_instance=bot_instance)
            
            clear_user_session_data(chat_id)
            
            log_statistics('product_added', chat_id, product_id)
            set_user_status(chat_id, 'idle')
            
        except Exception as e:
            session.rollback()
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É: {e}")
            bot_instance.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        finally:
            session.close()

    @error_handler
    def send_product_for_admin_review(product_id, data, seller_chat_id, seller_username, bot_instance):
        hashtags = generate_hashtags(data['description'])
        review_text = (
            f"üì¶ *–ù–æ–≤–∏–π —Ç–æ–≤–∞—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é*\n\n"
            f"üÜî ID: {product_id}\n"
            f"üìù –ù–∞–∑–≤–∞: {data['product_name']}\n"
            f"üí∞ –¶—ñ–Ω–∞: {data['price']}\n"
            f"üìÑ –û–ø–∏—Å: {data['description'][:500]}...\n"
            f"üì∏ –§–æ—Ç–æ: {len(data['photos'])} —à—Ç.\n"
            f"üìç –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è: {'–ü—Ä–∏—Å—É—Ç–Ω—è' if data['geolocation'] else '–í—ñ–¥—Å—É—Ç–Ω—è'}\n"
            f"üè∑Ô∏è –•–µ—à—Ç–µ–≥–∏: {hashtags}\n\n"
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü—å: [{'@' + seller_username if seller_username else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}](tg://user?id={seller_chat_id})"
        )
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"approve_{product_id}"),
            types.InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{product_id}")
        )
        
        try:
            admin_msg = None
            if data['photos']:
                media_group = []
                media_group.append(types.InputMediaPhoto(data['photos'][0], caption=review_text, parse_mode='Markdown'))
                for photo_id in data['photos'][1:]:
                    media_group.append(types.InputMediaPhoto(photo_id))
                
                sent_admin_messages = bot_instance.send_media_group(ADMIN_CHAT_ID, media_group)
                admin_msg = sent_admin_messages[0]
            else:
                admin_msg = bot_instance.send_message(ADMIN_CHAT_ID, review_text, parse_mode='Markdown')

            if admin_msg:
                logger.warning(f"admin_message_id –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id} –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ (–Ω–µ–º–∞—î –º–æ–¥–µ–ª—ñ Product).")

                bot_instance.send_message(ADMIN_CHAT_ID, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=markup,
                                 reply_to_message_id=admin_msg.message_id)
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ç–æ–≤–∞—Ä—É {product_id} –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}", exc_info=True)


    # --- –û–±—Ä–æ–±–Ω–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ---
    @_bot.message_handler(func=lambda message: True, content_types=['text', 'photo', 'location'])
    @error_handler
    def handle_messages(message):
        chat_id = message.chat.id
        user_text = message.text if message.content_type == 'text' else ""
        current_user_status = get_user_current_status(chat_id)

        if is_user_blocked(chat_id):
            _bot.send_message(chat_id, "‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
            return
        
        save_user(message)

        if message.content_type == 'photo' and current_user_status == 'adding_product_step_3':
            process_product_photo(message)
            return
        if message.content_type == 'location' and current_user_status == 'adding_product_step_4':
            process_product_location(message)
            return

        if current_user_status.startswith('adding_product_step_') or current_user_status == 'confirm_product':
            process_product_step(message, _bot)
            return

        if str(chat_id) == str(ADMIN_CHAT_ID) and current_user_status.startswith('chatting_with_user_'):
            target_user_id = int(current_user_status.split('_')[3])
            try:
                _bot.send_message(target_user_id, f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {user_text}")
                _bot.send_message(chat_id, "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞ –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_user_id}: {e}")
                _bot.send_message(chat_id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É. –ú–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞.")
            return

        if current_user_status == 'awaiting_personal_offer_details':
            if user_text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é":
                set_user_status(chat_id, 'idle')
                _bot.send_message(chat_id, "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_markup)
                return
            
            user = message.from_user
            username_info = f"@{user.username}" if user.username else "–±–µ–∑ –Ω—ñ–∫–Ω–µ–π–º—É"
            user_link = f"tg://user?id={user.id}"
            
            admin_offer_text = (
                f"üéÅ *–ù–û–í–ê –ü–ï–†–°–û–ù–ê–õ–¨–ù–ê –ü–†–û–ü–û–ó–ò–¶–Ü–Ø!* üéÅ\n\n"
                f"–í—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: [{user.first_name} {user.last_name}]({user_link}) ({username_info})\n"
                f"ID: `{user.id}`\n\n"
                f"**–î–µ—Ç–∞–ª—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó:**\n{user_text}\n\n"
                f"–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –¥–ª—è –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è."
            )
            _bot.send_message(ADMIN_CHAT_ID, admin_offer_text, parse_mode='Markdown')
            _bot.send_message(chat_id, "‚úÖ –í–∞—à—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û—á—ñ–∫—É–π—Ç–µ –∑–≤'—è–∑–∫—É!", reply_markup=main_menu_markup)
            set_user_status(chat_id, 'idle')
            return

        if current_user_status == 'ai_chat':
            if user_text == "‚ùå –í–∏–π—Ç–∏ –∑ AI —á–∞—Ç—É":
                stop_ai_command(message)
            else:
                faq_answer = get_faq_answer(user_text)
                if faq_answer:
                    _bot.send_message(chat_id, f"üìö *–û—Å—å —â–æ —è –∑–Ω–∞–π—à–æ–≤ —É –Ω–∞—à—ñ–π –±–∞–∑—ñ –∑–Ω–∞–Ω—å:*\n\n{faq_answer}", parse_mode='Markdown')
                    save_conversation(chat_id, user_text, 'user')
                    save_conversation(chat_id, faq_answer, 'ai')
                else:
                    save_conversation(chat_id, user_text, 'user')
                    ai_reply = get_grok_response(user_text, get_conversation_history(chat_id, limit=10))
                    save_conversation(chat_id, ai_reply, 'ai')
                    _bot.send_message(chat_id, f"ü§ñ {ai_reply}")
            return

        if chat_id == ADMIN_CHAT_ID:
            if current_user_status == 'awaiting_faq_question':
                admin_session_data = get_user_session_data(ADMIN_CHAT_ID)
                admin_session_data['faq_question'] = user_text
                set_user_session_data(ADMIN_CHAT_ID, admin_session_data)

                set_user_status(ADMIN_CHAT_ID, 'awaiting_faq_answer')
                _bot.send_message(ADMIN_CHAT_ID, "–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è:")
                return
            elif current_user_status == 'awaiting_faq_answer':
                admin_session_data = get_user_session_data(ADMIN_CHAT_ID)
                question = admin_session_data.get('faq_question')
                answer = user_text
                
                if add_faq_entry(question, answer):
                    _bot.send_message(ADMIN_CHAT_ID, "‚úÖ –ü–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ FAQ.")
                else:
                    _bot.send_message(ADMIN_CHAT_ID, "‚ùå –ü–æ–º–∏–ª–∫–∞: –¢–∞–∫–µ –ø–∏—Ç–∞–Ω–Ω—è –≤–∂–µ —ñ—Å–Ω—É—î –≤ FAQ.")
                
                set_user_status(ADMIN_CHAT_ID, 'idle')
                clear_user_session_data(ADMIN_CHAT_ID)
                send_admin_faq_menu_after_action(message, _bot)
                return
            elif current_user_status == 'awaiting_faq_delete_id':
                try:
                    faq_id = int(user_text)
                    if delete_faq_entry(faq_id):
                        _bot.send_message(ADMIN_CHAT_ID, f"‚úÖ –ü–∏—Ç–∞–Ω–Ω—è –∑ ID {faq_id} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ FAQ.")
                    else:
                        _bot.send_message(ADMIN_CHAT_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞: –ü–∏—Ç–∞–Ω–Ω—è –∑ ID {faq_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                except ValueError:
                    _bot.send_message(ADMIN_CHAT_ID, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω–∏–π —á–∏—Å–ª–æ–≤–∏–π ID.")
                
                set_user_status(ADMIN_CHAT_ID, 'idle')
                send_admin_faq_menu_after_action(message, _bot)
                return
            elif current_user_status == 'awaiting_user_for_block_unblock':
                process_user_for_block_unblock(message, _bot)
                return

        if user_text == "üî• –ü—Ä–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä":
            start_add_product_flow(message)
        elif user_text == "üõí –ú–æ—ó —Ç–æ–≤–∞—Ä–∏":
            send_my_products(message, _bot)
        elif user_text == "‚ùì –î–æ–ø–æ–º–æ–≥–∞":
            send_help_message(message, _bot)
        elif user_text == "üí∞ –ö–æ–º—ñ—Å—ñ—è":
            send_commission_info(message, _bot)
        elif user_text == "üì∫ –ù–∞—à –∫–∞–Ω–∞–ª":
            send_channel_link(message, _bot)
        elif user_text == "ü§ñ –ó–∞–ø–∏—Ç–∞—Ç–∏ AI":
            ask_ai_command(message)
        elif user_text == "üë®‚Äçüíª –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω–æ–º":
            chat_with_human_command(message)
        elif user_text == "üéÅ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è":
            personal_offer_command(message)
        elif message.content_type == 'text':
            _bot.send_message(chat_id, "–Ø –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤ –≤–∞—à –∑–∞–ø–∏—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å 'ü§ñ –ó–∞–ø–∏—Ç–∞—Ç–∏ AI', —â–æ–± –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ –º–æ—ó–º —à—Ç—É—á–Ω–∏–º —ñ–Ω—Ç–µ–ª–µ–∫—Ç–æ–º.", reply_markup=main_menu_markup)
        elif message.content_type == 'photo':
            _bot.send_message(chat_id, "–Ø –æ—Ç—Ä–∏–º–∞–≤ –≤–∞—à–µ —Ñ–æ—Ç–æ, –∞–ª–µ –Ω–µ –∑–Ω–∞—é, —â–æ –∑ –Ω–∏–º —Ä–æ–±–∏—Ç–∏ –ø–æ–∑–∞ –ø—Ä–æ—Ü–µ—Å–æ–º –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É. ü§î")
        elif message.content_type == 'location':
            _bot.send_message(chat_id, f"–Ø –±–∞—á—É –≤–∞—à—É –≥–µ–æ—Ç–æ—á–∫—É: {message.location.latitude}, {message.location.longitude}. –Ø–∫ —è –º–æ–∂—É —ó—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏?")
        else:
            _bot.send_message(chat_id, "–Ø –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤ –≤–∞—à –∑–∞–ø–∏—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

    # --- –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---
    @error_handler
    def send_my_products(message, bot_instance):
        chat_id = message.chat.id
        session = Session()
        try:
            user_products = []
            logger.warning("–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ (–Ω–µ–º–∞—î –º–æ–¥–µ–ª—ñ Product).")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}")
            bot_instance.send_message(chat_id, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.")
            return
        finally:
            session.close()

        if user_products:
            response_parts = ["üìã *–í–∞—à—ñ —Ç–æ–≤–∞—Ä–∏:*\n\n"]
            for i, product in enumerate(user_products, 1):
                status_emoji = {
                    'pending': '‚è≥',
                    'approved': '‚úÖ',
                    'rejected': '‚ùå',
                    'sold': 'üí∞',
                    'expired': 'üóëÔ∏è'
                }
                status_ukr = {
                    'pending': '–Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ',
                    'approved': '–æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ',
                    'rejected': '–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ',
                    'sold': '–ø—Ä–æ–¥–∞–Ω–æ',
                    'expired': '—Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è'
                }.get(product.status, product['status'])

                product_info = (
                    f"{i}. {status_emoji.get(product.status, '‚ùì')} *{product.product_name}*\n"
                    f"   üí∞ {product.price}\n"
                    f"   üìÖ {product.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                    f"   üìä –°—Ç–∞—Ç—É—Å: {status_ukr}\n"
                )
                
                if product.status == 'approved' and product.channel_message_id:
                    product_info += f"   üîó [–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤ –∫–∞–Ω–∞–ª—ñ](https://t.me/c/{str(CHANNEL_ID)[4:]}/{product.channel_message_id})\n"
                
                response_parts.append(product_info + "\n")
            
            full_response = "".join(response_parts)
            if len(full_response) > 4096:
                for i in range(0, len(full_response), 4000):
                    bot_instance.send_message(chat_id, full_response[i:i+4000], parse_mode='Markdown', disable_web_page_preview=True)
            else:
                bot_instance.send_message(chat_id, full_response, parse_mode='Markdown', disable_web_page_preview=True)

        else:
            bot_instance.send_message(chat_id, "üì≠ –í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–≤–∞–ª–∏ –∂–æ–¥–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üî• –ü—Ä–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä' —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤–æ—î –ø–µ—Ä—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è!")

    # --- –î–æ–ø–æ–º–æ–≥–∞ —Ç–∞ –ö–∞–Ω–∞–ª ---
    @error_handler
    def send_help_message(message, bot_instance):
        help_text = (
            "üÜò *–î–æ–≤—ñ–¥–∫–∞*\n\n"
            "ü§ñ –Ø –≤–∞—à AI-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ —Ç–∞ –ø—Ä–æ–¥–∞–∂—É. –í–∏ –º–æ–∂–µ—Ç–µ:\n"
            "üî• *–ü—Ä–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä* - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.\n"
            "üõí *–ú–æ—ó —Ç–æ–≤–∞—Ä–∏* - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Ç–∞ –ø—Ä–æ–¥–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏.\n"
            "üí∞ *–ö–æ–º—ñ—Å—ñ—è* - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–º—ñ—Å—ñ–π–Ω—ñ –∑–±–æ—Ä–∏.\n"
            "üì∫ *–ù–∞—à –∫–∞–Ω–∞–ª* - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó.\n"
            "ü§ñ *–ó–∞–ø–∏—Ç–∞—Ç–∏ AI* - –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ Grok AI.\n"
            "üéÅ *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è* - –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É –∞–±–æ –ø–æ—Å–ª—É–≥–∏.\n"
            "üë®‚Äçüíª *–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω–æ–º* - —è–∫—â–æ AI –Ω–µ –º–æ–∂–µ –¥–æ–ø–æ–º–æ–≥—Ç–∏, –∞–±–æ —É –≤–∞—Å —î —Å–∫–ª–∞–¥–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è.\n\n"
            "üó£Ô∏è *–°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è:* –ü—Ä–æ—Å—Ç–æ –ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ –≤–∞—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó, —ñ –º—ñ–π –≤–±—É–¥–æ–≤–∞–Ω–∏–π AI —Å–ø—Ä–æ–±—É—î –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏!\n\n"
            "–Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        bot_instance.send_message(message.chat.id, help_text, parse_mode='Markdown', reply_markup=main_menu_markup)

    @error_handler
    def send_commission_info(message, bot_instance):
        commission_rate_percent = 10
        text = (
            f"üí∞ *–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—é*\n\n"
            f"–ó–∞ —É—Å–ø—ñ—à–Ω–∏–π –ø—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä—É —á–µ—Ä–µ–∑ –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞ —Å—Ç—è–≥—É—î—Ç—å—Å—è –∫–æ–º—ñ—Å—ñ—è —É —Ä–æ–∑–º—ñ—Ä—ñ **{commission_rate_percent}%** –≤—ñ–¥ –∫—ñ–Ω—Ü–µ–≤–æ—ó —Ü—ñ–Ω–∏ –ø—Ä–æ–¥–∞–∂—É.\n\n"
            f"–ü—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –≤–∏ –ø–æ–∑–Ω–∞—á–∏—Ç–µ —Ç–æ–≤–∞—Ä —è–∫ '–ü—Ä–æ–¥–∞–Ω–æ', —Å–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—Ä–∞—Ö—É—î —Å—É–º—É –∫–æ–º—ñ—Å—ñ—ó, —ñ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —â–æ–¥–æ —ó—ó —Å–ø–ª–∞—Ç–∏.\n\n"
            f"–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è —Å–ø–ª–∞—Ç–∏ –∫–æ–º—ñ—Å—ñ—ó (Monobank):\n`{MONOBANK_CARD_NUMBER}`\n\n"
            f"–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–ª–∞—á—É–π—Ç–µ –∫–æ–º—ñ—Å—ñ—é –≤—á–∞—Å–Ω–æ, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –æ–±–º–µ–∂–µ–Ω—å –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞.\n\n"
            f"–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –≤–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–ø–ª–∞—Ç–∏ –º–æ–∂–Ω–∞ –±—É–¥–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –≤ —Ä–æ–∑–¥—ñ–ª—ñ '–ú–æ—ó —Ç–æ–≤–∞—Ä–∏'."
        )
        bot_instance.send_message(message.chat.id, text, parse_mode='Markdown', reply_markup=main_menu_markup)

    @error_handler
    def send_channel_link(message, bot_instance):
        chat_id = message.chat.id
        try:
            chat_info = bot_instance.get_chat(CHANNEL_ID)
            channel_link = ""
            if chat_info.invite_link:
                channel_link = chat_info.invite_link
            elif chat_info.username:
                channel_link = f"https://t.me/{chat_info.username}"
            else:
                try:
                    invite_link_obj = bot_instance.create_chat_invite_link(CHANNEL_ID, member_limit=1)
                    channel_link = invite_link_obj.invite_link
                    logger.info(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–ª—è –∫–∞–Ω–∞–ª—É: {channel_link}")
                except telebot.apihelper.ApiTelegramException as e:
                    logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–ª—è –∫–∞–Ω–∞–ª—É {CHANNEL_ID}: {e}")
                    channel_link = f"https://t.me/c/{str(CHANNEL_ID)[4:]}"

            if not channel_link:
                 raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª.")

            invite_text = (
                f"üì∫ *–ù–∞—à –∫–∞–Ω–∞–ª –∑ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è–º–∏*\n\n"
                f"–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ–≥–æ –∫–∞–Ω–∞–ª—É, —â–æ–± –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –Ω–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏!\n\n"
                f"üëâ [–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞–Ω–∞–ª—É]({channel_link})\n\n"
                f"üí° –£ –∫–∞–Ω–∞–ª—ñ –ø—É–±–ª—ñ–∫—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è"
            )
            bot_instance.send_message(chat_id, invite_text, parse_mode='Markdown', disable_web_page_preview=True)
            log_statistics('channel_visit', chat_id)

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞–±–æ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª: {e}", exc_info=True)
            bot_instance.send_message(chat_id, "‚ùå –ù–∞ –∂–∞–ª—å, –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    # --- –û–±—Ä–æ–±–Ω–∏–∫–∏ Callback Query ---
    @_bot.callback_query_handler(func=lambda call: True)
    @error_handler
    def callback_inline(call):
        if call.data.startswith('admin_'):
            handle_admin_callbacks(call, _bot)
        elif call.data.startswith('approve_') or call.data.startswith('reject_') or call.data.startswith('sold_'):
            handle_product_moderation_callbacks(call, _bot)
        elif call.data.startswith('user_block_') or call.data.startswith('user_unblock_'):
            handle_user_block_callbacks(call, _bot)
        elif call.data.startswith('accept_human_chat_'):
            # accept_human_chat_callback –≤–∂–µ –º–∞—î –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
            accept_human_chat_callback(call) 
        else:
            _bot.answer_callback_query(call.id, "–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.")

    # --- Callbacks –¥–ª—è –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ ---
    @error_handler
    def handle_admin_callbacks(call, bot_instance):
        if call.message.chat.id != ADMIN_CHAT_ID:
            bot_instance.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
            return

        action = call.data.split('_')[1]

        if action == "stats":
            send_admin_statistics(call, bot_instance)
        elif action == "pending":
            send_pending_products_for_moderation(call, bot_instance)
        elif action == "users":
            send_users_list(call, bot_instance)
        elif action == "block":
            bot_instance.edit_message_text("–í–≤–µ–¥—ñ—Ç—å `chat_id` –∞–±–æ `@username` –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è:",
                                  chat_id=call.message.chat.id,
                                  message_id=call.message.message_id, parse_mode='Markdown')
            set_user_status(ADMIN_CHAT_ID, 'awaiting_user_for_block_unblock')
        elif action == "commissions":
            send_admin_commissions_info(call, bot_instance)
        elif action == "ai_stats":
            send_admin_ai_statistics(call, bot_instance)
        elif action == "faq_menu":
            send_admin_faq_menu(call, bot_instance)

        bot_instance.answer_callback_query(call.id)

    @error_handler
    def send_admin_statistics(call, bot_instance):
        session = Session()
        try:
            product_stats_dict = {'pending': 0, 'approved': 0, 'rejected': 0, 'sold': 0, 'expired': 0}
            logger.warning("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä—ñ–≤ —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞ (–Ω–µ–º–∞—î –º–æ–¥–µ–ª—ñ Product).")

            total_users = session.query(User).count()
            blocked_users_count = session.query(User).filter_by(is_blocked=True).count()

            today_products = 0
            logger.warning("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞ (–Ω–µ–º–∞—î –º–æ–¥–µ–ª—ñ Product).")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            bot_instance.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", call.message.chat.id, call.message.message_id)
            return
        finally:
            session.close()

        stats_text = (
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
            f"üë• *–ö–æ—Ä–∏—Ä–∏—Å—Ç—É–≤–∞—á—ñ:*\n"
            f"‚Ä¢ –í—Å—å–æ–≥–æ: {total_users}\n"
            f"‚Ä¢ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ: {blocked_users_count}\n\n"
            f"üì¶ *–¢–æ–≤–∞—Ä–∏:*\n"
            f"‚Ä¢ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {product_stats_dict.get('pending', 0)}\n"
            f"‚Ä¢ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: {product_stats_dict.get('approved', 0)}\n"
            f"‚Ä¢ –í—ñ–¥—Ö–∏–ª–µ–Ω–æ: {product_stats_dict.get('rejected', 0)}\n"
            f"‚Ä¢ –ü—Ä–æ–¥–∞–Ω–æ: {product_stats_dict.get('sold', 0)}\n"
            f"‚Ä¢ –¢–µ—Ä–º—ñ–Ω –¥—ñ—ó –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è: {product_stats_dict.get('expired', 0)}\n\n"
            f"üìÖ *–°—å–æ–≥–æ–¥–Ω—ñ –¥–æ–¥–∞–Ω–æ:* {today_products}\n"
            f"üìà *–í—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤:* {sum(product_stats_dict.values())}"
        )

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main"))

        bot_instance.edit_message_text(stats_text, call.message.chat.id, call.message.message_id,
                             parse_mode='Markdown', reply_markup=markup)

    @error_handler
    def send_users_list(call, bot_instance):
        session = Session()
        try:
            users = session.query(User).order_by(User.joined_at.desc()).limit(20).all()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            bot_instance.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.", call.message.chat.id, call.message.message_id)
            return
        finally:
            session.close()

        if not users:
            response_text = "ü§∑‚Äç‚ôÇÔ∏è –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."
        else:
            response_text = "üë• *–°–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:*\n\n"
            for user in users:
                block_status = "üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ" if user.is_blocked else "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π"
                username = f"@{user.username}" if user.username else "–ù–µ–º–∞—î —é–∑–µ—Ä–Ω–µ–π–º—É"
                first_name = user.first_name if user.first_name else "–ù–µ–≤—ñ–¥–æ–º–µ —ñ–º'—è"
                response_text += f"- {first_name} ({username}) [ID: `{user.chat_id}`] - {block_status}\n"

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main"))

        bot_instance.edit_message_text(response_text, call.message.chat.id, call.message.message_id,
                             parse_mode='Markdown', reply_markup=markup)

    @_bot.message_handler(func=lambda message: get_user_current_status(message.chat.id) == 'awaiting_user_for_block_unblock' and message.chat.id == ADMIN_CHAT_ID)
    @error_handler
    def process_user_for_block_unblock(message, bot_instance):
        admin_chat_id = message.chat.id
        target_identifier = message.text.strip()
        target_chat_id = None

        session = Session()
        try:
            if target_identifier.startswith('@'):
                username = target_identifier[1:]
                user = session.query(User).filter_by(username=username).first()
                if user:
                    target_chat_id = user.chat_id
                else:
                    bot_instance.send_message(admin_chat_id, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —é–∑–µ—Ä–Ω–µ–π–º–æ–º `{target_identifier}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                    set_user_status(admin_chat_id, 'idle')
                    return
            else:
                try:
                    target_chat_id = int(target_identifier)
                except ValueError:
                    bot_instance.send_message(admin_chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω–∏–π `chat_id` (—á–∏—Å–ª–æ) –∞–±–æ `@username`.")
                    set_user_status(admin_chat_id, 'idle')
                    return
        finally:
            session.close()

        if target_chat_id == ADMIN_CHAT_ID:
            bot_instance.send_message(admin_chat_id, "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ —Å–µ–±–µ.")
            set_user_status(admin_chat_id, 'idle')
            return

        if target_chat_id:
            current_status = is_user_blocked(target_chat_id)
            action_text = "–∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏" if not current_status else "—Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏"
            confirmation_text = f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ {action_text} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID `{target_chat_id}` (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É)?\n"

            markup = types.InlineKeyboardMarkup()
            if not current_status:
                markup.add(types.InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data=f"user_block_{target_chat_id}"))
            else:
                markup.add(types.InlineKeyboardButton("‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data=f"user_unblock_{target_chat_id}"))
            markup.add(types.InlineKeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_panel_main"))

            bot_instance.send_message(admin_chat_id, confirmation_text, reply_markup=markup, parse_mode='Markdown')
            set_user_status(admin_chat_id, 'idle')
        else:
            bot_instance.send_message(admin_chat_id, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            set_user_status(admin_chat_id, 'idle')

    @error_handler
    def handle_user_block_callbacks(call, bot_instance):
        admin_chat_id = call.message.chat.id
        data_parts = call.data.split('_')
        action = data_parts[1]
        target_chat_id = int(data_parts[2])

        if action == 'block':
            success = set_user_block_status(admin_chat_id, target_chat_id, True)
            if success:
                bot_instance.edit_message_text(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID `{target_chat_id}` —É—Å–ø—ñ—à–Ω–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.",
                                      chat_id=admin_chat_id, message_id=call.message.message_id, parse_mode='Markdown')
                try:
                    bot_instance.send_message(target_chat_id, "‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –±—É–ª–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                except Exception as e:
                    logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_chat_id}: {e}")
                log_statistics('user_blocked', admin_chat_id, target_chat_id)
            else:
                bot_instance.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID `{target_chat_id}`.",
                                      chat_id=admin_chat_id, message_id=call.message.message_id, parse_mode='Markdown')
        elif action == 'unblock':
            success = set_user_block_status(admin_chat_id, target_chat_id, False)
            if success:
                bot_instance.edit_message_text(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID `{target_chat_id}` —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ.",
                                      chat_id=admin_chat_id, message_id=call.message.message_id, parse_mode='Markdown')
                try:
                    bot_instance.send_message(target_chat_id, "‚úÖ –í–∞—à –∞–∫–∞—É–Ω—Ç –±—É–ª–æ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
                except Exception as e:
                    logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_chat_id}: {e}")
                log_statistics('user_unblocked', admin_chat_id, target_chat_id)
            else:
                bot_instance.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID `{target_chat_id}`.",
                                      chat_id=admin_chat_id, message_id=call.message.message_id, parse_mode='Markdown')
        bot_instance.answer_callback_query(call.id)

    @error_handler
    def send_pending_products_for_moderation(call, bot_instance):
        session = Session()
        try:
            pending_products = []
            logger.warning("–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ (–Ω–µ–º–∞—î –º–æ–¥–µ–ª—ñ Product).")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é: {e}")
            bot_instance.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.", call.message.chat.id, call.message.message_id)
            return
        finally:
            session.close()

        if not pending_products:
            response_text = "üéâ –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó."
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main"))
            bot_instance.edit_message_text(response_text, call.message.chat.id, call.message.message_id, reply_markup=markup)
            bot_instance.answer_callback_query(call.id)
            return

        bot_instance.edit_message_text("‚è≥ *–¢–æ–≤–∞—Ä–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó:*\n\n–ù–∞–¥—Å–∏–ª–∞—é...",
                              chat_id=call.message.chat.id, message_id=call.message.message_id)

        for product_row in pending_products:
            product_data = dict(product_row)
            send_product_for_admin_review(product_data['id'], product_data, product_data['seller_chat_id'], product_data['seller_username'], bot_instance=bot_instance)
            time.sleep(0.5)

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main"))
        bot_instance.send_message(call.message.chat.id, "‚úÖ –í—Å—ñ —Ç–æ–≤–∞—Ä–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.", reply_markup=markup)
        bot_instance.answer_callback_query(call.id)

    @error_handler
    def send_admin_commissions_info(call, bot_instance):
        session = Session()
        try:
            commission_summary = {'total_pending': 0, 'total_paid': 0}
            recent_transactions = []
            logger.warning("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º—ñ—Å—ñ–π —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞ (–Ω–µ–º–∞—î –º–æ–¥–µ–ª–µ–π).")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—ó: {e}")
            bot_instance.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—ó.", call.message.chat.id, call.message.message_id)
            return
        finally:
            session.close()

        text = (
            f"üí∞ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º—ñ—Å—ñ–π*\n\n"
            f"‚Ä¢ –í—Å—å–æ–≥–æ –æ—á—ñ–∫—É—î—Ç—å—Å—è: *{commission_summary['total_pending'] or 0:.2f} –≥—Ä–Ω*\n"
            f"‚Ä¢ –í—Å—å–æ–≥–æ —Å–ø–ª–∞—á–µ–Ω–æ: *{commission_summary['total_paid'] or 0:.2f} –≥—Ä–Ω*\n\n"
            f"üìä *–û—Å—Ç–∞–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:*\n"
        )

        if recent_transactions:
            for tx in recent_transactions:
                username = f"@{tx.username}" if tx.username else f"ID: {tx.seller_chat_id}"
                text += (
                    f"- –¢–æ–≤–∞—Ä ID `{tx.product_id}` ({tx.product_name})\n"
                    f"  –ü—Ä–æ–¥–∞–≤–µ—Ü—å: {username}\n"
                    f"  –°—É–º–∞: {tx.amount:.2f} –≥—Ä–Ω, –°—Ç–∞—Ç—É—Å: {tx.status}\n"
                    f"  –î–∞—Ç–∞: {tx.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                )
        else:
            text += "  –ù–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∫–æ–º—ñ—Å—ñ–π.\n\n"

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main"))
        bot_instance.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)
        bot_instance.answer_callback_query(call.id)

    @error_handler
    def send_admin_ai_statistics(call, bot_instance):
        session = Session()
        try:
            total_user_queries = 0
            top_ai_users = []
            daily_ai_queries = []
            logger.warning("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞ (–Ω–µ–º–∞—î –º–æ–¥–µ–ª—ñ Conversation).")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            bot_instance.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", call.message.chat.id, call.message.message_id)
            return
        finally:
            session.close()

        text = (
            f"ü§ñ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI –ü–æ–º—ñ—á–Ω–∏–∫–∞*\n\n"
            f"‚Ä¢ –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–æ AI: *{total_user_queries}*\n\n"
            f"üìä *–ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ AI:*\n"
        )
        if top_ai_users:
            for user_data_row in top_ai_users:
                user_id = user_data_row.user_chat_id
                user_info = bot_instance.get_chat(user_id)
                username = f"@{user_info.username}" if user_info.username else f"ID: {user_id}"
                text += f"- {username}: {user_data_row.query_count} –∑–∞–ø–∏—Ç—ñ–≤\n"
        else:
            text += "  –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö.\n"

        text += "\nüìÖ *–ó–∞–ø–∏—Ç–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤:*\n"
        if daily_ai_queries:
            for day_data_row in daily_ai_queries:
                text += f"- {day_data_row.date}: {day_data_row.query_count} –∑–∞–ø–∏—Ç—ñ–≤\n"
        else:
            text += "  –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö.\n"

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main"))
        bot_instance.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)
        bot_instance.answer_callback_query(call.id)

    # --- –ö–µ—Ä—É–≤–∞–Ω–Ω—è FAQ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ ---
    @error_handler
    def send_admin_faq_menu(call, bot_instance):
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è/–≤—ñ–¥–ø–æ–≤—ñ–¥—å", callback_data="admin_faq_add"),
            types.InlineKeyboardButton("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ FAQ", callback_data="admin_faq_view_all"),
            types.InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è/–≤—ñ–¥–ø–æ–≤—ñ–¥—å", callback_data="admin_faq_delete"),
            types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main")
        )
        bot_instance.edit_message_text("üìö *–ö–µ—Ä—É–≤–∞–Ω–Ω—è FAQ*\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              reply_markup=markup, parse_mode='Markdown')
        bot_instance.answer_callback_query(call.id)

    @_bot.callback_query_handler(func=lambda call: call.data.startswith('admin_faq_'))
    @error_handler
    def handle_admin_faq_callbacks(call):
        if call.message.chat.id != ADMIN_CHAT_ID:
            _bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
            return

        action = call.data.split('_')[2]

        if action == "add":
            _bot.edit_message_text("‚ûï *–î–æ–¥–∞–≤–∞–Ω–Ω—è FAQ*\n\n–í–≤–µ–¥—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è, —è–∫–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏:",
                                  chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='Markdown')
            set_user_status(ADMIN_CHAT_ID, 'awaiting_faq_question')
            set_user_session_data(ADMIN_CHAT_ID, {})
        elif action == "view":
            all_faq = get_all_faq_entries()
            if not all_faq:
                response_text = "ü§∑‚Äç‚ôÇÔ∏è –ë–∞–∑–∞ –∑–Ω–∞–Ω—å FAQ –ø–æ—Ä–æ–∂–Ω—è."
            else:
                response_text = "üìö *–í—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (FAQ):*\n\n"
                for faq_id, question, answer in all_faq:
                    response_text += f"*{faq_id}. –ü–∏—Ç–∞–Ω–Ω—è*: {question}\n"
                    response_text += f"*–í—ñ–¥–ø–æ–≤—ñ–¥—å*: {answer}\n\n"
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ FAQ –º–µ–Ω—é", callback_data="admin_faq_menu"))
            _bot.edit_message_text(response_text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)
        elif action == "delete":
            _bot.edit_message_text("üóëÔ∏è *–í–∏–¥–∞–ª–µ–Ω–Ω—è FAQ*\n\n–í–≤–µ–¥—ñ—Ç—å ID –ø–∏—Ç–∞–Ω–Ω—è, —è–∫–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ (–≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ ID, –æ–±—Ä–∞–≤—à–∏ '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ FAQ'):",
                                  chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='Markdown')
            set_user_status(ADMIN_CHAT_ID, 'awaiting_faq_delete_id')
        
        _bot.answer_callback_query(call.id)

    def send_admin_faq_menu_after_action(message, bot_instance):
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è/–≤—ñ–¥–ø–æ–≤—ñ–¥—å", callback_data="admin_faq_add"),
            types.InlineKeyboardButton("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ FAQ", callback_data="admin_faq_view_all"),
            types.InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è/–≤—ñ–¥–ø–æ–≤—ñ–¥—å", callback_data="admin_faq_delete"),
            types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main")
        )
        bot_instance.send_message(ADMIN_CHAT_ID, "üìö *–ö–µ—Ä—É–≤–∞–Ω–Ω—è FAQ*\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                              reply_markup=markup, parse_mode='Markdown')


    # --- Callbacks –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—É ---
    @error_handler
    def handle_product_moderation_callbacks(call, bot_instance):
        if call.message.chat.id != ADMIN_CHAT_ID:
            bot_instance.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
            return

        data_parts = call.data.split('_')
        action = data_parts[0]
        product_id = int(data_parts[1])

        session = Session()
        product_info = None
        try:
            product_info = {
                'id': product_id,
                'seller_chat_id': 12345,
                'product_name': '–¢–µ—Å—Ç–æ–≤–∏–π —Ç–æ–≤–∞—Ä',
                'price': '100 –≥—Ä–Ω',
                'description': '–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó.',
                'photos': '[]',
                'geolocation': 'null',
                'admin_message_id': call.message.message_id,
                'channel_message_id': None,
                'status': 'pending'
            }
            logger.warning(f"–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä {product_id} —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ (–Ω–µ–º–∞—î –º–æ–¥–µ–ª—ñ Product).")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä {product_id} –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {e}")
            bot_instance.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä.")
            session.close()
            return

        if not product_info:
            bot_instance.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            session.close()
            return

        seller_chat_id = product_info['seller_chat_id']
        product_name = product_info['product_name']
        price = product_info['price']
        description = product_info['description']
        photos_str = product_info['photos']
        geolocation_str = product_info['geolocation']
        admin_message_id = product_info['admin_message_id']
        channel_message_id = product_info['channel_message_id']
        current_status = product_info['status']

        photos = json.loads(photos_str) if photos_str else []
        geolocation = json.loads(geolocation_str) if geolocation_str else None
        hashtags = generate_hashtags(description)

        is_call_message_photo = bool(call.message.photo)


        try:
            if action == 'approve':
                if current_status != 'pending':
                    bot_instance.answer_callback_query(call.id, f"–¢–æ–≤–∞—Ä –≤–∂–µ –º–∞—î —Å—Ç–∞—Ç—É—Å '{current_status}'.")
                    return

                channel_text = (
                    f"üî• *–ù–û–í–ò–ô –¢–û–í–ê–†!* üî•\n\n"
                    f"üìù *–ù–∞–∑–≤–∞:* {product_name}\n"
                    f"üìÑ *–û–ø–∏—Å:* {description}\n"
                    f"üí∞ *–¶—ñ–Ω–∞:* {price} UAH\n"
                    f"üìç *–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è:* {'–ü—Ä–∏—Å—É—Ç–Ω—è' if geolocation else '–í—ñ–¥—Å—É—Ç–Ω—è'}\n\n"
                    f"üÜî *ID —Ç–æ–≤–∞—Ä—É:* #{product_id}\n\n"
                    f"üì© *–î–ª—è –∑–≤'—è–∑–∫—É –∑ –ø—Ä–æ–¥–∞–≤—Ü–µ–º:* @{bot_instance.get_chat(seller_chat_id).username or '–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á'}"
                )
                
                new_channel_message_id = None
                if photos:
                    channel_media_group = []
                    channel_media_group.append(types.InputMediaPhoto(photos[0], caption=channel_text, parse_mode='Markdown'))
                    for photo_id in photos[1:]:
                        channel_media_group.append(types.InputMediaPhoto(photo_id))
                    
                    sent_channel_messages = bot_instance.send_media_group(CHANNEL_ID, channel_media_group)
                    new_channel_message_id = sent_channel_messages[0].message_id
                else:
                    published_message = bot_instance.send_message(CHANNEL_ID, channel_text, parse_mode='Markdown')
                    new_channel_message_id = published_message.message_id

                if new_channel_message_id:
                    logger.warning(f"–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä—É {product_id} –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–î (–Ω–µ–º–∞—î –º–æ–¥–µ–ª—ñ Product).")

                    log_statistics('product_approved', call.message.chat.id, product_id)
                    bot_instance.send_message(seller_chat_id,
                                     f"‚úÖ –í–∞—à —Ç–æ–≤–∞—Ä '{product_name}' —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ! [–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏](https://t.me/c/{str(CHANNEL_ID)[4:]}/{new_channel_message_id})",
                                     parse_mode='Markdown', disable_web_page_preview=True)
                    
                    admin_update_text = f"‚úÖ –¢–æ–≤–∞—Ä *'{product_name}'* (ID: {product_id}) –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ."
                    if is_call_message_photo:
                        try:
                            bot_instance.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                                             caption=admin_update_text, parse_mode='Markdown')
                        except telebot.apihelper.ApiTelegramException as e:
                            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ edit_message_caption –¥–ª—è –∞–¥–º—ñ–Ω-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {call.message.message_id}: {e}")
                            bot_instance.send_message(call.message.chat.id, admin_update_text, parse_mode='Markdown') 
                    else:
                        bot_instance.edit_message_text(admin_update_text,
                                              chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='Markdown')
                    
                    markup_sold = types.InlineKeyboardMarkup()
                    markup_sold.add(types.InlineKeyboardButton("üí∞ –í—ñ–¥–º—ñ—Ç–∏—Ç–∏ —è–∫ –ø—Ä–æ–¥–∞–Ω–æ", callback_data=f"sold_{product_id}"))
                    bot_instance.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup_sold)

                else:
                    raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª.")

            elif action == 'reject':
                if current_status != 'pending':
                    bot_instance.answer_callback_query(call.id, f"–¢–æ–≤–∞—Ä –≤–∂–µ –º–∞—î —Å—Ç–∞—Ç—É—Å '{current_status}'.")
                    return

                logger.warning(f"–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä—É {product_id} –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–î (–Ω–µ–º–∞—î –º–æ–¥–µ–ª—ñ Product).")

                log_statistics('product_rejected', call.message.chat.id, product_id)
                bot_instance.send_message(seller_chat_id,
                                 f"‚ùå –í–∞—à —Ç–æ–≤–∞—Ä '{product_name}' –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                                 "–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏: –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –ø—Ä–∞–≤–∏–ª–∞–º, –Ω–∏–∑—å–∫–∞ —è–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ, –Ω–µ—Ç–æ—á–Ω–∏–π –æ–ø–∏—Å.\n"
                                 "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–¥–∞—Ç–∏ –∑–Ω–æ–≤—É.",
                                 parse_mode='Markdown')
                admin_update_text = f"‚ùå –¢–æ–≤–∞—Ä *'{product_name}'* (ID: {product_id}) –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ."
                if is_call_message_photo:
                    try:
                        bot_instance.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                                         caption=admin_update_text, parse_mode='Markdown')
                    except telebot.apihelper.ApiTelegramException as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ edit_message_caption –¥–ª—è –∞–¥–º—ñ–Ω-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {call.message.message_id}: {e}")
                        bot_instance.send_message(call.message.chat.id, admin_update_text, parse_mode='Markdown') 
                else:
                    bot_instance.edit_message_text(admin_update_text,
                                          chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='Markdown')
                bot_instance.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)

            elif action == 'sold':
                if current_status != 'approved':
                    bot_instance.answer_callback_query(call.id, f"–¢–æ–≤–∞—Ä –Ω–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏–π –∞–±–æ –≤–∂–µ –ø—Ä–æ–¥–∞–Ω–∏–π (–ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å: '{current_status}').")
                    return

                if channel_message_id:
                    try:
                        logger.warning(f"–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä—É {product_id} –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–î (–Ω–µ–º–∞—î –º–æ–¥–µ–ª—ñ Product).")

                        log_statistics('product_sold', call.message.chat.id, product_id)

                        original_caption_for_channel = description
                        sold_text = (
                            f"üì¶ *–ü–†–û–î–ê–ù–û!* {product_name}\n\n"
                            f"{original_caption_for_channel}\n\n"
                            f"*–¶–µ–π —Ç–æ–≤–∞—Ä –≤–∂–µ –ø—Ä–æ–¥–∞–Ω–æ.*"
                        )
                        
                        is_channel_original_message_photo = bool(photos)
                        if is_channel_original_message_photo:
                            bot_instance.edit_message_caption(chat_id=CHANNEL_ID, message_id=channel_message_id,
                                                             caption=sold_text, parse_mode='Markdown')
                        else:
                            bot_instance.edit_message_text(chat_id=CHANNEL_ID, message_id=channel_message_id,
                                                          text=sold_text, parse_mode='Markdown')
                        
                        bot_instance.send_message(seller_chat_id, f"‚úÖ –í–∞—à —Ç–æ–≤–∞—Ä '{product_name}' –≤—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ *'–ü–†–û–î–ê–ù–û'*. –î—è–∫—É—î–º–æ –∑–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é!", parse_mode='Markdown')
                        
                        admin_sold_text = f"üí∞ –¢–æ–≤–∞—Ä *'{product_name}'* (ID: {product_id}) –≤—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ –ø—Ä–æ–¥–∞–Ω–∏–π."
                        if is_call_message_photo:
                            try:
                                bot_instance.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                                                 caption=admin_sold_text, parse_mode='Markdown')
                            except telebot.apihelper.ApiTelegramException as e:
                                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ edit_message_caption –¥–ª—è –∞–¥–º—ñ–Ω-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {call.message.message_id} (sold): {e}")
                                bot_instance.send_message(call.message.chat.id, admin_sold_text, parse_mode='Markdown') 
                        else:
                            bot_instance.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                                          text=admin_sold_text, parse_mode='Markdown')
                        
                        bot_instance.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)

                    except telebot.apihelper.ApiTelegramException as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–º—ñ—Ç—Ü—ñ —Ç–æ–≤–∞—Ä—É {product_id} —è–∫ –ø—Ä–æ–¥–∞–Ω–æ–≥–æ –≤ –∫–∞–Ω–∞–ª—ñ: {e}")
                        bot_instance.send_message(call.message.chat.id, f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥–∞–∂—É –≤ –∫–∞–Ω–∞–ª—ñ –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id}. –ú–æ–∂–ª–∏–≤–æ, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
                        bot_instance.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ.")
                        return
                else:
                    bot_instance.send_message(call.message.chat.id, "–¶–µ–π —Ç–æ–≤–∞—Ä —â–µ –Ω–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ, –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ –≤—ñ–¥—Å—É—Ç–Ω—î. –ù–µ –º–æ–∂–Ω–∞ –≤—ñ–¥–º—ñ—Ç–∏—Ç–∏ —è–∫ –ø—Ä–æ–¥–∞–Ω–∏–π.")
                    bot_instance.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ.")
        except Exception as e:
            session.rollback()
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –º–æ–¥–µ—Ä–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—É {product_id}, –¥—ñ—è {action}: {e}", exc_info=True)
            bot_instance.send_message(call.message.chat.id, f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥—ñ—ó '{action}' –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id}.")
        finally:
            session.close()
        bot_instance.answer_callback_query(call.id)

    # --- –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ –ø—ñ—Å–ª—è –∫–æ–ª–±–µ–∫—É ---
    @_bot.callback_query_handler(func=lambda call: call.data == "admin_panel_main")
    @error_handler
    def back_to_admin_panel(call):
        if call.message.chat.id != ADMIN_CHAT_ID:
            _bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
            return
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            types.InlineKeyboardButton("‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó", callback_data="admin_pending"),
            types.InlineKeyboardButton("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users"),
            types.InlineKeyboardButton("üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è", callback_data="admin_block"),
            types.InlineKeyboardButton("üí∞ –ö–æ–º—ñ—Å—ñ—ó", callback_data="admin_commissions"),
            types.InlineKeyboardButton("ü§ñ AI –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_ai_stats"),
            types.InlineKeyboardButton("üìö –ö–µ—Ä—É–≤–∞–Ω–Ω—è FAQ", callback_data="admin_faq_menu")
        )

        _bot.edit_message_text("üîß *–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å*\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              reply_markup=markup, parse_mode='Markdown')
        _bot.answer_callback_query(call.id)










# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ app —Ç–∞ bot
app, bot = create_app()

if __name__ == "__main__":
    from time import sleep
    sleep(1)
    _bot.remove_webhook()
    _bot.set_webhook(url=_webhook_url)
    app = create_app()
else:
    app = create_app()

