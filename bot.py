import os
import telebot
from telebot import types
import logging
from datetime import datetime, timedelta, timezone
import re
import json
import requests
from dotenv import load_dotenv

# –Ü–º–ø–æ—Ä—Ç–∏ –¥–ª—è Webhook (Flask)
from flask import Flask, request

# –Ü–º–ø–æ—Ä—Ç–∏ –¥–ª—è PostgreSQL (–∑–∞–º—ñ—Å—Ç—å sqlite3)
import psycopg2
from psycopg2 import sql as pg_sql
from psycopg2 import extras

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É .env
load_dotenv()

# --- 1. –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ë–æ—Ç–∞ ---
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID'))
CHANNEL_ID = int(os.getenv('CHANNEL_ID'))
MONOBANK_CARD_NUMBER = os.getenv('MONOBANK_CARD_NUMBER')
RAPIDAPI_KEY = os.getenv('RAPIDAPI_KEY')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"

WEBHOOK_URL = os.getenv('WEBHOOK_URL')
DATABASE_URL = os.getenv('DATABASE_URL')

# –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –æ—Å–Ω–æ–≤–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
if not TOKEN:
    print("–ü–æ–º–∏–ª–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è. –í–∏—Ö—ñ–¥.")
    exit(1)
if not RAPIDAPI_KEY:
    print("–ü–æ–º–∏–ª–∫–∞: RAPIDAPI_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è. –í–∏—Ö—ñ–¥.")
    exit(1)
if not DATABASE_URL:
    print("–ü–æ–º–∏–ª–∫–∞: DATABASE_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è. –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ. –í–∏—Ö—ñ–¥.")
    exit(1)

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# --- 2. –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# --- 3. –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–∞–∑–∏ –î–∞–Ω–∏—Ö (PostgreSQL) ---
def get_db_connection():
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö PostgreSQL."""
    try:
        conn = psycopg2.connect(DATABASE_URL, cursor_factory=psycopg2.extras.DictCursor)
        return conn
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}", exc_info=True)
        return None

def init_db():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ç–∞–±–ª–∏—Ü—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö, —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ —ñ—Å–Ω—É—é—Ç—å."""
    conn = None
    try:
        conn = get_db_connection()
        if conn:
            cur = conn.cursor()
            # –¢–∞–±–ª–∏—Ü—è users
            cur.execute(pg_sql.SQL("""
                CREATE TABLE IF NOT EXISTS users (
                    chat_id BIGINT PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    is_blocked BOOLEAN DEFAULT FALSE,
                    blocked_by BIGINT,
                    blocked_at TIMESTAMP WITH TIME ZONE,
                    commission_paid REAL DEFAULT 0,
                    commission_due REAL DEFAULT 0,
                    last_activity TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    joined_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
                );
            """))
            # –¢–∞–±–ª–∏—Ü—è products
            cur.execute(pg_sql.SQL("""
                CREATE TABLE IF NOT EXISTS products (
                    id SERIAL PRIMARY KEY,
                    seller_chat_id BIGINT NOT NULL,
                    seller_username TEXT,
                    product_name TEXT NOT NULL,
                    price TEXT NOT NULL,
                    description TEXT NOT NULL,
                    photos TEXT, -- –ó–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ—Ç—å—Å—è —è–∫ JSON —Ä—è–¥–æ–∫
                    geolocation TEXT, -- –ó–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ—Ç—å—Å—è —è–∫ JSON —Ä—è–¥–æ–∫
                    status TEXT DEFAULT 'pending', -- pending, approved, rejected, sold, expired
                    commission_rate REAL DEFAULT 0.10,
                    commission_amount REAL DEFAULT 0,
                    moderator_id BIGINT,
                    moderated_at TIMESTAMP WITH TIME ZONE,
                    admin_message_id BIGINT,
                    channel_message_id BIGINT,
                    views INTEGER DEFAULT 0,
                    promotion_ends_at TIMESTAMP WITH TIME ZONE,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (seller_chat_id) REFERENCES users (chat_id)
                );
            """))
            # –¢–∞–±–ª–∏—Ü—è conversations (–¥–ª—è AI)
            cur.execute(pg_sql.SQL("""
                CREATE TABLE IF NOT EXISTS conversations (
                    id SERIAL PRIMARY KEY,
                    user_chat_id BIGINT NOT NULL,
                    product_id INTEGER,
                    message_text TEXT,
                    sender_type TEXT, -- 'user' –∞–±–æ 'ai'
                    timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_chat_id) REFERENCES users (chat_id),
                    FOREIGN KEY (product_id) REFERENCES products (id)
                );
            """))
            # –¢–∞–±–ª–∏—Ü—è commission_transactions
            cur.execute(pg_sql.SQL("""
                CREATE TABLE IF NOT EXISTS commission_transactions (
                    id SERIAL PRIMARY KEY,
                    product_id INTEGER NOT NULL,
                    seller_chat_id BIGINT NOT NULL,
                    amount REAL NOT NULL,
                    status TEXT DEFAULT 'pending_payment', -- pending_payment, paid, cancelled
                    payment_details TEXT,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    paid_at TIMESTAMP WITH TIME ZONE,
                    FOREIGN KEY (product_id) REFERENCES products (id),
                    FOREIGN KEY (seller_chat_id) REFERENCES users (chat_id)
                );
            """))
            # –¢–∞–±–ª–∏—Ü—è statistics
            cur.execute(pg_sql.SQL("""
                CREATE TABLE IF NOT EXISTS statistics (
                    id SERIAL PRIMARY KEY,
                    action TEXT NOT NULL,
                    user_id BIGINT,
                    product_id INTEGER,
                    details TEXT,
                    timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
                );
            """))
            conn.commit()
            logger.info("–¢–∞–±–ª–∏—Ü—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∞–±–æ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å.")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

# --- 4. –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –±–∞–≥–∞—Ç–æ—à–∞–≥–æ–≤–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤ (–∑–∞–ª–∏—à–∞—î–º–æ –¥–ª—è –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è) ---
user_data = {}

# --- 5. –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ (–∑–∞–ª–∏—à–∞—î–º–æ) ---
def error_handler(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ —É —Ñ—É–Ω–∫—Ü—ñ—è—Ö –±–æ—Ç–∞."""
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ {func.__name__}: {e}", exc_info=True)
            chat_id_to_notify = ADMIN_CHAT_ID
            if args:
                first_arg = args[0]
                if isinstance(first_arg, types.Message):
                    chat_id_to_notify = first_arg.chat.id
                elif isinstance(first_arg, types.CallbackQuery):
                    chat_id_to_notify = first_arg.message.chat.id
            
            try:
                bot.send_message(ADMIN_CHAT_ID, f"üö® –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –±–æ—Ç—ñ!\n–§—É–Ω–∫—Ü—ñ—è: {func.__name__}\n–ü–æ–º–∏–ª–∫–∞: {e}\n–î–∏–≤—ñ—Ç—å—Å—è –¥–µ—Ç–∞–ª—ñ –≤ –ª–æ–≥–∞—Ö Render.")
                if chat_id_to_notify != ADMIN_CHAT_ID:
                    bot.send_message(chat_id_to_notify, "üòî –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∂–µ —Å–ø–æ–≤—ñ—â–µ–Ω–∏–π.")
            except Exception as e_notify:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {e_notify}")
    return wrapper

# --- 6. –ú—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ–π, —è–∫—ñ –º–æ–∂—É—Ç—å –≤–∏–∫–ª–∏–∫–∞—Ç–∏—Å—è –∑ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ ---
@error_handler
def save_user(message_or_user):
    logger.info(f"DEBUG_STUB: save_user called for {message_or_user.from_user.id if hasattr(message_or_user, 'from_user') else message_or_user.id}")
    pass # –†–µ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ save_user –ø–æ–∫–∏ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞

@error_handler
def is_user_blocked(chat_id):
    logger.info(f"DEBUG_STUB: is_user_blocked called for {chat_id}")
    return False # –ó–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ False –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è

@error_handler
def log_statistics(action, user_id=None, product_id=None, details=None):
    logger.info(f"DEBUG_STUB: log_statistics called for action: {action}")
    pass # –†–µ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ log_statistics –ø–æ–∫–∏ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞

# --- 9. –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (–º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏) ---
@bot.message_handler(commands=['start'])
@error_handler
def send_welcome(message):
    logger.info(f"DEBUG: send_welcome handler CALLED for chat_id: {message.chat.id}, message_text: '{message.text}'")
    chat_id = message.chat.id
    
    # –í–∏–∫–ª–∏–∫–∞—î–º–æ –∑–∞–≥–ª—É—à–∫—É save_user
    save_user(message)
    log_statistics('start', chat_id)

    welcome_text = "–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à SellerBot. –í–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ /start."
    
    logger.info(f"DEBUG: Attempting to send welcome message to chat_id: {chat_id}")
    bot.send_message(chat_id, welcome_text)
    logger.info(f"DEBUG: Welcome message sent (or attempted) to chat_id: {chat_id}")

@bot.message_handler(commands=['test'])
@error_handler
def send_test_message(message):
    logger.info(f"DEBUG: send_test_message handler CALLED for chat_id: {message.chat.id}, message_text: '{message.text}'")
    chat_id = message.chat.id
    test_text = "–¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ë–æ—Ç –ø—Ä–∞—Ü—é—î!"
    logger.info(f"DEBUG: Attempting to send test message to chat_id: {chat_id}")
    bot.send_message(chat_id, test_text)
    logger.info(f"DEBUG: Test message sent (or attempted) to chat_id: {chat_id}")

@bot.message_handler(func=lambda message: True, content_types=['text', 'photo', 'location'])
@error_handler
def handle_all_messages(message):
    logger.info(f"DEBUG: handle_all_messages handler CALLED for chat_id: {message.chat.id}, type: {message.content_type}, text: '{message.text[:50] if message.text else 'N/A'}'")
    chat_id = message.chat.id
    
    # –í–∏–∫–ª–∏–∫–∞—î–º–æ –∑–∞–≥–ª—É—à–∫—É save_user
    save_user(message)

    if message.content_type == 'text':
        response_text = f"–Ø –æ—Ç—Ä–∏–º–∞–≤ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: '{message.text}'. –î—è–∫—É—é!"
    elif message.content_type == 'photo':
        response_text = "–Ø –æ—Ç—Ä–∏–º–∞–≤ –≤–∞—à–µ —Ñ–æ—Ç–æ. –ü–æ–∫–∏ —â–æ –Ω–µ –∑–Ω–∞—é, —â–æ –∑ –Ω–∏–º —Ä–æ–±–∏—Ç–∏."
    elif message.content_type == 'location':
        response_text = f"–Ø –æ—Ç—Ä–∏–º–∞–≤ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é: {message.location.latitude}, {message.location.longitude}."
    else:
        response_text = "–Ø –æ—Ç—Ä–∏–º–∞–≤ –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
        
    logger.info(f"DEBUG: Attempting to send response to chat_id: {chat_id}")
    bot.send_message(chat_id, response_text)
    logger.info(f"DEBUG: Response sent (or attempted) to chat_id: {chat_id}")


# --- 18. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Render ---

logger.info("–ó–∞–ø—É—Å–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î...")
init_db()

# –¶–µ–π –±–ª–æ–∫ –ø–æ–≤–∏–Ω–µ–Ω –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—è —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –¥–æ–¥–∞—Ç–∫–∞ –Ω–∞ Render
if WEBHOOK_URL and TOKEN:
    try:
        # –í–∞–∂–ª–∏–≤–æ: –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è–º –Ω–æ–≤–æ–≥–æ
        bot.remove_webhook()
        full_webhook_url = f"{WEBHOOK_URL}/{TOKEN}"
        bot.set_webhook(url=full_webhook_url)
        logger.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {full_webhook_url}")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook: {e}", exc_info=True)
        logger.error("–ë–æ—Ç –Ω–µ –±—É–¥–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ Telegram —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É –≤–µ–±—Ö—É–∫–∞.")
        # –Ø–∫—â–æ –≤–µ–±—Ö—É–∫ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –±–æ—Ç –Ω–µ –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏, —Ç–æ–º—É –∫—Ä–∞—â–µ –≤–∏–π—Ç–∏
        exit(1)
else:
    logger.critical("WEBHOOK_URL –∞–±–æ TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ë–æ—Ç –Ω–µ –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ —Ä–µ–∂–∏–º—ñ webhook. –í–∏—Ö—ñ–¥.")
    exit(1)

# –¶–µ –æ—Å–Ω–æ–≤–Ω–∞ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥—É –¥–ª—è Flask-–¥–æ–¥–∞—Ç–∫–∞ –Ω–∞ Render
if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ Flask-–¥–æ–¥–∞—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ...")
    port = int(os.environ.get("PORT", 5000))
    # Flask app.run - –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É —Ç–∞ –¥–µ–±–∞–≥—É
    # –ù–∞ Render —Ü–µ –±—É–¥–µ gunicorn bot:app
    app.run(host="0.0.0.0", port=port, debug=True)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–µ–±—Ö—É–∫—ñ–≤ –¥–ª—è Flask
@app.route(f'/{TOKEN}', methods=['POST'])
@error_handler
def webhook_receiver():
    """–û–±—Ä–æ–±–ª—è—î –≤—Ö—ñ–¥–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ Telegram."""
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        if update.message:
            logger.info(f"DEBUG: Webhook received message update from {update.message.chat.id}, text: '{update.message.text[:50] if update.message.text else 'N/A'}'")
        elif update.callback_query:
            logger.info(f"DEBUG: Webhook received callback query update from {update.callback_query.message.chat.id}, data: '{update.callback_query.data}'")
        else:
            logger.info(f"DEBUG: Webhook received unknown update type: {update}")

        # –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è pyTelegramBotAPI –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω—å
        bot.process_new_updates([update])
        logger.info(f"DEBUG: pyTelegramBotAPI finished processing update. Returning 200 OK.")
        return '!', 200
    else:
        logger.warning("Received non-JSON request on webhook path. Ignoring.")
        return 'Hello from bot webhook!', 200

