import os
import telebot
from telebot import types
import logging
from datetime import datetime, timedelta, timezone # Keep datetime, timedelta, timezone for completeness if needed later
import re # Keep re for completeness if needed later
import json # Keep json for completeness if needed later
import requests # Keep requests for completeness if needed later
from flask import Flask, request
import psycopg2
from psycopg2 import sql as pg_sql
from psycopg2 import extras
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É .env
load_dotenv()

# --- 1. –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ë–æ—Ç–∞ ---
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
# –î–æ–¥–∞—î–º–æ –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ ValueError, —è–∫—â–æ –∑–º—ñ–Ω–Ω–∞ –æ—Ç–æ—á–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—è
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID')) if os.getenv('ADMIN_CHAT_ID') else 0
CHANNEL_ID = int(os.getenv('CHANNEL_ID')) if os.getenv('CHANNEL_ID') else 0
DATABASE_URL = os.getenv('DATABASE_URL')
MONOBANK_CARD_NUMBER = os.getenv('MONOBANK_CARD_NUMBER')
RAPIDAPI_KEY = os.getenv('RAPIDAPI_KEY')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"

WEBHOOK_URL = os.getenv('WEBHOOK_URL')

# --- 2. –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è (–í–∏–∑–Ω–∞—á–µ–Ω–æ —Ä–∞–Ω—ñ—à–µ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏—Ö –ª–æ–≥—ñ–≤) ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# --- –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–Ü –õ–û–ì–ò –î–õ–Ø –ó–ú–Ü–ù–ù–ò–• –û–¢–û–ß–ï–ù–ù–Ø ---
logger.info(f"DIAGNOSTIC: TOKEN loaded: {'<set>' if TOKEN else '<not set>'} (length: {len(TOKEN) if TOKEN else 0})")
logger.info(f"DIAGNOSTIC: WEBHOOK_URL loaded: {'<set>' if WEBHOOK_URL else '<not set>'} (value: {WEBHOOK_URL})")
logger.info(f"DIAGNOSTIC: DATABASE_URL loaded: {'<set>' if DATABASE_URL else '<not set>'}")
logger.info(f"DIAGNOSTIC: ADMIN_CHAT_ID loaded: {ADMIN_CHAT_ID}")
logger.info(f"DIAGNOSTIC: CHANNEL_ID loaded: {CHANNEL_ID}")
logger.info(f"DIAGNOSTIC: RAPIDAPI_KEY loaded: {'<set>' if RAPIDAPI_KEY else '<not set>'}")
logger.info(f"DIAGNOSTIC: GEMINI_API_KEY loaded: {'<set>' if GEMINI_API_KEY else '<not set>'}")
# --- –ö–Ü–ù–ï–¶–¨ –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–• –õ–û–ì–Ü–í ---


# –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –æ—Å–Ω–æ–≤–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
if not TOKEN:
    logger.critical("–ü–æ–º–∏–ª–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è. –í–∏—Ö—ñ–¥.")
    exit(1)
if not DATABASE_URL:
    logger.critical("–ü–æ–º–∏–ª–∫–∞: DATABASE_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è. –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ. –í–∏—Ö—ñ–¥.")
    exit(1)

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)


# --- 3. –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–∞–∑–∏ –î–∞–Ω–∏—Ö (–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞) ---
def get_db_connection():
    try:
        conn = psycopg2.connect(DATABASE_URL, cursor_factory=psycopg2.extras.DictCursor)
        return conn
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}", exc_info=True)
        return None

def init_db():
    conn = None
    try:
        conn = get_db_connection()
        if conn:
            cur = conn.cursor()
            cur.execute(pg_sql.SQL("""
                CREATE TABLE IF NOT EXISTS users (
                    chat_id BIGINT PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT
                );
            """)) # –°–ø—Ä–æ—â–µ–Ω–æ, —Ç—ñ–ª—å–∫–∏ users —Ç–∞–±–ª–∏—Ü—è
            conn.commit()
            logger.info("–¢–∞–±–ª–∏—Ü—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∞–±–æ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å.")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

# --- 4. –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ ---
def error_handler(func):
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ {func.__name__}: {e}", exc_info=True)
            chat_id_to_notify = ADMIN_CHAT_ID
            if args:
                first_arg = args[0]
                if isinstance(first_arg, types.Message):
                    chat_id_to_notify = first_arg.chat.id
                elif isinstance(first_arg, types.CallbackQuery):
                    chat_id_to_notify = first_arg.message.chat.id
            
            try:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ADMIN_CHAT_ID, –ª–∏—à–µ —è–∫—â–æ –≤—ñ–Ω –∫–æ—Ä–µ–∫—Ç–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π
                if ADMIN_CHAT_ID:
                    bot.send_message(ADMIN_CHAT_ID, f"üö® –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –±–æ—Ç—ñ!\n–§—É–Ω–∫—Ü—ñ—è: {func.__name__}\n–ü–æ–º–∏–ª–∫–∞: {e}\n–î–∏–≤—ñ—Ç—å—Å—è –¥–µ—Ç–∞–ª—ñ –≤ –ª–æ–≥–∞—Ö Render.")
                if chat_id_to_notify and chat_id_to_notify != ADMIN_CHAT_ID:
                    bot.send_message(chat_id_to_notify, "üòî –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∂–µ —Å–ø–æ–≤—ñ—â–µ–Ω–∏–π.")
            except Exception as e_notify:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {e_notify}")
    return wrapper

# --- 5. –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –ë–î-–æ–ø–µ—Ä–∞—Ü—ñ–π ---
@error_handler
def save_user(message_or_user):
    # –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è chat_id –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
    chat_id = None
    if isinstance(message_or_user, types.Message):
        chat_id = message_or_user.from_user.id
        username = message_or_user.from_user.username
        first_name = message_or_user.from_user.first_name
        last_name = message_or_user.from_user.last_name
    elif isinstance(message_or_user, types.User):
        chat_id = message_or_user.id
        username = message_or_user.username
        first_name = message_or_user.first_name
        last_name = message_or_user.last_name
    else:
        logger.warning(f"save_user –æ—Ç—Ä–∏–º–∞–≤ –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø: {type(message_or_user)}")
        return

    logger.info(f"DEBUG_STUB: save_user called for {chat_id}")
    conn = get_db_connection()
    if not conn: return
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("""
            INSERT INTO users (chat_id, username, first_name, last_name)
            VALUES (%s, %s, %s, %s)
            ON CONFLICT (chat_id) DO UPDATE
            SET username = EXCLUDED.username, first_name = EXCLUDED.first_name, 
            last_name = EXCLUDED.last_name;
        """), (chat_id, username, first_name, last_name))
        conn.commit()
        logger.info(f"DEBUG_STUB: User {chat_id} saved/updated in DB.")
    except Exception as e:
        logger.error(f"DEBUG_STUB: Error saving user {chat_id}: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

@error_handler
def log_statistics(action, user_id=None, product_id=None, details=None):
    logger.info(f"DEBUG_STUB: log_statistics called for action: {action}, user: {user_id}")
    pass # –í —Ü—ñ–π –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó –Ω–µ —Ä–æ–±–∏—Ç—å –∑–∞–ø–∏—Å –¥–æ –ë–î

# --- 6. –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (–º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏) ---
@bot.message_handler(commands=['start'])
@error_handler
def send_welcome(message):
    logger.info(f"DEBUG: send_welcome handler CALLED for chat_id: {message.chat.id}, message_text: '{message.text}'")
    chat_id = message.chat.id
    
    save_user(message)
    log_statistics('start', chat_id)

    welcome_text = "–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à SellerBot. –í–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ /start. –ë–∞—á—É, —â–æ –≤–∏ —Ç—É—Ç!"
    
    logger.info(f"DEBUG: Attempting to send welcome message to chat_id: {chat_id}")
    bot.send_message(chat_id, welcome_text)
    logger.info(f"DEBUG: Welcome message sent (or attempted) to chat_id: {chat_id}")

@bot.message_handler(commands=['test'])
@error_handler
def send_test_message(message):
    logger.info(f"DEBUG: send_test_message handler CALLED for chat_id: {message.chat.id}, message_text: '{message.text}'")
    chat_id = message.chat.id
    test_text = "–¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ë–æ—Ç –ø—Ä–∞—Ü—é—î! üéâ"
    logger.info(f"DEBUG: Attempting to send test message to chat_id: {chat_id}")
    bot.send_message(chat_id, test_text)
    logger.info(f"DEBUG: Test message sent (or attempted) to chat_id: {chat_id}")

@bot.message_handler(func=lambda message: True, content_types=['text', 'photo', 'location'])
@error_handler
def handle_all_messages(message):
    logger.info(f"DEBUG: handle_all_messages handler CALLED for chat_id: {message.chat.id}, type: {message.content_type}, text: '{message.text[:50] if message.text else 'N/A'}'")
    chat_id = message.chat.id
    
    save_user(message)

    if message.content_type == 'text':
        response_text = f"–Ø –æ—Ç—Ä–∏–º–∞–≤ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: '{message.text}'. –î—è–∫—É—é –∑–∞ —Ä–æ–∑–º–æ–≤—É!"
    elif message.content_type == 'photo':
        response_text = "–Ø –æ—Ç—Ä–∏–º–∞–≤ –≤–∞—à–µ —Ñ–æ—Ç–æ. –ü–æ–∫–∏ —â–æ –Ω–µ –∑–Ω–∞—é, —â–æ –∑ –Ω–∏–º —Ä–æ–±–∏—Ç–∏, –∫—Ä—ñ–º —è–∫ —Å–∫–∞–∑–∞—Ç–∏ '–¥—è–∫—É—é –∑–∞ —Ñ–æ—Ç–æ!'."
    elif message.content_type == 'location':
        response_text = f"–Ø –æ—Ç—Ä–∏–º–∞–≤ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é: {message.location.latitude}, {message.location.longitude}. –î–µ—Å—å —Ç—É—Ç!"
    else:
        response_text = "–Ø –æ—Ç—Ä–∏–º–∞–≤ –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
        
    logger.info(f"DEBUG: Attempting to send general response to chat_id: {chat_id}")
    bot.send_message(chat_id, response_text)
    logger.info(f"DEBUG: General response sent (or attempted) to chat_id: {chat_id}")


# --- 7. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Render ---

logger.info("–ó–∞–ø—É—Å–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î...")
init_db()

# –õ–æ–≥—É–≤–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
logger.info(f"DEBUG: Number of message handlers registered: {len(bot.message_handlers)}")
logger.info(f"DEBUG: Number of callback query handlers registered: {len(bot.callback_query_handlers)}")


# –¶–µ–π –±–ª–æ–∫ –ø–æ–≤–∏–Ω–µ–Ω –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—è —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –¥–æ–¥–∞—Ç–∫–∞ –Ω–∞ Render
if WEBHOOK_URL and TOKEN:
    logger.info(f"DEBUG: WEBHOOK_URL is set ({WEBHOOK_URL}), TOKEN is set.")
    try:
        bot.remove_webhook()
        full_webhook_url = f"{WEBHOOK_URL}/{TOKEN}"
        bot.set_webhook(url=full_webhook_url)
        logger.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {full_webhook_url}")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook: {e}", exc_info=True)
        logger.error("–ë–æ—Ç –Ω–µ –±—É–¥–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ Telegram —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É –≤–µ–±—Ö—É–∫–∞.")
        exit(1)
else:
    logger.critical(f"WEBHOOK_URL ('{WEBHOOK_URL}') –∞–±–æ TELEGRAM_BOT_TOKEN ('<set>' if TOKEN else '<not set>') –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ë–æ—Ç –Ω–µ –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ —Ä–µ–∂–∏–º—ñ webhook. –í–∏—Ö—ñ–¥.")
    exit(1)

# –¶–µ –æ—Å–Ω–æ–≤–Ω–∞ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥—É –¥–ª—è Flask-–¥–æ–¥–∞—Ç–∫–∞ –Ω–∞ Render
if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ Flask-–¥–æ–¥–∞—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ...")
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–µ–±—Ö—É–∫—ñ–≤ –¥–ª—è Flask
@app.route(f'/{TOKEN}', methods=['POST'])
def webhook_receiver():
    """–û–±—Ä–æ–±–ª—è—î –≤—Ö—ñ–¥–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ Telegram."""
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        logger.info(f"DEBUG: Raw incoming update JSON: {json_string[:200]}...")
        
        try:
            update = telebot.types.Update.de_json(json_string)
            
            if update.message:
                logger.info(f"DEBUG: Webhook received message update from {update.message.chat.id}, text: '{update.message.text[:50] if update.message.text else 'N/A'}'")
            elif update.callback_query:
                logger.info(f"DEBUG: Webhook received callback query update from {update.callback_query.message.chat.id}, data: '{update.callback_query.data}'")
            else:
                logger.info(f"DEBUG: Webhook received unknown update type: {update}")

            logger.info("DEBUG: Attempting to process update with bot.process_new_updates...")
            bot.process_new_updates([update])
            logger.info("DEBUG: bot.process_new_updates finished.")
            return '!', 200
        except Exception as e:
            logger.critical(f"FATAL ERROR during webhook processing or pyTelegramBotAPI dispatch: {e}", exc_info=True)
            return 'Error processing update', 500
    else:
        logger.warning("Received non-JSON request on webhook path. Ignoring.")
        return 'Hello from bot webhook!', 200
