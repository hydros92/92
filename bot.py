import sqlite3
import telebot
import logging
import os
from datetime import datetime, timedelta
import re
import threading
import time

# --- 1. –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ ---
# –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN') # –ó–∞–ª–∏—à—Ç–µ –ø—É—Å—Ç–∏–º, —è–∫—â–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Heroku config vars

# –Ø–∫—â–æ –≤–∏ –∑–∞–ø—É—Å–∫–∞—î—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ —ñ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ config vars, —Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—è–¥–æ–∫
# TOKEN = '8039977178:AAGS-GbH-lhljGGG6OgJ2iMU_ncB-JzeOvU' # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω–∏–π —Ç–æ–∫–µ–Ω

# --- 2. ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
# –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
admin_chat_id_str = os.getenv('ADMIN_CHAT_ID') # –ó–∞–ª–∏—à—Ç–µ –ø—É—Å—Ç–∏–º, —è–∫—â–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Heroku config vars

# –Ø–∫—â–æ –≤–∏ –∑–∞–ø—É—Å–∫–∞—î—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ —ñ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ config vars, —Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—è–¥–æ–∫
# admin_chat_id_str = '8184456641' # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω–∏–π ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞

ADMIN_CHAT_ID = int(admin_chat_id_str) if admin_chat_id_str else None
if ADMIN_CHAT_ID is None:
    logging.error("ADMIN_CHAT_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ë–æ—Ç –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ –±–µ–∑ ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    # –Ø–∫—â–æ ADMIN_CHAT_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –º–æ–∂–Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    # –∞–±–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –≤–∏–Ω—è—Ç–æ–∫ –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞
    # ADMIN_CHAT_ID = 8184456641 # –ü—Ä–∏–∫–ª–∞–¥ ID –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    # raise ValueError("ADMIN_CHAT_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")


# --- 3. ID –∫–∞–Ω–∞–ª—É –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π ---
# –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
channel_id_str = os.getenv('CHANNEL_ID') # –ó–∞–ª–∏—à—Ç–µ –ø—É—Å—Ç–∏–º, —è–∫—â–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Heroku config vars

# –Ø–∫—â–æ –≤–∏ –∑–∞–ø—É—Å–∫–∞—î—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ —ñ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ config vars, —Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—è–¥–æ–∫
# channel_id_str = '-1002535586055' # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ ID –≤–∞—à–æ–≥–æ –∫–∞–Ω–∞–ª—É (–∑ –º—ñ–Ω—É—Å–æ–º –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö)

CHANNEL_ID = int(channel_id_str) if channel_id_str else None
if CHANNEL_ID is None:
    logging.error("CHANNEL_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ë–æ—Ç –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ –±–µ–∑ ID –∫–∞–Ω–∞–ª—É.")
    # –Ø–∫—â–æ CHANNEL_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –º–æ–∂–Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    # –∞–±–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –≤–∏–Ω—è—Ç–æ–∫ –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞
    # CHANNEL_ID = -1002535586055 # –ü—Ä–∏–∫–ª–∞–¥ ID –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    # raise ValueError("CHANNEL_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")


# --- 4. –ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ Monobank –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∫–æ–º—ñ—Å—ñ—ó ---
# –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
MONOBANK_CARD_NUMBER = os.getenv('MONOBANK_CARD_NUMBER')

# –Ø–∫—â–æ –≤–∏ –∑–∞–ø—É—Å–∫–∞—î—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ —ñ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ config vars, —Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—è–¥–æ–∫
# MONOBANK_CARD_NUMBER = '4441 1111 5302 1484' # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏


# --- 5. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    handlers=[
                        logging.FileHandler("bot.log"),
                        logging.StreamHandler()
                    ])
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(TOKEN)

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–¥–ª—è –±–∞–≥–∞—Ç–æ—Å—Ç—É–ø–µ–Ω–µ–≤–∏—Ö –¥—ñ–∞–ª–æ–≥—ñ–≤)
user_states = {} # {user_id: 'awaiting_title', 'awaiting_description', etc.}
user_data = {}   # {user_id: {title: '', description: '', price: '', photo: ''}}

# --- –§—É–Ω–∫—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö ---
def init_db():
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ products, —è–∫—â–æ —ó—ó –Ω–µ —ñ—Å–Ω—É—î
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            title TEXT,
            description TEXT,
            price REAL,
            photo_file_id TEXT,
            status TEXT DEFAULT 'pending', -- pending, approved, rejected, sold
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            moderator_message_id INTEGER,
            channel_message_id INTEGER -- –ù–æ–≤–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ
        )
    ''')

    # –î–æ–¥–∞—î–º–æ —Å—Ç–æ–≤–ø–µ—Ü—å channel_message_id, —è–∫—â–æ –π–æ–≥–æ –Ω–µ —ñ—Å–Ω—É—î (–¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö –±–∞–∑ –¥–∞–Ω–∏—Ö)
    try:
        cursor.execute("SELECT channel_message_id FROM products LIMIT 1")
    except sqlite3.OperationalError:
        cursor.execute("ALTER TABLE products ADD COLUMN channel_message_id INTEGER")
        logging.info("–î–æ–¥–∞–Ω–æ —Å—Ç–æ–≤–ø–µ—Ü—å 'channel_message_id' –¥–æ —Ç–∞–±–ª–∏—Ü—ñ 'products'.")

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ users, —è–∫—â–æ —ó—ó –Ω–µ —ñ—Å–Ω—É—î
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            blocked BOOLEAN DEFAULT 0
        )
    ''')

    conn.commit()
    conn.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –∞–±–æ –≤–∂–µ —ñ—Å–Ω—É—î.")


def add_product(user_id, title, description, price, photo_file_id):
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO products (user_id, title, description, price, photo_file_id) VALUES (?, ?, ?, ?, ?)",
                   (user_id, title, description, price, photo_file_id))
    product_id = cursor.lastrowid
    conn.commit()
    conn.close()
    return product_id

def get_product(product_id):
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM products WHERE id = ?", (product_id,))
    product = cursor.fetchone()
    conn.close()
    return product

def update_product_status(product_id, status, moderator_message_id=None, channel_message_id=None):
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    if moderator_message_id and channel_message_id:
        cursor.execute("UPDATE products SET status = ?, moderator_message_id = ?, channel_message_id = ? WHERE id = ?",
                       (status, moderator_message_id, channel_message_id, product_id))
    elif moderator_message_id:
        cursor.execute("UPDATE products SET status = ?, moderator_message_id = ? WHERE id = ?",
                       (status, moderator_message_id, product_id))
    else:
        cursor.execute("UPDATE products SET status = ? WHERE id = ?",
                       (status, product_id))
    conn.commit()
    conn.close()

def get_all_products_by_status(status=None):
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    if status:
        cursor.execute("SELECT * FROM products WHERE status = ?", (status,))
    else:
        cursor.execute("SELECT * FROM products")
    products = cursor.fetchall()
    conn.close()
    return products

def add_user(user_id):
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
    conn.commit()
    conn.close()

def is_user_blocked(user_id):
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute("SELECT blocked FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result and result[0] == 1

def block_user(user_id):
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET blocked = 1 WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()

def unblock_user(user_id):
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET blocked = 0 WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()

def get_all_users():
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, blocked FROM users")
    users = cursor.fetchall()
    conn.close()
    return users

# --- –§—É–Ω–∫—Ü—ñ—ó –±–æ—Ç–∞ ---

@bot.message_handler(commands=['start'])
def send_welcome(message):
    add_user(message.chat.id)
    if is_user_blocked(message.chat.id):
        bot.send_message(message.chat.id, "–í–∏ –±—É–ª–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
        return

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.chat.id} —Ä–æ–∑–ø–æ—á–∞–≤ –≤–∑–∞—î–º–æ–¥—ñ—é –∑ –±–æ—Ç–æ–º.")
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    itembtn1 = telebot.types.KeyboardButton('‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä')
    itembtn2 = telebot.types.KeyboardButton('üì¶ –ú–æ—ó —Ç–æ–≤–∞—Ä–∏')
    markup.add(itembtn1, itembtn2)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –ø—Ä–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä.\n–û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä')
def add_item_start(message):
    if is_user_blocked(message.chat.id):
        bot.send_message(message.chat.id, "–í–∏ –±—É–ª–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
        return

    user_states[message.chat.id] = 'awaiting_title'
    user_data[message.chat.id] = {}
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:")

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'awaiting_title')
def process_title(message):
    user_data[message.chat.id]['title'] = message.text
    user_states[message.chat.id] = 'awaiting_description'
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É:")

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'awaiting_description')
def process_description(message):
    user_data[message.chat.id]['description'] = message.text
    user_states[message.chat.id] = 'awaiting_price'
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É (—Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ):")

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'awaiting_price')
def process_price(message):
    try:
        price = float(message.text.replace(',', '.'))
        if price <= 0:
            raise ValueError
        user_data[message.chat.id]['price'] = price
        user_states[message.chat.id] = 'awaiting_photo'
        bot.send_message(message.chat.id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É:")
    except ValueError:
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Ü—ñ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 100 –∞–±–æ 100.50).")

@bot.message_handler(content_types=['photo'], func=lambda message: user_states.get(message.chat.id) == 'awaiting_photo')
def process_photo(message):
    photo_file_id = message.photo[-1].file_id
    user_data[message.chat.id]['photo'] = photo_file_id

    product_id = add_product(
        message.chat.id,
        user_data[message.chat.id]['title'],
        user_data[message.chat.id]['description'],
        user_data[message.chat.id]['price'],
        user_data[message.chat.id]['photo']
    )
    logger.info(f"–¢–æ–≤–∞—Ä ID:{product_id} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.chat.id} –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î.")

    # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω —ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    del user_states[message.chat.id]
    del user_data[message.chat.id]

    bot.send_message(message.chat.id, "–í–∞—à —Ç–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ! –í—ñ–Ω –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.")

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–æ–≤–∞—Ä –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
    send_product_to_admin_for_moderation(product_id, message.chat.id)
    logger.info(f"–¢–æ–≤–∞—Ä ID:{product_id} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_CHAT_ID} –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó.")

def send_product_to_admin_for_moderation(product_id, user_id):
    product = get_product(product_id)
    if product:
        title, description, price, photo_file_id = product[2], product[3], product[4], product[5]
        product_owner_link = f"tg://user?id={user_id}" # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

        message_text = (
            f"‚ùóÔ∏è *–ù–æ–≤–∏–π —Ç–æ–≤–∞—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é* ‚ùóÔ∏è\n\n"
            f"–ù–∞–∑–≤–∞: *{title}*\n"
            f"–û–ø–∏—Å: _{description}_\n"
            f"–¶—ñ–Ω–∞: *{price} –≥—Ä–Ω*\n"
            f"–ü—Ä–æ–¥–∞–≤–µ—Ü—å: [–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á](tg://user?id={user_id}) (ID: `{user_id}`)\n"
            f"ID —Ç–æ–≤–∞—Ä—É: `{product_id}`"
        )

        markup = telebot.types.InlineKeyboardMarkup()
        approve_button = telebot.types.InlineKeyboardButton("‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"approve_{product_id}")
        reject_button = telebot.types.InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{product_id}")
        markup.add(approve_button, reject_button)

        sent_message = bot.send_photo(ADMIN_CHAT_ID, photo_file_id, caption=message_text,
                                    parse_mode='Markdown', reply_markup=markup)
        update_product_status(product_id, 'pending', moderator_message_id=sent_message.message_id)
    else:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä ID: {product_id} –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó.")


@bot.callback_query_handler(func=lambda call: call.data.startswith(('approve_', 'reject_')))
def callback_inline(call):
    if call.from_user.id != ADMIN_CHAT_ID:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.")
        return

    action = call.data.split('_')[0]
    product_id = int(call.data.split('_')[1])
    product = get_product(product_id)

    if not product:
        bot.edit_message_text("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ.", call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id)
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä—É –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è –∑ –º–æ–º–µ–Ω—Ç—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é
    current_status = product[6] # status is at index 6
    if current_status != 'pending':
        bot.answer_callback_query(call.id, f"–¶–µ–π —Ç–æ–≤–∞—Ä –≤–∂–µ –±—É–≤ {current_status}.", show_alert=True)
        return

    user_id = product[1] # user_id is at index 1
    title = product[2]
    description = product[3]
    price = product[4]
    photo_file_id = product[5]
    moderator_message_id = call.message.message_id

    try:
        if action == 'approve':
            # –ü—É–±–ª—ñ–∫—É—î–º–æ —Ç–æ–≤–∞—Ä —É –∫–∞–Ω–∞–ª—ñ
            product_message_text = (
                f"‚ú® *–ù–û–í–ò–ô –¢–û–í–ê–†!* ‚ú®\n\n"
                f"–ù–∞–∑–≤–∞: *{title}*\n"
                f"–û–ø–∏—Å: _{description}_\n"
                f"–¶—ñ–Ω–∞: *{price} –≥—Ä–Ω*\n\n"
                f"–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –¥–æ –ø—Ä–æ–¥–∞–≤—Ü—è: [–ù–∞–ø–∏—Å–∞—Ç–∏ –ø—Ä–æ–¥–∞–≤—Ü—é](tg://user?id={user_id})\n"
                f"–ê–±–æ –∑–∞ ID: `{user_id}`\n\n"
                f"–û–≥–æ–ª–æ—à–µ–Ω–Ω—è #{product_id}" # –î–æ–¥–∞—î–º–æ ID —Ç–æ–≤–∞—Ä—É –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            )
            sent_to_channel_message = bot.send_photo(CHANNEL_ID, photo_file_id, caption=product_message_text,
                                                     parse_mode='Markdown')
            channel_message_id = sent_to_channel_message.message_id # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ

            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä—É —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ
            update_product_status(product_id, 'approved', moderator_message_id, channel_message_id)
            bot.edit_message_text(f"‚úÖ –¢–æ–≤–∞—Ä ID:{product_id} –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.", call.message.chat.id, call.message.message_id)
            bot.send_message(user_id, f"üéâ –í–∞—à —Ç–æ–≤–∞—Ä '{title}' –±—É–≤ —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏–π —É –∫–∞–Ω–∞–ª—ñ!")
            logger.info(f"–¢–æ–≤–∞—Ä ID:{product_id} —Å—Ö–≤–∞–ª–µ–Ω–æ —Ç–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ.")

        elif action == 'reject':
            update_product_status(product_id, 'rejected', moderator_message_id)
            bot.edit_message_text(f"‚ùå –¢–æ–≤–∞—Ä ID:{product_id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.", call.message.chat.id, call.message.message_id)
            bot.send_message(user_id, f"üòî –í–∞—à —Ç–æ–≤–∞—Ä '{title}' –±—É–≤ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∏–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            logger.info(f"–¢–æ–≤–∞—Ä ID:{product_id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")

    except telebot.apihelper.ApiTelegramException as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ Telegram API –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó/–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É ID:{product_id}: {e}")
        bot.answer_callback_query(call.id, f"–ü–æ–º–∏–ª–∫–∞ Telegram API: {e}", show_alert=True)
    except Exception as e:
        logger.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—É ID:{product_id}: {e}", exc_info=True)
        bot.answer_callback_query(call.id, f"–í–∏–Ω–∏–∫–ª–∞ –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞: {e}", show_alert=True)
    finally:
        bot.answer_callback_query(call.id)


@bot.message_handler(func=lambda message: message.text == 'üì¶ –ú–æ—ó —Ç–æ–≤–∞—Ä–∏')
def my_items(message):
    if is_user_blocked(message.chat.id):
        bot.send_message(message.chat.id, "–í–∏ –±—É–ª–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
        return

    user_id = message.chat.id
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, title, status FROM products WHERE user_id = ?", (user_id,))
    user_products = cursor.fetchall()
    conn.close()

    if not user_products:
        bot.send_message(user_id, "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.")
        return

    response_text = "–í–∞—à—ñ —Ç–æ–≤–∞—Ä–∏:\n\n"
    for product_id, title, status in user_products:
        response_text += f"ID: {product_id}\n–ù–∞–∑–≤–∞: {title}\n–°—Ç–∞—Ç—É—Å: {status}\n\n"

    bot.send_message(user_id, response_text)

# --- –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å ---

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.chat.id != ADMIN_CHAT_ID:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ.")
        return

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"))
    markup.add(telebot.types.InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏", callback_data="admin_users"))
    markup.add(telebot.types.InlineKeyboardButton("üì¶ –ú–æ–¥–µ—Ä–∞—Ü—ñ—è —Ç–æ–≤–∞—Ä—ñ–≤", callback_data="admin_moderation"))
    markup.add(telebot.types.InlineKeyboardButton("üí∞ –ö–æ–º—ñ—Å—ñ—è Monobank", callback_data="admin_monobank"))
    markup.add(telebot.types.InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ —Ç–æ–≤–∞—Ä–∏", callback_data="admin_clean_old_products"))

    bot.send_message(ADMIN_CHAT_ID, "–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_'))
def admin_callbacks(call):
    if call.from_user.id != ADMIN_CHAT_ID:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.")
        return

    if call.data == "admin_stats":
        send_stats_to_admin(call)
    elif call.data == "admin_users":
        send_user_management_panel(call.message.chat.id)
        bot.edit_message_text("–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏:", call.message.chat.id, call.message.message_id, reply_markup=None)
    elif call.data == "admin_moderation":
        send_moderation_queue(call)
    elif call.data == "admin_monobank":
        send_monobank_info(call)
    elif call.data == "admin_clean_old_products":
        confirm_clean_old_products(call)
    
    bot.answer_callback_query(call.id) # –ó–∞–∫—Ä–∏—Ç—Ç—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏


def send_stats_to_admin(call):
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()

    # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    cursor.execute("SELECT COUNT(*) FROM users")
    total_users = cursor.fetchone()[0]

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞—Ö –∑–∞ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    cursor.execute("SELECT status, COUNT(*) FROM products GROUP BY status")
    product_stats_raw = cursor.fetchall()
    product_stats = {status: count for status, count in product_stats_raw}

    # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    cursor.execute("SELECT COUNT(*) FROM users WHERE blocked = 1")
    blocked_users_count = cursor.fetchone()[0]

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
    today = datetime.now().strftime('%Y-%m-%d')
    cursor.execute("SELECT COUNT(*) FROM products WHERE DATE(created_at) = ?", (today,))
    today_products = cursor.fetchone()[0]

    conn.close()

    stats_text = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
        f"üë• *–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:*\n"
        f"‚Ä¢ –í—Å—å–æ–≥–æ: {total_users}\n"
        f"‚Ä¢ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ: {blocked_users_count}\n\n"
        f"üì¶ *–¢–æ–≤–∞—Ä–∏:*\n"
        f"‚Ä¢ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {product_stats.get('pending', 0)}\n"
        f"‚Ä¢ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: {product_stats.get('approved', 0)}\n"
        f"‚Ä¢ –í—ñ–¥—Ö–∏–ª–µ–Ω–æ: {product_stats.get('rejected', 0)}\n"
        f"‚Ä¢ –ü—Ä–æ–¥–∞–Ω–æ: {product_stats.get('sold', 0)}\n\n"
        f"üìÖ *–°—å–æ–≥–æ–¥–Ω—ñ –¥–æ–¥–∞–Ω–æ:* {today_products}\n"
        f"üìà *–í—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤:* {sum(product_stats.values())}"
    )

    bot.edit_message_text(stats_text, call.message.chat.id, call.message.message_id,
                         parse_mode='Markdown')
    bot.answer_callback_query(call.id)


def send_user_management_panel(chat_id):
    users = get_all_users()
    if not users:
        bot.send_message(chat_id, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    markup = telebot.types.InlineKeyboardMarkup()
    for user_id, blocked_status in users:
        status_text = "üîí –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ" if blocked_status else "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π"
        button_text = f"ID: {user_id} - {status_text}"
        callback_data = f"toggle_block_{user_id}"
        markup.add(telebot.types.InlineKeyboardButton(button_text, callback_data=callback_data))

    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –±–ª–æ–∫—É–≤–∞–Ω–Ω—è:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('toggle_block_'))
def toggle_block_user(call):
    if call.from_user.id != ADMIN_CHAT_ID:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.")
        return

    user_id_to_toggle = int(call.data.split('_')[2])

    if is_user_blocked(user_id_to_toggle):
        unblock_user(user_id_to_toggle)
        bot.send_message(user_id_to_toggle, "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–≤ –≤–∞—à –∞–∫–∞—É–Ω—Ç. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id_to_toggle} —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.")
    else:
        block_user(user_id_to_toggle)
        bot.send_message(user_id_to_toggle, "–í–∞—à –∞–∫–∞—É–Ω—Ç –±—É–≤ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id_to_toggle} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.")

    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
    bot.edit_message_text("–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...", call.message.chat.id, call.message.message_id)
    send_user_management_panel(call.message.chat.id)
    bot.answer_callback_query(call.id)

def send_moderation_queue(call):
    pending_products = get_all_products_by_status('pending')
    if not pending_products:
        bot.edit_message_text("–ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó.", call.message.chat.id, call.message.message_id)
        return

    for product_info in pending_products:
        product_id = product_info[0]
        user_id = product_info[1]
        title = product_info[2]
        description = product_info[3]
        price = product_info[4]
        photo_file_id = product_info[5]

        message_text = (
            f"‚ùóÔ∏è *–ù–æ–≤–∏–π —Ç–æ–≤–∞—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é* ‚ùóÔ∏è\n\n"
            f"–ù–∞–∑–≤–∞: *{title}*\n"
            f"–û–ø–∏—Å: _{description}_\n"
            f"–¶—ñ–Ω–∞: *{price} –≥—Ä–Ω*\n"
            f"–ü—Ä–æ–¥–∞–≤–µ—Ü—å: [–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á](tg://user?id={user_id}) (ID: `{user_id}`)\n"
            f"ID —Ç–æ–≤–∞—Ä—É: `{product_id}`"
        )

        markup = telebot.types.InlineKeyboardMarkup()
        approve_button = telebot.types.InlineKeyboardButton("‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"approve_{product_id}")
        reject_button = telebot.types.InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{product_id}")
        markup.add(approve_button, reject_button)

        try:
            bot.send_photo(call.message.chat.id, photo_file_id, caption=message_text,
                           parse_mode='Markdown', reply_markup=markup)
            # –û–Ω–æ–≤–ª—é—î–º–æ moderator_message_id, —è–∫—â–æ –≤–æ–Ω–æ –Ω–µ –±—É–ª–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞–Ω—ñ—à–µ
            # –∞–±–æ —è–∫—â–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–µ—Ä–µ–≥–ª—è–¥–∞—î —á–µ—Ä–≥—É.
            # –ù–∞ —Ü—å–æ–º—É –µ—Ç–∞–ø—ñ, –º–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
            # –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ —ñ—Å–Ω—É—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ moderator_message_id
            # —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –π–æ–≥–æ —Ç—É—Ç.
        except telebot.apihelper.ApiTelegramException as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ID:{product_id} –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é –∞–¥–º—ñ–Ω—É: {e}")
            bot.send_message(call.message.chat.id, f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ID:{product_id} –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é: {e}")

    bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.")


def send_monobank_info(call):
    if MONOBANK_CARD_NUMBER:
        message_text = (
            f"üí≥ *–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ Monobank –¥–ª—è –∫–æ–º—ñ—Å—ñ—ó:*\n\n"
            f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏: `{MONOBANK_CARD_NUMBER}`\n\n"
            f"–¶–µ–π –Ω–æ–º–µ—Ä –±—É–¥–µ –Ω–∞–¥–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∫–æ–º—ñ—Å—ñ—ó –∑–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é, —è–∫—â–æ –≤–∏ –≤–ø—Ä–æ–≤–∞–¥–∏—Ç–µ —Ç–∞–∫—É —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å."
        )
    else:
        message_text = "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ Monobank –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ `MONOBANK_CARD_NUMBER`."

    bot.edit_message_text(message_text, call.message.chat.id, call.message.message_id, parse_mode='Markdown')
    bot.answer_callback_query(call.id)

def confirm_clean_old_products(call):
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("–¢–∞–∫, –æ—á–∏—Å—Ç–∏—Ç–∏ (—Å—Ç–∞—Ä—à—ñ 30 –¥–Ω—ñ–≤)", callback_data="confirm_clean_old_products_yes"))
    markup.add(telebot.types.InlineKeyboardButton("–ù—ñ, —Å–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="confirm_clean_old_products_no"))
    bot.edit_message_text("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏, –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ –±—ñ–ª—å—à–µ 30 –¥–Ω—ñ–≤ —Ç–æ–º—É? –¶—è –¥—ñ—è –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∞.",
                          call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_clean_old_products_'))
def handle_clean_old_products_confirmation(call):
    if call.from_user.id != ADMIN_CHAT_ID:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.")
        return

    if call.data == "confirm_clean_old_products_yes":
        deleted_count = clean_old_products()
        bot.edit_message_text(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω—ñ–≤).",
                              call.message.chat.id, call.message.message_id)
        logger.info(f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∏–¥–∞–ª–∏–≤ {deleted_count} —Å—Ç–∞—Ä–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.")
    else: # confirm_clean_old_products_no
        bot.edit_message_text("–û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", call.message.chat.id, call.message.message_id)
    
    bot.answer_callback_query(call.id)


def clean_old_products():
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    # –í–∏–¥–∞–ª—è—î–º–æ —Ç–æ–≤–∞—Ä–∏, —è–∫—ñ –±—É–ª–∏ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ (approved) –±—ñ–ª—å—à–µ 30 –¥–Ω—ñ–≤ —Ç–æ–º—É
    # –ê–±–æ –∂ –≤—Å—ñ —Å—Ç–∞—Ç—É—Å–∏? –ó–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –≤–∞—à–æ—ó –ª–æ–≥—ñ–∫–∏.
    # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª—è—Ç–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ —Å—Ç–∞—Ä—à—ñ 30 –¥–Ω—ñ–≤, —è–∫—ñ –Ω–µ 'sold'
    # –ê–±–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ, —è–∫—ñ –±—É–ª–∏ 'approved' —ñ 'created_at' –±—ñ–ª—å—à–µ 30 –¥–Ω—ñ–≤ —Ç–æ–º—É.
    # –î–∞–≤–∞–π—Ç–µ –∑—Ä–æ–±–∏–º–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤, —è–∫—ñ –ù–ï 'pending' —ñ –ù–ï 'sold' —Ç–∞ —Å—Ç–∞—Ä—à—ñ 30 –¥–Ω—ñ–≤.
    # –Ø–∫—â–æ —Ç–æ–≤–∞—Ä 'sold', –º–æ–∂–ª–∏–≤–æ, –π–æ–≥–æ –≤–∞—Ä—Ç–æ –∑–∞–ª–∏—à–∏—Ç–∏ –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó.
    # –Ø–∫—â–æ 'pending', —Ç–æ –≤—ñ–Ω —â–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó.
    
    thirty_days_ago = datetime.now() - timedelta(days=30)
    cursor.execute("DELETE FROM products WHERE created_at < ? AND status NOT IN ('pending', 'sold')", (thirty_days_ago,))
    deleted_rows = cursor.rowcount
    conn.commit()
    conn.close()
    return deleted_rows


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
    init_db()
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –ü–æ—á–∞—Ç–æ–∫ polling...")
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –∫–æ–º–∞–Ω–¥ –∞–±–æ —Ç–µ–∫—Å—Ç—É, —è–∫–∏–π –Ω–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è
    @bot.message_handler(func=lambda message: True, content_types=['text'])
    def echo_all(message):
        if message.chat.id == ADMIN_CHAT_ID:
            # –î–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ "–ù–µ —Ä–æ–∑—É–º—ñ—é..."
            return
        if user_states.get(message.chat.id):
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Å—Ç–∞–Ω—ñ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è, –∞–ª–µ –Ω–µ –¥–ª—è —Ü—å–æ–≥–æ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç—É,
            # –∞–±–æ —è–∫—â–æ —Ü–µ –ø—Ä–æ—Å—Ç–æ –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–µ–∫—Å—Ç —É —Å–µ—Ä–µ–¥–∏–Ω—ñ –¥—ñ–∞–ª–æ–≥—É
            bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π. –Ø –æ—á—ñ–∫—É—é –Ω–∞ —ñ–Ω—à–∏–π —Ç–∏–ø –¥–∞–Ω–∏—Ö.")
        else:
            bot.send_message(message.chat.id, "–í–∏–±–∞—á—Ç–µ, —è –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏ –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –∞–±–æ /start.")


    bot.infinity_polling()