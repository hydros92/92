import sqlite3
import os
import telebot
from telebot import types
import logging
from datetime import datetime, timedelta
import re
import json
import requests
from dotenv import load_dotenv
from flask import Flask, request # Keep Flask and request here
import time

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –ù–ê–ô–ü–ï–†–®–ï ---
load_dotenv()

# --- 1. –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ë–æ—Ç–∞ (–ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞) ---
# TOKEN –ü–û–í–ò–ù–ï–ù –±—É—Ç–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –î–û telebot.TeleBot(TOKEN)
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8039977178:AAGS-GbH-lhljGGG6OgJ2iMU_ncB-JzeOvU') # –ó–ê–ú–Ü–ù–Ü–¢–¨ –¶–ï–ô –¢–û–ö–ï–ù –ù–ê –í–ê–® –ê–ö–¢–£–ê–õ–¨–ù–ò–ô!
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID', '8184456641')) # –ó–ê–ú–Ü–ù–Ü–¢–¨ –ù–ê –í–ê–® CHAT_ID –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–†–ê!
WEBHOOK_HOST = os.getenv('WEBHOOK_HOST', 'https://telegram-ad-bot-2025.herokuapp.com') # URL –≤–∞—à–æ–≥–æ Heroku –¥–æ–¥–∞—Ç–∫—É
WEBHOOK_PATH = f"/webhook/{TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# --- –Ü–º–ø–æ—Ä—Ç—É—î–º–æ Base —Ç–∞ User –∑ users.py ---
# –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ users.py –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ç—ñ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó, —â–æ –π bot.py
from users import Base, User
from sqlalchemy import create_engine, text, inspect
from sqlalchemy.orm import sessionmaker

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Flask –¥–æ–¥–∞—Ç–æ–∫ —Ç–∞ TeleBot –ü–Ü–°–õ–Ø –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è TOKEN ---
app = Flask(__name__)
bot = telebot.TeleBot(TOKEN)

# --- 2. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- 3. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ë–∞–∑–∏ –î–∞–Ω–∏—Ö (SQLite –¥–ª—è Heroku - –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–Ñ–¢–¨–°–Ø –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω—É) ---
DATABASE_URL = os.getenv('DATABASE_URL', 'sqlite:///database.db') # Heroku –º–æ–∂–µ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ PostgreSQL

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def init_db():
    try:
        engine = create_engine(DATABASE_URL)
        Session = sessionmaker(bind=engine)
        session = Session()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Ç–∞–±–ª–∏—Ü—è 'users'
        inspector = inspect(engine)
        if not inspector.has_table('users'):
            logger.info("–¢–∞–±–ª–∏—Ü—è 'users' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, —Å—Ç–≤–æ—Ä—é—é...")
            Base.metadata.create_all(engine)
            logger.info("–¢–∞–±–ª–∏—Ü—è 'users' —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞.")
        else:
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –∞–±–æ –≤–∂–µ —ñ—Å–Ω—É—î.")
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–æ–ª–æ–Ω–∫–∏ 'user_status'
            existing_columns = [col['name'] for col in inspector.get_columns('users')]
            if 'user_status' not in existing_columns:
                with engine.connect() as connection:
                    connection.execute(text('ALTER TABLE users ADD COLUMN user_status VARCHAR DEFAULT "idle"'))
                    connection.commit()
                logger.info("–ö–æ–ª–æ–Ω–∫–∞ 'user_status' –¥–æ–¥–∞–Ω–∞ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ 'users'.")
            else:
                logger.info("–ö–æ–ª–æ–Ω–∫–∞ 'user_status' –≤–∂–µ —ñ—Å–Ω—É—î.")


        session.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
        # –Ø–∫—â–æ —Ü–µ PostgreSQL –Ω–∞ Heroku, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ PGDATABASE_URL
        if "postgresql" in DATABASE_URL and "sqlite" in str(e):
             logger.error("–°—Ö–æ–∂–µ, –≤–∏ –Ω–∞–º–∞–≥–∞—î—Ç–µ—Å—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ SQLite –∑ PostgreSQL DATABASE_URL. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∞—à DATABASE_URL –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π.")

# --- 4. –û–±—Ä–æ–±–Ω–∏–∫ –≤–µ–±—Ö—É–∫–∞ Flask ---
# –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –ü–û–í–ò–ù–ù–ê –±—É—Ç–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–∞ –õ–ò–®–ï –û–î–ò–ù –†–ê–ó
@app.route(WEBHOOK_PATH, methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '!', 200 # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ 200 OK
    else:
        # Flask –ø–µ—Ä–µ—Ä–≤–µ –∑–∞–ø–∏—Ç –∑ 403 Forbidden
        # –¶–µ —Ç–∞–∫–æ–∂ –¥–æ–ø–æ–º–æ–∂–µ —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É, —è–∫—â–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –π–æ–≥–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
        return "Forbidden", 403


# --- 5. –û–±—Ä–æ–±–Ω–∏–∫–∏ –ë–æ—Ç–∞ ---

@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        engine = create_engine(DATABASE_URL)
        Session = sessionmaker(bind=engine)
        session = Session()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        user = session.query(User).filter_by(chat_id=message.chat.id).first()

        if not user:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
            new_user = User(
                chat_id=message.chat.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )
            session.add(new_user)
            session.commit()
            logger.info(f"–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–æ–¥–∞–Ω–∏–π: {message.chat.id}")
            bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±–æ—Ç–∞. –í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.")
        else:
            # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ —Å—Ç–∞—Ç—É—Å
            user.last_activity = datetime.now()
            user.user_status = 'active'
            session.commit()
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.chat.id} –≤–∂–µ —ñ—Å–Ω—É—î. –û–Ω–æ–≤–ª–µ–Ω–æ.")
            bot.send_message(message.chat.id, "–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º! –Ø –≤–∂–µ –≤–∞—Å –∑–Ω–∞—é.")

        session.close()

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏ /start: {e}")
        bot.send_message(message.chat.id, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


# –î–æ–¥–∞–π—Ç–µ —ñ–Ω—à—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, callback-–∑–∞–ø–∏—Ç—ñ–≤ —Ç—É—Ç
# @bot.message_handler(func=lambda message: True)
# def echo_all(message):
#     bot.reply_to(message, message.text)


@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.chat.id == ADMIN_CHAT_ID:
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users"),
            types.InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="admin_settings"),
            types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            types.InlineKeyboardButton("üìö –ö–µ—Ä—É–≤–∞–Ω–Ω—è FAQ", callback_data="admin_faq_menu")
        )

        bot.send_message(message.chat.id, "üîß *–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å*\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                               reply_markup=markup, parse_mode='Markdown')
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_'))
def admin_callback_handler(call):
    if call.message.chat.id != ADMIN_CHAT_ID:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
        return

    if call.data == "admin_users":
        # –õ–æ–≥—ñ–∫–∞ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        bot.edit_message_text("üöß *–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏* üöß\n\n–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              parse_mode='Markdown', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")))
    elif call.data == "admin_panel":
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users"),
            types.InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="admin_settings"),
            types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            types.InlineKeyboardButton("üìö –ö–µ—Ä—É–≤–∞–Ω–Ω—è FAQ", callback_data="admin_faq_menu")
        )

        bot.edit_message_text("üîß *–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å*\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                              chat_id=call.message.chat.id, message_id=call.message.message_id,
                              reply_markup=markup, parse_mode='Markdown')
    bot.answer_callback_query(call.id)

# --- –ö–û–î –ó–ê–ü–£–°–ö–£ –ë–û–¢–ê (–≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è Gunicorn'–æ–º) ---
# –¶–µ–π –∫–æ–¥ –±—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ Gunicorn'–æ–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –¥–æ–¥–∞—Ç–∫–∞.
# –í—ñ–Ω –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –≤–µ—Ä—Ö–Ω—å–æ–º—É —Ä—ñ–≤–Ω—ñ (–≥–ª–æ–±–∞–ª—å–Ω–∞ –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—ñ) —Ñ–∞–π–ª—É.
logger.info("–ó–∞–ø—É—Å–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î...")
init_db() # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î

logger.info("–í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –≤–µ–±—Ö—É–∫–∞...")
bot.remove_webhook() # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–µ–±—Ö—É–∫
time.sleep(0.1) # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞

logger.info(f"–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ –Ω–∞: {WEBHOOK_URL}")
bot.set_webhook(url=WEBHOOK_URL)

logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")

# –ö—ñ–Ω–µ—Ü—å —Ñ–∞–π–ª—É. Gunicorn —Ç–µ–ø–µ—Ä –∑–Ω–∞—î, —â–æ 'app' —Ü–µ –≤–∞—à Flask-–¥–æ–¥–∞—Ç–æ–∫.
# –ù–Ü–Ø–ö–ò–• app.run() —Ç—É—Ç –Ω–µ –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏.
# –ñ–û–î–ù–û–ì–û if __name__ == '__main__': –±–ª–æ–∫—É.
