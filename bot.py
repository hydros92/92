import sqlite3
import telebot
import logging
import os
from datetime import datetime, timedelta
import re
import threading
import time

# --- 1. –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ ---
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8039977178:AAGS-GbH-lhljGGG6OgJ2iMU_ncB-JzeOvU')

# --- 2. ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
admin_chat_id_str = os.getenv('ADMIN_CHAT_ID', '8184456641').strip("'\"")
ADMIN_CHAT_ID = int(admin_chat_id_str)

# --- 3. ID –∫–∞–Ω–∞–ª—É –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π ---
channel_id_str = os.getenv('CHANNEL_ID', '-1002535586055').strip("'\"")
CHANNEL_ID = int(channel_id_str)

# --- 4. –ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ Monobank –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∫–æ–º—ñ—Å—ñ—ó ---
MONOBANK_CARD_NUMBER = '4441 1111 5302 1484'

# --- 5. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    handlers=[
                        logging.FileHandler("bot.log"),
                        logging.StreamHandler()
                    ])
logger = logging.getLogger(__name__)

# --- 6. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ ---
bot = telebot.TeleBot(TOKEN)

# --- 7. –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ---
user_data = {}

# --- 8. –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–∞–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—è) ---
blocked_users = set()

# --- 9. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
stats = {
    'total_products': 0,
    'approved_products': 0,
    'rejected_products': 0,
    'sold_products': 0
}

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite ---
def init_db():
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            seller_chat_id INTEGER NOT NULL,
            seller_username TEXT,
            product_name TEXT NOT NULL,
            price TEXT NOT NULL,
            description TEXT NOT NULL,
            photos TEXT,
            status TEXT DEFAULT 'pending',
            admin_message_id INTEGER,
            channel_message_id INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            chat_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            is_blocked INTEGER DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS statistics (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            action TEXT,
            user_id INTEGER,
            product_id INTEGER,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.commit()
    conn.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –∞–±–æ –≤–∂–µ —ñ—Å–Ω—É—î.")

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---
def save_user(message):
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO users (chat_id, username, first_name, last_name)
        VALUES (?, ?, ?, ?)
    ''', (message.chat.id, message.from_user.username, 
          message.from_user.first_name, message.from_user.last_name))
    conn.commit()
    conn.close()

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è ---
def is_user_blocked(chat_id):
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute("SELECT is_blocked FROM users WHERE chat_id = ?", (chat_id,))
    result = cursor.fetchone()
    conn.close()
    return result and result[0] == 1

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ö–µ—à—Ç–µ–≥—ñ–≤ ---
def generate_hashtags(description, num_hashtags=5):
    words = re.findall(r'\b\w+\b', description.lower())
    
    stopwords = set(['—è', '–º–∏', '—Ç–∏', '–≤–∏', '–≤—ñ–Ω', '–≤–æ–Ω–∞', '–≤–æ–Ω–æ', '–≤–æ–Ω–∏', '—Ü–µ', '—â–æ', 
                     '—è–∫', '–¥–µ', '–∫–æ–ª–∏', '–∞', '—ñ', '—Ç–∞', '–∞–±–æ', '—á–∏', '–¥–ª—è', '–∑', '–Ω–∞', 
                     '—É', '–≤', '–¥–æ', '–≤—ñ–¥', '–ø–æ', '–∑–∞', '–ø—Ä–∏', '–ø—Ä–æ', '–º—ñ–∂', '–ø—ñ–¥', '–Ω–∞–¥', 
                     '–±–µ–∑', '—á–µ—Ä–µ–∑', '–¥—É–∂–µ', '—Ü–µ–π', '—Ç–æ–π', '–º—ñ–π', '—Ç–≤—ñ–π', '–Ω–∞—à', '–≤–∞—à'])
    
    filtered_words = [word for word in words if len(word) > 2 and word not in stopwords]
    unique_words = list(set(filtered_words))
    hashtags = ['#' + word for word in unique_words[:num_hashtags]]
    
    return " ".join(hashtags) if hashtags else ""

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
def log_statistics(action, user_id, product_id=None):
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO statistics (action, user_id, product_id)
        VALUES (?, ?, ?)
    ''', (action, user_id, product_id))
    conn.commit()
    conn.close()

# --- –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start ---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    if is_user_blocked(message.chat.id):
        bot.send_message(message.chat.id, "‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    
    save_user(message)
    log_statistics('start', message.chat.id)
    
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.chat.id} —Ä–æ–∑–ø–æ—á–∞–≤ –≤–∑–∞—î–º–æ–¥—ñ—é –∑ –±–æ—Ç–æ–º.")
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_add = telebot.types.KeyboardButton("üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä")
    item_my = telebot.types.KeyboardButton("üìã –ú–æ—ó —Ç–æ–≤–∞—Ä–∏")
    item_help = telebot.types.KeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞")
    item_channel = telebot.types.KeyboardButton("üì∫ –ù–∞—à –∫–∞–Ω–∞–ª")
    markup.add(item_add, item_my)
    markup.add(item_help, item_channel)
    
    welcome_text = (
        "üõçÔ∏è *–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±–æ—Ç–∞ –æ–≥–æ–ª–æ—à–µ–Ω—å!*\n\n"
        "–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ:\n"
        "üì¶ –î–æ–¥–∞–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂\n"
        "üìã –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å–≤–æ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n"
        "üì∫ –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–∏ –¥–æ –Ω–∞—à–æ–≥–æ –∫–∞–Ω–∞–ª—É\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:"
    )
    
    bot.send_message(message.chat.id, welcome_text, reply_markup=markup, parse_mode='Markdown')

# --- –ö–æ–º–∞–Ω–¥–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.chat.id != ADMIN_CHAT_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.")
        return
    
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"))
    markup.add(telebot.types.InlineKeyboardButton("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users"))
    markup.add(telebot.types.InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ", callback_data="admin_blocked"))
    
    bot.send_message(message.chat.id, "üîß *–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å*\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", 
                     reply_markup=markup, parse_mode='Markdown')

# --- –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
@bot.message_handler(content_types=['text'])
def handle_text(message):
    if is_user_blocked(message.chat.id):
        bot.send_message(message.chat.id, "‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    
    chat_id = message.chat.id
    
    if message.text in ["üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä", "–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä"]:
        start_add_product(message)
    elif message.text in ["üìã –ú–æ—ó —Ç–æ–≤–∞—Ä–∏", "–ú–æ—ó —Ç–æ–≤–∞—Ä–∏"]:
        send_my_products(message)
    elif message.text in ["‚ùì –î–æ–ø–æ–º–æ–≥–∞", "–î–æ–ø–æ–º–æ–≥–∞"]:
        send_help(message)
    elif message.text in ["üì∫ –ù–∞—à –∫–∞–Ω–∞–ª", "–ù–∞—à –∫–∞–Ω–∞–ª"]:
        send_channel_link(message)
    elif chat_id in user_data:
        process_product_input(message)
    else:
        bot.send_message(chat_id, "ü§ñ –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é –∞–±–æ –∫–æ–º–∞–Ω–¥–æ—é /start.")

# --- –§—É–Ω–∫—Ü—ñ—è –¥–æ–ø–æ–º–æ–≥–∏ ---
def send_help(message):
    help_text = (
        "üÜò *–î–æ–≤—ñ–¥–∫–∞ –ø–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—é –±–æ—Ç–∞*\n\n"
        "üì¶ *–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä* - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n"
        "üìã *–ú–æ—ó —Ç–æ–≤–∞—Ä–∏* - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–∞—à—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n"
        "üì∫ *–ù–∞—à –∫–∞–Ω–∞–ª* - –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª –∑ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è–º–∏\n\n"
        "üìù *–ü—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É:*\n"
        "1Ô∏è‚É£ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É\n"
        "2Ô∏è‚É£ –í–∫–∞–∂—ñ—Ç—å —Ü—ñ–Ω—É\n"
        "3Ô∏è‚É£ –î–æ–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ (–¥–æ 10 —à—Ç—É–∫)\n"
        "4Ô∏è‚É£ –ù–∞–ø–∏—à—ñ—Ç—å –æ–ø–∏—Å\n"
        "5Ô∏è‚É£ –û—á—ñ–∫—É–π—Ç–µ –º–æ–¥–µ—Ä–∞—Ü—ñ—é\n\n"
        "üí∞ *–ö–æ–º—ñ—Å—ñ—è:* 10% –∑ –ø—Ä–æ–¥–∞–∂—É\n"
        "‚è±Ô∏è *–ú–æ–¥–µ—Ä–∞—Ü—ñ—è:* –∑–∞–∑–≤–∏—á–∞–π –¥–æ 24 –≥–æ–¥–∏–Ω\n\n"
        "‚ùì –ü–∏—Ç–∞–Ω–Ω—è? –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ @admin"
    )
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown')

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ú–æ—ó —Ç–æ–≤–∞—Ä–∏" ---
def send_my_products(message):
    chat_id = message.chat.id
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute("""
        SELECT product_name, status, price, created_at 
        FROM products 
        WHERE seller_chat_id = ? 
        ORDER BY created_at DESC
    """, (chat_id,))
    user_products = cursor.fetchall()
    conn.close()

    if user_products:
        response = "üìã *–í–∞—à—ñ —Ç–æ–≤–∞—Ä–∏:*\n\n"
        for i, (name, status, price, created_at) in enumerate(user_products, 1):
            status_emoji = {
                'pending': '‚è≥',
                'approved': '‚úÖ',
                'rejected': '‚ùå',
                'sold': 'üí∞'
            }
            status_ukr = {
                'pending': '–Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ',
                'approved': '–æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ',
                'rejected': '–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ',
                'sold': '–ø—Ä–æ–¥–∞–Ω–æ'
            }.get(status, status)
            
            response += f"{i}. {status_emoji.get(status, '‚ùì')} *{name}*\n"
            response += f"   üí∞ {price}\n"
            response += f"   üìÖ {created_at[:10]}\n"
            response += f"   üìä –°—Ç–∞—Ç—É—Å: {status_ukr}\n\n"
            
        bot.send_message(chat_id, response, parse_mode='Markdown')
    else:
        bot.send_message(chat_id, "üì≠ –í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–≤–∞–ª–∏ –∂–æ–¥–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä' —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤–æ—î –ø–µ—Ä—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è!")

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞—à –∫–∞–Ω–∞–ª" ---
def send_channel_link(message):
    chat_id = message.chat.id
    
    try:
        # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–∞–Ω–∞–ª
        chat_info = bot.get_chat(CHANNEL_ID)
        
        if chat_info.invite_link:
            channel_link = chat_info.invite_link
        elif chat_info.username:
            channel_link = f"https://t.me/{chat_info.username}"
        else:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è
            invite_link = bot.create_chat_invite_link(CHANNEL_ID, member_limit=1)
            channel_link = invite_link.invite_link
            
        invite_text = (
            f"üì∫ *–ù–∞—à –∫–∞–Ω–∞–ª –∑ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è–º–∏*\n\n"
            f"–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ–≥–æ –∫–∞–Ω–∞–ª—É, —â–æ–± –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –Ω–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏!\n\n"
            f"üëâ [–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞–Ω–∞–ª—É]({channel_link})\n\n"
            f"üí° –£ –∫–∞–Ω–∞–ª—ñ –ø—É–±–ª—ñ–∫—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è"
        )
        
        bot.send_message(chat_id, invite_text, parse_mode='Markdown', disable_web_page_preview=True)
        log_statistics('channel_visit', chat_id)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª: {e}")
        bot.send_message(chat_id, "‚ùå –ù–∞ –∂–∞–ª—å, –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

# --- –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ---
def start_add_product(message):
    chat_id = message.chat.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute("""
        SELECT COUNT(*) FROM products 
        WHERE seller_chat_id = ? AND status = 'pending'
    """, (chat_id,))
    pending_count = cursor.fetchone()[0]
    conn.close()
    
    if pending_count >= 3:  # –õ—ñ–º—ñ—Ç –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
        bot.send_message(chat_id, 
                        "‚ö†Ô∏è –£ –≤–∞—Å –≤–∂–µ —î 3 —Ç–æ–≤–∞—Ä–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó.\n"
                        "–î–æ—á–µ–∫–∞–π—Ç–µ—Å—è —Ä–æ–∑–≥–ª—è–¥—É –ø–æ—Ç–æ—á–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –ø–µ—Ä–µ–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º –Ω–æ–≤–∏—Ö.")
        return
    
    user_data[chat_id] = {'step': 'waiting_name', 'photos': []}
    bot.send_message(chat_id, 
                    "üìù *–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É*\n\n"
                    "–ö—Ä–æ–∫ 1/4: –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ–≥–æ —Ç–æ–≤–∞—Ä—É\n\n"
                    "üí° –ù–∞–∑–≤–∞ –º–∞—î –±—É—Ç–∏ –∑—Ä–æ–∑—É–º—ñ–ª–æ—é —Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—é",
                    parse_mode='Markdown')
    log_statistics('start_add_product', chat_id)

# --- –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ç–æ–≤–∞—Ä ---
def process_product_input(message):
    chat_id = message.chat.id
    
    if chat_id not in user_data:
        return 

    current_step = user_data[chat_id]['step']

    if current_step == 'waiting_name':
        if len(message.text) > 100:
            bot.send_message(chat_id, "‚ùå –ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª—ñ–≤.")
            return
        if len(message.text) < 3:
            bot.send_message(chat_id, "‚ùå –ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞. –ú—ñ–Ω—ñ–º—É–º 3 —Å–∏–º–≤–æ–ª–∏.")
            return
            
        user_data[chat_id]['name'] = message.text
        user_data[chat_id]['step'] = 'waiting_price'
        bot.send_message(chat_id, 
                        "üí∞ *–ö—Ä–æ–∫ 2/4: –¶—ñ–Ω–∞*\n\n"
                        "–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É:\n"
                        "‚Ä¢ 100 –≥—Ä–Ω\n"
                        "‚Ä¢ 50$\n"
                        "‚Ä¢ –î–æ–≥–æ–≤—ñ—Ä–Ω–∞\n"
                        "‚Ä¢ –û–±–º—ñ–Ω",
                        parse_mode='Markdown')
        
    elif current_step == 'waiting_price':
        if len(message.text) > 50:
            bot.send_message(chat_id, "‚ùå –¶—ñ–Ω–∞ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª—ñ–≤.")
            return
            
        user_data[chat_id]['price'] = message.text
        user_data[chat_id]['step'] = 'waiting_photos'
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(telebot.types.KeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ñ–æ—Ç–æ"))
        bot.send_message(chat_id, 
                        "üì∏ *–ö—Ä–æ–∫ 3/4: –§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó*\n\n"
                        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó —Ç–æ–≤–∞—Ä—É (–¥–æ 10 —Ñ–æ—Ç–æ).\n"
                        "–ö–æ–∂–Ω–µ —Ñ–æ—Ç–æ - –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.\n\n"
                        "üí° –Ø–∫—ñ—Å–Ω—ñ —Ñ–æ—Ç–æ –∑–±—ñ–ª—å—à—É—é—Ç—å —à–∞–Ω—Å–∏ –ø—Ä–æ–¥–∞–∂—É!\n\n"
                        "–ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ñ–æ—Ç–æ'", 
                        reply_markup=markup, parse_mode='Markdown')
        
    elif current_step == 'waiting_description':
        if len(message.text) > 1000:
            bot.send_message(chat_id, "‚ùå –û–ø–∏—Å –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª—ñ–≤.")
            return
        if len(message.text) < 10:
            bot.send_message(chat_id, "‚ùå –û–ø–∏—Å –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π. –ú—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤.")
            return
            
        user_data[chat_id]['description'] = message.text
        hashtags = generate_hashtags(message.text)
        user_data[chat_id]['hashtags'] = hashtags
        send_for_moderation(chat_id)
        
    elif current_step == 'waiting_photos':
        if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ñ–æ—Ç–æ":
            user_data[chat_id]['step'] = 'waiting_description'
            bot.send_message(chat_id, 
                            "üìù *–ö—Ä–æ–∫ 4/4: –û–ø–∏—Å*\n\n"
                            "–ù–∞–¥–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É:\n"
                            "‚Ä¢ –°—Ç–∞–Ω —Ç–æ–≤–∞—Ä—É\n"
                            "‚Ä¢ –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ\n"
                            "‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–¥–∞–∂—É\n"
                            "‚Ä¢ –£–º–æ–≤–∏ –ø–µ—Ä–µ–¥–∞—á—ñ\n\n"
                            "üí° –î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –¥–æ–ø–æ–º–∞–≥–∞—î —à–≤–∏–¥—à–µ –∑–Ω–∞–π—Ç–∏ –ø–æ–∫—É–ø—Ü—è!",
                            reply_markup=telebot.types.ReplyKeyboardRemove(),
                            parse_mode='Markdown')
        else:
            bot.send_message(chat_id, "üì∏ –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ñ–æ—Ç–æ'.")

# --- –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π ---
@bot.message_handler(content_types=['photo'])
def handle_photos(message):
    if is_user_blocked(message.chat.id):
        return
        
    chat_id = message.chat.id
    if chat_id in user_data and user_data[chat_id]['step'] == 'waiting_photos':
        photo_file_id = message.photo[-1].file_id
        if len(user_data[chat_id]['photos']) < 10:
            user_data[chat_id]['photos'].append(photo_file_id)
            bot.send_message(chat_id, f"‚úÖ –§–æ—Ç–æ {len(user_data[chat_id]['photos'])}/10 –¥–æ–¥–∞–Ω–æ.")
        else:
            bot.send_message(chat_id, "‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ñ–æ—Ç–æ' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.")
    else:
        bot.send_message(chat_id, "‚ùå –ó–∞—Ä–∞–∑ –Ω–µ —á–∞—Å –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä' –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")

# --- –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é ---
def send_for_moderation(chat_id):
    data = user_data[chat_id]
    name = data['name']
    price = data['price']
    description = data['description']
    photos = data['photos']
    hashtags = data.get('hashtags', '')

    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    try:
        user_info = bot.get_chat(chat_id)
        username = user_info.username or "–ù–µ–º–∞—î"
    except:
        username = "–ù–µ–≤—ñ–¥–æ–º–æ"

    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO products 
        (seller_chat_id, seller_username, product_name, price, description, photos, status) 
        VALUES (?, ?, ?, ?, ?, ?, ?)
    """, (chat_id, username, name, price, description, ",".join(photos), 'pending'))
    product_id = cursor.lastrowid
    conn.commit()
    conn.close()
    
    log_statistics('product_submitted', chat_id, product_id)

    admin_message_text = (
        f"üì© *–ù–æ–≤–∏–π —Ç–æ–≤–∞—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!*\n\n"
        f"üÜî *ID:* {product_id}\n"
        f"üì¶ *–ù–∞–∑–≤–∞:* {name}\n"
        f"üí∞ *–¶—ñ–Ω–∞:* {price}\n"
        f"üìù *–û–ø–∏—Å:* {description}\n"
        f"üè∑Ô∏è *–•–µ—à—Ç–µ–≥–∏:* {hashtags}\n\n"
        f"üë§ *–ü—Ä–æ–¥–∞–≤–µ—Ü—å:* [{'@' + username if username != '–ù–µ–º–∞—î' else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}](tg://user?id={chat_id})\n"
        f"üì∏ *–§–æ—Ç–æ:* {len(photos)} —à—Ç.\n"
        f"üìÖ *–î–∞—Ç–∞:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )

    markup_admin = telebot.types.InlineKeyboardMarkup()
    markup_admin.add(
        telebot.types.InlineKeyboardButton("‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"approve_{product_id}"),
        telebot.types.InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{product_id}")
    )

    try:
        if photos:
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–µ—Ä—à–µ —Ñ–æ—Ç–æ –∑ –æ–ø–∏—Å–æ–º
            admin_msg = bot.send_photo(ADMIN_CHAT_ID, photos[0], 
                                     caption=admin_message_text, 
                                     parse_mode='Markdown', 
                                     reply_markup=markup_admin)
            
            # –Ø–∫—â–æ —î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ–æ—Ç–æ, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —ó—Ö –∞–ª—å–±–æ–º–æ–º
            if len(photos) > 1:
                media = [telebot.types.InputMediaPhoto(photo_id) for photo_id in photos[1:]]
                bot.send_media_group(ADMIN_CHAT_ID, media)
        else:
            admin_msg = bot.send_message(ADMIN_CHAT_ID, admin_message_text, 
                                       parse_mode='Markdown', 
                                       reply_markup=markup_admin)
            
        # –û–Ω–æ–≤–ª—é—î–º–æ admin_message_id
        conn = sqlite3.connect('products.db')
        cursor = conn.cursor()
        cursor.execute("UPDATE products SET admin_message_id = ? WHERE id = ?", 
                      (admin_msg.message_id, product_id))
        conn.commit()
        conn.close()

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        confirmation_text = (
            f"‚úÖ *–¢–æ–≤–∞—Ä –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!*\n\n"
            f"üì¶ *–ù–∞–∑–≤–∞:* {name}\n"
            f"üí∞ *–¶—ñ–Ω–∞:* {price}\n\n"
            f"‚è≥ –û—á—ñ–∫—É–π—Ç–µ —Ä–æ–∑–≥–ª—è–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø—Ä–æ—Ç—è–≥–æ–º 24 –≥–æ–¥–∏–Ω.\n"
            f"üì¨ –í–∏ –æ—Ç—Ä–∏–º–∞–µ—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–¥–µ—Ä–∞—Ü—ñ—ó."
        )
        
        bot.send_message(chat_id, confirmation_text, 
                        parse_mode='Markdown',
                        reply_markup=telebot.types.ReplyKeyboardRemove())

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        bot.send_message(chat_id, 
                        "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.",
                        reply_markup=telebot.types.ReplyKeyboardRemove())
    finally:
        if chat_id in user_data:
            del user_data[chat_id]

# --- –û–±—Ä–æ–±–∫–∞ callback –∑–∞–ø–∏—Ç—ñ–≤ ---
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.data.startswith('admin_'):
            handle_admin_callbacks(call)
        else:
            handle_product_callbacks(call)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback: {e}")
        bot.answer_callback_query(call.id, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

# --- –û–±—Ä–æ–±–∫–∞ –∞–¥–º—ñ–Ω –∫–æ–ª–±–µ–∫—ñ–≤ ---
def handle_admin_callbacks(call):
    if call.message.chat.id != ADMIN_CHAT_ID:
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return

    if call.data == "admin_stats":
        send_admin_statistics(call)
    elif call.data == "admin_users":
        send_users_list(call)
    elif call.data == "admin_blocked":
        send_blocked_users(call)

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º—ñ–Ω–∞ ---
def send_admin_statistics(call):
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä—ñ–≤
    cursor.execute("SELECT status, COUNT(*) FROM products GROUP BY status")
    product_stats = dict(cursor.fetchall())
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    cursor.execute("SELECT COUNT(*) FROM users")
    total_users = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM users WHERE is_blocked = 1")
    blocked_users_count = cursor.fetchone()[0]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
    today = datetime.now().strftime('%Y-%m-%d')
    cursor.execute("SELECT COUNT(*) FROM products WHERE DATE(created_at) = ?", (today,))
    today_products = cursor.fetchone()[0]
    
    conn.close()
    
    stats_text = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
        f"üë• *–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:*\n"
        f"‚Ä¢ –í—Å—å–æ–≥–æ: {total_users}\n"
        f"‚Ä¢ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ: {blocked_users_count}\n\n"
        f"üì¶ *–¢–æ–≤–∞—Ä–∏:*\n"
        f"‚Ä¢ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {product_stats.get('pending', 0)}\n"
        f"‚Ä¢ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: {product_stats.get('approved', 0)}\n"
        f"‚Ä¢ –í—ñ–¥—Ö–∏–ª–µ–Ω–æ: {product_stats.get('rejected', 0)}\n"
        f"‚Ä¢ –ü—Ä–æ–¥–∞–Ω–æ: {product_stats.get('sold', 0)}\n\n"
        f"üìÖ *–°—å–æ–≥–æ–¥–Ω—ñ –¥–æ–¥–∞–Ω–æ:* {today_products}\n"
        f"üìà *–í—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤:* {sum(product_stats.values())}"
    )
    
    bot.edit_message_text(stats_text, call.message.chat.id, call.message.message_id, 
                         parse_mode='Markdown')
    bot.answer_callback_query(call.id)

# --- –û–±—Ä–æ–±–∫–∞ —Ç–æ–≤–∞—Ä–Ω–∏—Ö –∫–æ–ª–±–µ–∫—ñ–≤ ---
def handle_product_callbacks(call):
    data_parts = call.data.split('_')
    action = data_parts[0]
    product_id = int(data_parts[1])

    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute("""
        SELECT seller_chat_id, product_name, price, description, photos, status, channel_message_id 
        FROM products WHERE id = ?
    """, (product_id,))
    product_info