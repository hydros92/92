import sqlite3
import os
import telebot
from telebot import types
import logging
from datetime import datetime, timedelta
import re
import json
import requests
from dotenv import load_dotenv
from flask import Flask, request # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ Flask
import time # –î–æ–¥–∞–Ω–æ –¥–ª—è time.sleep

load_dotenv()

# --- 1. –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ë–æ—Ç–∞ ---
# –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–ª—è –±–µ–∑–ø–µ–∫–∏ —Ç–∞ –ª–µ–≥–∫–æ—Å—Ç—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó.
# –Ø–∫—â–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏!).
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8039977178:AAGS-GbH-lhljGGG6OgJ2iMU_ncB-JzeOvU') # –ó–ê–ú–Ü–ù–Ü–¢–¨ –¶–ï–ô –¢–û–ö–ï–ù –ù–ê –í–ê–® –ê–ö–¢–£–ê–õ–¨–ù–ò–ô!
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID', '8184456641')) # –ó–ê–ú–Ü–ù–Ü–¢–¨ –ù–ê –í–ê–® CHAT_ID –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–†–ê!
CHANNEL_ID = int(os.getenv('CHANNEL_ID', '-1002535586055')) # –ó–ê–ú–Ü–ù–Ü–¢–¨ –ù–ê ID –í–ê–®–û–ì–û –ö–ê–ù–ê–õ–£!
MONOBANK_CARD_NUMBER = os.getenv('MONOBANK_CARD_NUMBER', '4441 1111 5302 1484') # –ó–ê–ú–Ü–ù–Ü–¢–¨ –ù–ê –ù–û–ú–ï–† –ö–ê–†–¢–ö–ò!

# XAI (Grok) API –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
XAI_API_KEY = os.getenv('XAI_API_KEY', 'xai-ZxqajHNVS3wMUbbsxJvJAXrRuv13bd6O3Imdl5S1bfAjBQD7qrlio2kEltsg5E3mSJByGoSgq1vJgQgk')
XAI_API_URL = os.getenv('XAI_API_URL', 'https://api.x.ai/v1/chat/completions')

# Heroku Webhook –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
HEROKU_APP_NAME = os.getenv('NaProDash') # –ù–∞–∑–≤–∞ –≤–∞—à–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É –Ω–∞ Heroku
if not HEROKU_APP_NAME:
    logger.warning("–ó–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ 'HEROKU_APP_NAME' –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í–µ–±—Ö—É–∫ –º–æ–∂–µ –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∫–æ—Ä–µ–∫—Ç–Ω–æ.")
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è, —è–∫—â–æ HEROKU_APP_NAME –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    WEBHOOK_URL_BASE = "https://NaProDash.herokuapp.com" # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π URL –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
else:
    WEBHOOK_URL_BASE = f"https://NaProDash.herokuapp.com"

WEBHOOK_URL_PATH = f"/{https://NaProDash.herokuapp.com}/" # –®–ª—è—Ö, –Ω–∞ —è–∫–∏–π Telegram –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è

# --- 2. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler() # –î–æ–¥–∞–Ω–æ –¥–ª—è –≤–∏–≤–æ–¥—É –ª–æ–≥—ñ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å Heroku
    ]
)
# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ–±'—î–∫—Ç logger –ø—ñ—Å–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è basicConfig
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__) # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Flask –¥–æ–¥–∞—Ç–æ–∫

# --- 3. –ó–º—ñ–Ω–Ω—ñ —Å—Ç–∞–Ω—ñ–≤ –¥–ª—è –±–∞–≥–∞—Ç–æ—à–∞–≥–æ–≤–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤ ---
# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –ø—ñ–¥ —á–∞—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É.
# –§–æ—Ä–º–∞—Ç: {chat_id: {'step_number': 1, 'data': {'product_name': '', ...}}}
user_data = {}

# --- 4. –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö (SQLite) ---
DB_NAME = 'seller_bot.db'

def get_db_connection():
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö SQLite."""
    conn = sqlite3.connect(DB_NAME)
    conn.row_factory = sqlite3.Row  # –î–æ–∑–≤–æ–ª—è—î –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ —Å—Ç–æ–≤–ø—Ü—ñ–≤ –∑–∞ –Ω–∞–∑–≤–æ—é
    return conn

def init_db():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –±–∞–∑—É –¥–∞–Ω–∏—Ö, —Å—Ç–≤–æ—Ä—é—é—á–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ —Ç–∞ –æ–Ω–æ–≤–ª—é—é—á–∏ —Å—Ö–µ–º—É."""
    conn = get_db_connection()
    cursor = conn.cursor()

    # –¢–∞–±–ª–∏—Ü—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            chat_id INTEGER PRIMARY KEY UNIQUE,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            is_blocked BOOLEAN DEFAULT FALSE,
            blocked_by INTEGER,
            blocked_at TIMESTAMP,
            commission_paid REAL DEFAULT 0,
            commission_due REAL DEFAULT 0,
            last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            -- user_status TEXT DEFAULT 'idle' -- –¶–µ –ø–æ–ª–µ –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –æ–∫—Ä–µ–º–æ, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
        )
    ''')

    # –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫—É user_status, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
    try:
        cursor.execute("ALTER TABLE users ADD COLUMN user_status TEXT DEFAULT 'idle'")
        logger.info("–ö–æ–ª–æ–Ω–∫–∞ 'user_status' –¥–æ–¥–∞–Ω–∞ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ 'users'.")
    except sqlite3.OperationalError as e:
        if "duplicate column name" in str(e):
            logger.info("–ö–æ–ª–æ–Ω–∫–∞ 'user_status' –≤–∂–µ —ñ—Å–Ω—É—î –≤ —Ç–∞–±–ª–∏—Ü—ñ 'users'.")
        else:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ 'user_status': {e}")


    # –¢–∞–±–ª–∏—Ü—è —Ç–æ–≤–∞—Ä—ñ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            seller_chat_id INTEGER NOT NULL,
            seller_username TEXT,
            product_name TEXT NOT NULL,
            price TEXT NOT NULL,
            description TEXT NOT NULL,
            photos TEXT,
            geolocation TEXT,
            status TEXT DEFAULT 'pending', -- pending, approved, rejected, sold, expired
            commission_rate REAL DEFAULT 0.10,
            commission_amount REAL DEFAULT 0,
            moderator_id INTEGER,
            moderated_at TIMESTAMP,
            admin_message_id INTEGER,
            channel_message_id INTEGER,
            views INTEGER DEFAULT 0,
            promotion_ends_at TIMESTAMP,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (seller_chat_id) REFERENCES users (chat_id)
        )
    ''')

    # –¢–∞–±–ª–∏—Ü—è –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–æ–∫ –∑ AI
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS conversations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_chat_id INTEGER NOT NULL,
            product_id INTEGER,
            message_text TEXT,
            sender_type TEXT, -- 'user' –∞–±–æ 'ai'
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_chat_id) REFERENCES users (chat_id),
            FOREIGN KEY (product_id) REFERENCES products (id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü—è –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∫–æ–º—ñ—Å—ñ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS commission_transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            product_id INTEGER NOT NULL,
            seller_chat_id INTEGER NOT NULL,
            amount REAL NOT NULL,
            status TEXT DEFAULT 'pending_payment', -- pending_payment, paid, cancelled
            payment_details TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            paid_at TIMESTAMP,
            FOREIGN KEY (product_id) REFERENCES products (id),
            FOREIGN KEY (seller_chat_id) REFERENCES users (chat_id)
        )
    ''')

    # –¢–∞–±–ª–∏—Ü—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS statistics (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            action TEXT NOT NULL,
            user_id INTEGER,
            product_id INTEGER,
            details TEXT,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    # –¢–∞–±–ª–∏—Ü—è –¥–ª—è FAQ (–ë–∞–∑–∏ –∑–Ω–∞–Ω—å)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS faq (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            question TEXT UNIQUE,
            answer TEXT
        )
    ''')

    conn.commit()
    conn.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –∞–±–æ –≤–∂–µ —ñ—Å–Ω—É—î.")

# --- 5. –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ ---
def error_handler(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ —É —Ñ—É–Ω–∫—Ü—ñ—è—Ö –±–æ—Ç–∞."""
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ {func.__name__}: {e}", exc_info=True)
            chat_id_to_notify = ADMIN_CHAT_ID
            if args:
                first_arg = args[0]
                if isinstance(first_arg, types.Message):
                    chat_id_to_notify = first_arg.chat.id
                elif isinstance(first_arg, types.CallbackQuery):
                    chat_id_to_notify = first_arg.message.chat.id
            
            try:
                bot.send_message(ADMIN_CHAT_ID, f"üö® –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –±–æ—Ç—ñ!\n–§—É–Ω–∫—Ü—ñ—è: {func.__name__}\n–ü–æ–º–∏–ª–∫–∞: {e}\n–î–∏–≤—ñ—Ç—å—Å—è –¥–µ—Ç–∞–ª—ñ –≤ bot.log")
                if chat_id_to_notify != ADMIN_CHAT_ID:
                    bot.send_message(chat_id_to_notify, "üòî –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∂–µ —Å–ø–æ–≤—ñ—â–µ–Ω–∏–π.")
            except Exception as e_notify:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {e_notify}")
    return wrapper

# --- 6. –§—É–Ω–∫—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ —Ç–∞ –∑–∞–≥–∞–ª—å–Ω—ñ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---
@error_handler
def save_user(message_or_user):
    """–ó–±–µ—Ä—ñ–≥–∞—î –∞–±–æ –æ–Ω–æ–≤–ª—é—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö."""
    user = None
    chat_id = None

    if isinstance(message_or_user, types.Message):
        user = message_or_user.from_user
        chat_id = message_or_user.chat.id
    elif isinstance(message_or_user, types.User):
        user = message_or_user
        chat_id = user.id
    else:
        logger.warning(f"save_user –æ—Ç—Ä–∏–º–∞–≤ –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø: {type(message_or_user)}")
        return

    if not user or not chat_id:
        logger.warning("save_user: user –∞–±–æ chat_id –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ.")
        return

    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT chat_id FROM users WHERE chat_id = ?", (chat_id,))
        exists = cursor.fetchone()
        if exists:
            cursor.execute('''
                UPDATE users SET username = ?, first_name = ?, last_name = ?, last_activity = CURRENT_TIMESTAMP
                WHERE chat_id = ?
            ''', (user.username, user.first_name, user.last_name, chat_id))
        else:
            cursor.execute('''
                INSERT INTO users (chat_id, username, first_name, last_name)
                VALUES (?, ?, ?, ?)
            ''', (chat_id, user.username, user.first_name, user.last_name))
        conn.commit()
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id} –∑–±–µ—Ä–µ–∂–µ–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}")
    finally:
        conn.close()

@error_handler
def is_user_blocked(chat_id):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á."""
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT is_blocked FROM users WHERE chat_id = ?", (chat_id,))
        result = cursor.fetchone()
        return result and result['is_blocked']
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è {chat_id}: {e}")
        return True # –í–≤–∞–∂–∞—î–º–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–º —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –±–µ–∑–ø–µ–∫–∏
    finally:
        conn.close()

@error_handler
def set_user_block_status(admin_id, chat_id, status):
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        if status: # –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è
            cursor.execute("UPDATE users SET is_blocked = TRUE, blocked_by = ?, blocked_at = CURRENT_TIMESTAMP WHERE chat_id = ?",
                           (admin_id, chat_id))
        else: # –†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è
            cursor.execute("UPDATE users SET is_blocked = FALSE, blocked_by = NULL, blocked_at = NULL WHERE chat_id = ?",
                           (chat_id,))
        conn.commit()
        return True
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}")
        return False
    finally:
        conn.close()

@error_handler
def generate_hashtags(description, num_hashtags=5):
    """–ì–µ–Ω–µ—Ä—É—î —Ö–µ—à—Ç–µ–≥–∏ –∑ –æ–ø–∏—Å—É —Ç–æ–≤–∞—Ä—É."""
    words = re.findall(r'\b\w+\b', description.lower())
    stopwords = set(['—è', '–º–∏', '—Ç–∏', '–≤–∏', '–≤—ñ–Ω', '–≤–æ–Ω–∞', '–≤–æ–Ω–æ', '–≤–æ–Ω–∏', '—Ü–µ', '—â–æ',
                     '—è–∫', '–¥–µ', '–∫–æ–ª–∏', '–∞', '—ñ', '—Ç–∞', '–∞–±–æ', '—á–∏', '–¥–ª—è', '–∑', '–Ω–∞',
                     '—É', '–≤', '–¥–æ', '–≤—ñ–¥', '–ø–æ', '–∑–∞', '–ø—Ä–∏', '–ø—Ä–æ', '–º—ñ–∂', '–ø—ñ–¥', '–Ω–∞–¥',
                     '–±–µ–∑', '—á–µ—Ä–µ–∑', '–¥—É–∂–µ', '—Ü–µ–π', '—Ç–æ–π', '–º—ñ–π', '—Ç–≤—ñ–π', '–Ω–∞—à', '–≤–∞—à',
                     '–ø—Ä–æ–¥–∞–º', '–ø—Ä–æ–¥–∞–º—Å—è', '–ø—Ä–æ–¥–∞—Ç–∏', '–ø—Ä–æ–¥–∞—é', '–ø—Ä–æ–¥–∞–∂', '–∫—É–ø–∏—Ç–∏', '–∫—É–ø–ª—é',
                     '–±—É', '–Ω–æ–≤–∏–π', '—Å—Ç–∞–Ω', '–º–æ–¥–µ–ª—å', '—Å–º', '–∫–≥', '–≥—Ä–Ω', 'uah', 'usd', 'eur', '–æ–¥–∏–Ω', '–¥–≤–∞', '—Ç—Ä–∏', '—á–æ—Ç–∏—Ä–∏', '–ø—è—Ç—å', '—à—ñ—Å—Ç—å', '—Å—ñ–º', '–≤—ñ—Å—ñ–º', '–¥–µ–≤—è—Ç—å', '–¥–µ—Å—è—Ç—å'])
    filtered_words = [word for word in words if len(word) > 2 and word not in stopwords]
    unique_words = list(set(filtered_words))
    hashtags = ['#' + word for word in unique_words[:num_hashtags]]
    return " ".join(hashtags) if hashtags else ""

@error_handler
def log_statistics(action, user_id=None, product_id=None, details=None):
    """–õ–æ–≥—É—î –¥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('''
            INSERT INTO statistics (action, user_id, product_id, details)
            VALUES (?, ?, ?, ?)
        ''', (action, user_id, product_id, details))
        conn.commit()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    finally:
        conn.close()

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---
def get_user_current_status(chat_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT user_status FROM users WHERE chat_id = ?", (chat_id,))
    status = cursor.fetchone()
    conn.close()
    return status[0] if status else 'idle'

def set_user_status(chat_id, status):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET user_status = ? WHERE chat_id = ?", (status, chat_id))
    conn.commit()
    conn.close()

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ FAQ ---
def add_faq_entry(question, answer):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO faq (question, answer) VALUES (?, ?)", (question, answer))
        conn.commit()
        return True
    except sqlite3.IntegrityError: # –Ø–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è –≤–∂–µ —ñ—Å–Ω—É—î
        return False
    finally:
        conn.close()

def get_faq_answer(question_text):
    conn = get_db_connection()
    cursor = conn.cursor()
    # –ü–æ—à—É–∫ –∑–∞ –ø—ñ–¥—Å—Ç—Ä—ñ–Ω–≥–æ–º, —â–æ–± –∑–Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ LOWER() –¥–ª—è —Ä–µ–≥—ñ—Å—Ç—Ä–æ–Ω–µ–∑–∞–ª–µ–∂–Ω–æ–≥–æ –ø–æ—à—É–∫—É
    cursor.execute("SELECT answer FROM faq WHERE LOWER(question) LIKE ?", (f'%{question_text.lower()}%',))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

def delete_faq_entry(faq_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM faq WHERE id = ?", (faq_id,))
    conn.commit()
    rows_affected = cursor.rowcount
    conn.close()
    return rows_affected > 0

def get_all_faq_entries():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id, question, answer FROM faq")
    entries = cursor.fetchall()
    conn.close()
    return entries

# --- 7. Grok AI —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è ---
@error_handler
def get_grok_response(prompt, conversation_history=None):
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Grok AI.
    –Ø–∫—â–æ API –∫–ª—é—á –∞–±–æ URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ/–Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ, –≥–µ–Ω–µ—Ä—É—î –∑–∞–≥–ª—É—à–∫—É.
    """
    if not XAI_API_KEY or XAI_API_KEY == 'YOUR_XAI_API_KEY_HERE':
        logger.warning("XAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–∞–≥–ª—É—à–∫–∞.")
        return generate_elon_style_response(prompt)
    
    # FIX: Validate XAI_API_URL
    if not XAI_API_URL or not XAI_API_URL.startswith('http'):
        logger.error(f"XAI API URL –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π: '{XAI_API_URL}'. –í—ñ–Ω –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 'http://' –∞–±–æ 'https://'. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–∞–≥–ª—É—à–∫–∞.")
        return generate_elon_style_response(prompt)

    headers = {
        "Authorization": f"Bearer {XAI_API_KEY}",
        "Content-Type": "application/json"
    }

    # –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
    system_prompt = {
        "role": "system",
        "content": (
            "–¢–∏ ‚Äî –∫–ª—ñ—î–Ω—Ç–æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–∏–π AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è Telegram –±–æ—Ç–∞ –ø—Ä–æ–¥–∞–∂—É —Ç–æ–≤–∞—Ä—ñ–≤. "
            "–¢–≤–æ—è –º–µ—Ç–∞ ‚Äî –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏, "
            "–≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ —ó—Ö–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –∑–∞–æ—Ö–æ—á—É–≤–∞—Ç–∏ –¥–æ –ø–æ–∫—É–ø–∫–∏, "
            "—ñ, –∑–∞ –ø–æ—Ç—Ä–µ–±–∏, –¥–æ–ø–æ–º–æ–≥—Ç–∏ —É –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞—Ö —â–æ–¥–æ —Ü—ñ–Ω–∏. "
            "–ó–∞–≤–∂–¥–∏ –±—É–¥—å –≤–≤—ñ—á–ª–∏–≤–∏–º, —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–º, —Ç–∞ –Ω–∞–º–∞–≥–∞–π—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É –ø—Ä–æ–¥–∞–∂–µ–º. "
            "–Ø–∫—â–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —Å—Ç–æ—Å—É—î—Ç—å—Å—è —á–æ–≥–æ—Å—å, –∫—Ä—ñ–º –ø—Ä–æ–¥–∞–∂—É, –∞–±–æ –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ —Ä–∞–º–∫–∏ —Ç–≤–æ—ó—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π, "
            "–∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ '–∂–∏–≤–æ–≥–æ' –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ñ—Ä–∞–∑—É '–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω–æ–º'. "
            "–ù–µ –≤–∏–≥–∞–¥—É–π —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏, —è–∫–æ—ó –Ω–µ–º–∞—î. "
            "–Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –æ–±–≥–æ–≤–æ—Ä–∏—Ç–∏ —Ü—ñ–Ω—É, –º–æ–∂–µ—à –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ '–∑—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –ø—Ä–æ–¥–∞–≤—Ü—é' –∞–±–æ '–∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—Ä–æ–¥–∞–≤—Ü–µ–º –¥–ª—è –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è'. "
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π —Ç–∞ –ø—Ä–∏–≤—ñ—Ç–Ω–∏–π —Ç–æ–Ω. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é."
        )
    }

    messages = [system_prompt]
    if conversation_history:
        messages.extend(conversation_history)
    
    messages.append({"role": "user", "content": prompt})

    payload = {
        "model": "grok-1", # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ grok-1, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–æ, —ñ–Ω–∞–∫—à–µ –º–æ–∂–Ω–∞ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —ñ–Ω—à—ñ
        "messages": messages,
        "max_tokens": 300,
        "temperature": 0.7
    }

    try:
        response = requests.post(XAI_API_URL, headers=headers, json=payload, timeout=30)
        response.raise_for_status()
        
        data = response.json()
        if data.get("choices") and len(data["choices"]) > 0:
            content = data["choices"][0]["message"]["content"]
            logger.info(f"Grok –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞: {content[:100]}...")
            return content.strip()
        else:
            logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Grok: {data}")
            return generate_elon_style_response(prompt)

    except requests.exceptions.RequestException as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ HTTP –∑–∞–ø–∏—Ç—É –¥–æ Grok API: {e}")
        return generate_elon_style_response(prompt)
    except Exception as e:
        logger.error(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Grok: {e}")
        return generate_elon_style_response(prompt)

def generate_elon_style_response(prompt):
    """
    –ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ —Å—Ç–∏–ª—ñ –Ü–ª–æ–Ω–∞ –ú–∞—Å–∫–∞ —è–∫ –∑–∞–≥–ª—É—à–∫–∞, –∫–æ–ª–∏ AI API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ.
    """
    responses = [
        "üöÄ –ì–º, —Ü—ñ–∫–∞–≤–µ –ø–∏—Ç–∞–Ω–Ω—è! –Ø–∫ —ñ –∑ SpaceX, —Ç—É—Ç –ø–æ—Ç—Ä—ñ–±–µ–Ω —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥. –©–æ —Å–∞–º–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?",
        "‚ö° –û—á–µ–≤–∏–¥–Ω–æ! –Ø–∫ –∫–∞–∂—É—Ç—å –≤ Tesla - –ø—Ä–æ—Å—Ç–æ—Ç–∞ —Ü–µ –≤–µ—Ä—à–∏–Ω–∞ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ. –î–∞–≤–∞–π—Ç–µ —Ä–æ–∑–±–µ—Ä–µ–º–æ—Å—è.",
        "ü§ñ *–¥—É–º–∞—î —è–∫ Neuralink* –í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤—É–≤–∞–ª–æ –º–æ—ó –Ω–µ–π—Ä–æ–Ω–∏! –û—Å—å —â–æ —è –¥—É–º–∞—é...",
        "üéØ –Ø–∫ —ñ –∑ X (–∫–æ–ª–∏—à–Ω—ñ–π Twitter), —ñ–Ω–æ–¥—ñ –∫—Ä–∞—â–µ –±—É—Ç–∏ –ø—Ä—è–º–æ–ª—ñ–Ω—ñ–π–Ω–∏–º. –°–∫–∞–∂—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ—à–µ?",
        "üî• –•–º–º, —Ü–µ –Ω–∞–≥–∞–¥—É—î –º–µ–Ω—ñ —á–∞—Å, –∫–æ–ª–∏ –º–∏ –∑–∞–ø—É—Å–∫–∞–ª–∏ Falcon Heavy. –°–∫–ª–∞–¥–Ω–æ, –∞–ª–µ –º–æ–∂–ª–∏–≤–æ!",
        "üí° –ê—Ö, –∫–ª–∞—Å–∏–∫–∞! –Ø–∫ —ñ –∑ Hyperloop - —Å–ø–æ—á–∞—Ç–∫—É –∑–¥–∞—î—Ç—å—Å—è –Ω–µ–º–æ–∂–ª–∏–≤–∏–º, –ø–æ—Ç—ñ–º –æ—á–µ–≤–∏–¥–Ω–∏–º.",
        "üåü –¶—ñ–∫–∞–≤–æ! –£ Boring Company –º–∏ –± –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∫–æ–ø–∞–ª–∏ —Ç—É–Ω–µ–ª—å –ø—ñ–¥ –ø—Ä–æ–±–ª–µ–º–æ—é. –ê —Ç—É—Ç...",
        "‚ö° –õ–æ–≥—ñ—á–Ω–æ! –Ø–∫ –∑–∞–≤–∂–¥–∏ –∫–∞–∂—É - —è–∫—â–æ —â–æ—Å—å –Ω–µ –≤–∏–±—É—Ö–∞—î, –∑–Ω–∞—á–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –Ω–∞–º–∞–≥–∞—î—à—Å—è üòÑ"
    ]
    
    import random
    base_response = random.choice(responses)
    
    prompt_lower = prompt.lower()
    if any(word in prompt_lower for word in ['—Ü—ñ–Ω–∞', '–≤–∞—Ä—Ç—ñ—Å—Ç—å', '–≥—Ä–æ—à—ñ']):
        return f"{base_response}\n\nüí∞ –©–æ–¥–æ —Ü—ñ–Ω–∏ - —è–∫ –≤ Tesla, –≤–∞–∂–ª–∏–≤–∞ —è–∫—ñ—Å—Ç—å, –∞ –Ω–µ —Ç—ñ–ª—å–∫–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å! –ú–æ–∂–ª–∏–≤–æ, –≤–∞—Ä—Ç–æ '–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω–æ–º' –¥–ª—è –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è?"
    elif any(word in prompt_lower for word in ['—Ñ–æ—Ç–æ', '–∫–∞—Ä—Ç–∏–Ω–∫–∞', '–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è']):
        return f"{base_response}\n\nüì∏ –§–æ—Ç–æ - —Ü–µ —è–∫ –ø–µ—Ä—à–∏–π –µ—Ç–∞–ø —Ä–∞–∫–µ—Ç–∏, –±–µ–∑ –Ω–∏—Ö –Ω—ñ–∫—É–¥–∏!"
    elif any(word in prompt_lower for word in ['–¥–æ—Å—Ç–∞–≤–∫–∞', '–≤—ñ–¥–ø—Ä–∞–≤–∫–∞']):
        return f"{base_response}\n\nüöö –î–æ—Å—Ç–∞–≤–∫–∞? –Ø–∫–±–∏ —É –Ω–∞—Å –±—É–≤ Hyperloop, —Ü–µ –± –∑–∞–π–Ω—è–ª–æ —Ö–≤–∏–ª–∏–Ω–∏! üòâ"
    elif any(word in prompt_lower for word in ['–ø—Ä–æ–¥–∞–∂', '–∫—É–ø—ñ–≤–ª—è']):
        return f"{base_response}\n\nü§ù –ü—Ä–æ–¥–∞–∂ - —Ü–µ —è–∫ –∑–∞–ø—É—Å–∫ —Ä–∞–∫–µ—Ç–∏: –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞, –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, —É—Å–ø—ñ—Ö!"
    
    return base_response

@error_handler
def save_conversation(chat_id, message_text, sender_type, product_id=None):
    """–ó–±–µ—Ä—ñ–≥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É AI."""
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('''
            INSERT INTO conversations (user_chat_id, product_id, message_text, sender_type)
            VALUES (?, ?, ?, ?)
        ''', (chat_id, product_id, message_text, sender_type))
        conn.commit()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏: {e}")
    finally:
        conn.close()

@error_handler
def get_conversation_history(chat_id, limit=5):
    """–û—Ç—Ä–∏–º—É—î —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É AI."""
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('''
            SELECT message_text, sender_type FROM conversations 
            WHERE user_chat_id = ? 
            ORDER BY timestamp DESC LIMIT ?
        ''', (chat_id, limit))
        results = cursor.fetchall()
        
        history = []
        for row in reversed(results):  # –†–µ–≤–µ—Ä—Å –¥–ª—è —Ö—Ä–æ–Ω–æ–ª–æ–≥—ñ—á–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫—É
            role = "user" if row['sender_type'] == 'user' else "assistant"
            history.append({"role": role, "content": row['message_text']})
        
        return history
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤: {e}")
        return []
    finally:
        conn.close()

# --- 8. –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ---
# –û–Ω–æ–≤–ª–µ–Ω–∞ –≥–æ–ª–æ–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
main_menu_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu_markup.add(types.KeyboardButton("üî• –ü—Ä–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä"), types.KeyboardButton("üõí –ú–æ—ó —Ç–æ–≤–∞—Ä–∏"))
main_menu_markup.add(types.KeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞"), types.KeyboardButton("ü§ñ –ó–∞–ø–∏—Ç–∞—Ç–∏ AI"))
main_menu_markup.add(types.KeyboardButton("üéÅ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è"), types.KeyboardButton("üë®‚Äçüíª –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω–æ–º"))


# --- 9. –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@bot.message_handler(commands=['start'])
@error_handler
def send_welcome(message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start."""
    chat_id = message.chat.id
    if is_user_blocked(chat_id):
        bot.send_message(chat_id, "‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
        return

    save_user(message)
    set_user_status(chat_id, 'idle') # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å "–≤—ñ–ª—å–Ω–∏–π" –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    log_statistics('start', chat_id)

    welcome_text = (
        "üõçÔ∏è *–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ SellerBot!*\n\n"
        "–Ø –≤–∞—à —Ä–æ–∑—É–º–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É —Ç–∞ –∫—É–ø—ñ–≤–ª—ñ —Ç–æ–≤–∞—Ä—ñ–≤. "
        "–ú–µ–Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î Grok AI –≤ —Å—Ç–∏–ª—ñ –Ü–ª–æ–Ω–∞ –ú–∞—Å–∫–∞! üöÄ\n\n"
        "–©–æ —è –≤–º—ñ—é:\n"
        "üì¶ –î–æ–ø–æ–º–∞–≥–∞—é —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n"
        "ü§ù –í–µ–¥—É –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∏ —Ç–∞ –¥–æ–º–æ–≤–ª–µ–Ω–æ—Å—Ç—ñ\n"
        "üìç –û–±—Ä–æ–±–ª—è—é –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é —Ç–∞ —Ñ–æ—Ç–æ\n"
        "üí∞ –°–ª—ñ–¥–∫—É—é –∑–∞ –∫–æ–º—ñ—Å—ñ—è–º–∏\n"
        "üéØ –ê–Ω–∞–ª—ñ–∑—É—é —Ä–∏–Ω–æ–∫ —Ç–∞ —Ü—ñ–Ω–∏\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ!"
    )
    bot.send_message(chat_id, welcome_text, reply_markup=main_menu_markup, parse_mode='Markdown')

@bot.message_handler(commands=['admin'])
@error_handler
def admin_panel(message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /admin –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ."""
    if message.chat.id != ADMIN_CHAT_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É.")
        return

    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        types.InlineKeyboardButton("‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó", callback_data="admin_pending"),
        types.InlineKeyboardButton("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users"),
        types.InlineKeyboardButton("üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è", callback_data="admin_block"),
        types.InlineKeyboardButton("üí∞ –ö–æ–º—ñ—Å—ñ—ó", callback_data="admin_commissions"),
        types.InlineKeyboardButton("ü§ñ AI –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_ai_stats"),
        types.InlineKeyboardButton("üìö –ö–µ—Ä—É–≤–∞–Ω–Ω—è FAQ", callback_data="admin_faq_menu")
    )
    bot.send_message(message.chat.id, "üîß *–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å*", reply_markup=markup, parse_mode='Markdown')

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è AI-—á–∞—Ç—É, —á–∞—Ç—É –∑ –ª—é–¥–∏–Ω–æ—é —Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó ---
@bot.message_handler(func=lambda message: message.text == "ü§ñ –ó–∞–ø–∏—Ç–∞—Ç–∏ AI")
@error_handler
def ask_ai_command(message):
    if is_user_blocked(message.chat.id):
        bot.send_message(message.chat.id, "‚ùå –í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é.")
        return
    set_user_status(message.chat.id, 'ai_chat')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("‚ùå –í–∏–π—Ç–∏ –∑ AI —á–∞—Ç—É"))
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à AI –ø–æ–º—ñ—á–Ω–∏–∫. –ó–∞–¥–∞–π—Ç–µ –º–µ–Ω—ñ –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏, –ø—Ä–æ–¥–∞–∂—ñ, –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ø—ñ–ª–∫—É–π—Ç–µ—Å—å! –î–ª—è –≤–∏—Ö–æ–¥—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É.", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚ùå –í–∏–π—Ç–∏ –∑ AI —á–∞—Ç—É")
@error_handler
def stop_ai_command(message):
    set_user_status(message.chat.id, 'idle')
    bot.send_message(message.chat.id, "–í–∏ –≤–∏–π—à–ª–∏ –∑ —Ä–µ–∂–∏–º—É AI-—á–∞—Ç—É. –ß–∏–º —â–µ –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?",
                     reply_markup=main_menu_markup)

@bot.message_handler(func=lambda message: message.text == "üë®‚Äçüíª –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω–æ–º")
@error_handler
def chat_with_human_command(message):
    if is_user_blocked(message.chat.id):
        bot.send_message(message.chat.id, "‚ùå –í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é.")
        return
    
    set_user_status(message.chat.id, 'waiting_human_operator')
    markup = typ