import os
import telebot
from telebot import types
import logging
import requests # –ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è safe_send_message –æ–±—Ä–æ–±–∫–∏ –≤–∏–Ω—è—Ç–∫—ñ–≤
from dotenv import load_dotenv

load_dotenv()

# --- 1. –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ë–æ—Ç–∞ ---
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID', '0')) # –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ None. –ü–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è fallback-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.

WEBHOOK_URL = os.getenv('WEBHOOK_URL')

# --- 2. –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# --- –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–Ü –õ–û–ì–ò –î–õ–Ø –ó–ú–Ü–ù–ù–ò–• –û–¢–û–ß–ï–ù–ù–Ø ---
logger.info(f"DIAGNOSTIC: TOKEN loaded: {'<set>' if TOKEN else '<not set>'} (length: {len(TOKEN) if TOKEN else 0})")
logger.info(f"DIAGNOSTIC: WEBHOOK_URL loaded: {'<set>' if WEBHOOK_URL else '<not set>'} (value: {WEBHOOK_URL})")
logger.info(f"DIAGNOSTIC: ADMIN_CHAT_ID loaded: {ADMIN_CHAT_ID}")
# --- –ö–Ü–ù–ï–¶–¨ –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–• –õ–û–ì–Ü–í ---


# –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –æ—Å–Ω–æ–≤–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
if not TOKEN:
    logger.critical("–ü–æ–º–∏–ª–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è. –í–∏—Ö—ñ–¥.")
    exit(1)

bot = telebot.TeleBot(TOKEN)
# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ Flask —Ç—É—Ç, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–æ–∫, —è–∫—â–æ –≤—ñ–Ω –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑ –≤–µ–±—Ö—É–∫–∞.
# –ê–ª–µ –¥–ª—è Render –≤—ñ–Ω –∑–∞–≤–∂–¥–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω.
from flask import Flask, request
app = Flask(__name__)


# --- –ù–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–æ—é ---
# –¶–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –≤—ñ–¥ Telegram API
def safe_send_message(chat_id, text, **kwargs):
    logger.info(f"DEBUG_SEND: Attempting to send message to {chat_id}. Text preview: '{text[:50]}'")
    try:
        response = bot.send_message(chat_id, text, **kwargs)
        logger.info(f"DEBUG_SEND: Message sent successfully to {chat_id}. Message ID: {response.message_id}")
        return response
    except telebot.apihelper.ApiTelegramException as e:
        logger.error(f"ERROR_TELEGRAM_API: Failed to send message to {chat_id}. Telegram API error: {e}", exc_info=True)
        # –°–ø—Ä–æ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ
        if chat_id != ADMIN_CHAT_ID: # –©–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Ü–∏–∫–ª—É, —è–∫—â–æ ADMIN_CHAT_ID –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π
            try:
                bot.send_message(chat_id, "‚ùå –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. Telegram API –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            except Exception as e_inner:
                logger.error(f"ERROR_TELEGRAM_API: Could not send fallback message to {chat_id}: {e_inner}")
        return None
    except Exception as e:
        logger.critical(f"ERROR_GENERAL_SEND: Failed to send message to {chat_id}. General error: {e}", exc_info=True)
        if chat_id != ADMIN_CHAT_ID:
            try:
                bot.send_message(chat_id, "‚ùå –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ.")
            except Exception as e_inner:
                logger.error(f"ERROR_GENERAL_SEND: Could not send fallback message to {chat_id}: {e_inner}")
        return None

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–ø—Ä–æ—â–µ–Ω—ñ) ---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    logger.info(f"DEBUG_HANDLER: send_welcome handler CALLED for chat_id: {message.chat.id}, message_text: '{message.text}'")
    safe_send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π —Ç–µ—Å—Ç–æ–≤–∏–π –±–æ—Ç! –í–µ—Ä—Å—ñ—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.")
    logger.info(f"DEBUG_HANDLER: send_welcome handler FINISHED for chat_id: {message.chat.id}")

@bot.message_handler(commands=['test'])
def send_test_message(message):
    logger.info(f"DEBUG_HANDLER: send_test_message handler CALLED for chat_id: {message.chat.id}, message_text: '{message.text}'")
    safe_send_message(message.chat.id, "–¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ë–æ—Ç –ø—Ä–∞—Ü—é—î! üéâ")
    logger.info(f"DEBUG_HANDLER: send_test_message handler FINISHED for chat_id: {message.chat.id}")

@bot.message_handler(func=lambda message: True, content_types=['text', 'photo', 'location'])
def handle_all_messages(message):
    logger.info(f"DEBUG_HANDLER: handle_all_messages handler CALLED for chat_id: {message.chat.id}, type: {message.content_type}, text: '{message.text[:50] if message.text else 'N/A'}'")
    
    response_text = "–Ø –æ—Ç—Ä–∏–º–∞–≤ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∫–æ–º–∞–Ω–¥—É. –î—è–∫—É—é!"
    if message.content_type == 'photo':
        response_text = "–Ø –æ—Ç—Ä–∏–º–∞–≤ –≤–∞—à–µ —Ñ–æ—Ç–æ. –ü–æ–∫–∏ —â–æ –Ω–µ –∑–Ω–∞—é, —â–æ –∑ –Ω–∏–º —Ä–æ–±–∏—Ç–∏."
    elif message.content_type == 'location':
        response_text = f"–Ø –æ—Ç—Ä–∏–º–∞–≤ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é: {message.location.latitude}, {message.location.longitude}."
        
    safe_send_message(message.chat.id, response_text)
    logger.info(f"DEBUG_HANDLER: handle_all_messages handler FINISHED for chat_id: {message.chat.id}")


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Render ---

# –ü—Ä–∏–±–∏—Ä–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –ë–î, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∞ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–ª—è —Ü—å–æ–≥–æ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–æ–≥–æ –∫–æ–¥—É.
# –Ø–∫—â–æ –≤–∏ –≤–∏–¥–∞–ª–∏–ª–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å–µ—Ä–≤—ñ—Å, —Ç–æ —Ç–∞–±–ª–∏—Ü—å –Ω–µ–º–∞—î.
# logger.info("–ó–∞–ø—É—Å–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î...")
# init_db() 

logger.info(f"DEBUG: Number of message handlers registered: {len(bot.message_handlers)}")
logger.info(f"DEBUG: Number of callback query handlers registered: {len(bot.callback_query_handlers)}")


if WEBHOOK_URL and TOKEN:
    logger.info(f"DEBUG: WEBHOOK_URL is set ({WEBHOOK_URL}), TOKEN is set.")
    try:
        bot.remove_webhook()
        full_webhook_url = f"{WEBHOOK_URL}/{TOKEN}"
        bot.set_webhook(url=full_webhook_url)
        logger.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {full_webhook_url}")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook: {e}", exc_info=True)
        logger.error("–ë–æ—Ç –Ω–µ –±—É–¥–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ Telegram —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É –≤–µ–±—Ö—É–∫–∞.")
        exit(1)
else:
    logger.critical(f"WEBHOOK_URL ('{WEBHOOK_URL}') –∞–±–æ TELEGRAM_BOT_TOKEN ('<set>' if TOKEN else '<not set>') –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ë–æ—Ç –Ω–µ –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ —Ä–µ–∂–∏–º—ñ webhook. –í–∏—Ö—ñ–¥.")
    exit(1)

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ Flask-–¥–æ–¥–∞—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ...")
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=True)

@app.route(f'/{TOKEN}', methods=['POST'])
def webhook_receiver():
    """–û–±—Ä–æ–±–ª—è—î –≤—Ö—ñ–¥–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ Telegram."""
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        logger.info(f"DEBUG_WEBHOOK_RECEIVER: Raw incoming update JSON: {json_string[:200]}...")
        
        try:
            update = telebot.types.Update.de_json(json_string)
            
            if update.message:
                logger.info(f"DEBUG_WEBHOOK_RECEIVER: Received message update from {update.message.chat.id}, text: '{update.message.text[:50] if update.message.text else 'N/A'}'")
            elif update.callback_query:
                logger.info(f"DEBUG_WEBHOOK_RECEIVER: Received callback query update from {update.callback_query.message.chat.id}, data: '{update.callback_query.data}'")
            else:
                logger.info(f"DEBUG_WEBHOOK_RECEIVER: Received unknown update type: {update}")

            logger.info("DEBUG_WEBHOOK_RECEIVER: Attempting to process update with bot.process_new_updates...")
            bot.process_new_updates([update])
            logger.info("DEBUG_WEBHOOK_RECEIVER: bot.process_new_updates finished.")
            return '!', 200
        except Exception as e:
            logger.critical(f"FATAL_WEBHOOK_ERROR: during webhook processing or pyTelegramBotAPI dispatch: {e}", exc_info=True)
            return 'Error processing update', 500
    else:
        logger.warning("Received non-JSON request on webhook path. Ignoring.")
        return 'Hello from bot webhook!', 200

