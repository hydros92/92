import sqlite3
import telebot
import logging
import os
from datetime import datetime, timedelta
import re # –î–ª—è –æ–±—Ä–æ–±–∫–∏ —Ç–µ–∫—Å—Ç—É —Ç–∞ —Ö–µ—à—Ç–µ–≥—ñ–≤

# --- 1. –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ ---
# –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–ª—è –±–µ–∑–ø–µ–∫–∏
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8039977178:AAGS-GbH-lhljGGG6OgJ2iMU_ncB-JzeOvU')

# --- 2. ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
# –ó–Ω–∞–π–¥—ñ—Ç—å —Å–≤—ñ–π chat_id —á–µ—Ä–µ–∑ @userinfobot —É Telegram —ñ –≤—Å—Ç–∞–≤—Ç–µ –π–æ–≥–æ —Å—é–¥–∏.
admin_chat_id_str = os.getenv('ADMIN_CHAT_ID', '8184456641').strip("'\"")
ADMIN_CHAT_ID = int(admin_chat_id_str)

# --- 3. ID –∫–∞–Ω–∞–ª—É –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π ---
# ID –∫–∞–Ω–∞–ª—É –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ '-100'
channel_id_str = os.getenv('CHANNEL_ID', '-1002535586055').strip("'\"")
CHANNEL_ID = int(channel_id_str)

# --- 4. –ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ Monobank –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∫–æ–º—ñ—Å—ñ—ó ---
MONOBANK_CARD_NUMBER = '4441 1111 5302 1484'

# --- 5. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    handlers=[
                        logging.FileHandler("bot.log"),
                        logging.StreamHandler()
                    ])
logger = logging.getLogger(__name__)

# --- 6. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ ---
bot = telebot.TeleBot(TOKEN)

# --- 7. –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø—ñ–¥ —á–∞—Å –ø—Ä–æ—Ü–µ—Å—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ---
# user_data[chat_id] = {'step': 'waiting_name', 'name': None, 'price': None, 'description': None, 'photos': []}
user_data = {}

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite ---
def init_db():
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            seller_chat_id INTEGER NOT NULL,
            seller_username TEXT, -- –î–æ–¥–∞–Ω–æ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
            product_name TEXT NOT NULL,
            price TEXT NOT NULL,
            description TEXT NOT NULL,
            photos TEXT, -- –ó–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ–º–æ —Å–ø–∏—Å–æ–∫ photo_file_id —á–µ—Ä–µ–∑ –∫–æ–º—É
            status TEXT DEFAULT 'pending', -- 'pending', 'approved', 'rejected', 'sold'
            admin_message_id INTEGER, -- ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ—ó –∑–º—ñ–Ω–∏
            channel_message_id INTEGER, -- ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ –ø—ñ—Å–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    # –î–æ–¥–∞—î–º–æ —Å—Ç–æ–≤–ø–µ—Ü—å seller_chat_id, —è–∫—â–æ –π–æ–≥–æ –Ω–µ —ñ—Å–Ω—É—î (–¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö –±–∞–∑ –¥–∞–Ω–∏—Ö)
    try:
        cursor.execute("SELECT seller_chat_id FROM products LIMIT 1")
    except sqlite3.OperationalError:
        cursor.execute("ALTER TABLE products ADD COLUMN seller_chat_id INTEGER")
        logging.info("–î–æ–¥–∞–Ω–æ —Å—Ç–æ–≤–ø–µ—Ü—å 'seller_chat_id' –¥–æ —Ç–∞–±–ª–∏—Ü—ñ 'products'.")

    # –î–æ–¥–∞—î–º–æ —Å—Ç–æ–≤–ø–µ—Ü—å channel_message_id, —è–∫—â–æ –π–æ–≥–æ –Ω–µ —ñ—Å–Ω—É—î (–¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö –±–∞–∑ –¥–∞–Ω–∏—Ö)
    try:
        cursor.execute("SELECT channel_message_id FROM products LIMIT 1")
    except sqlite3.OperationalError:
        cursor.execute("ALTER TABLE products ADD COLUMN channel_message_id INTEGER")
        logging.info("–î–æ–¥–∞–Ω–æ —Å—Ç–æ–≤–ø–µ—Ü—å 'channel_message_id' –¥–æ —Ç–∞–±–ª–∏—Ü—ñ 'products'.")

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            chat_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            is_blocked INTEGER DEFAULT 0, -- 0 - –Ω–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π, 1 - –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥—ñ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS statistics (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            action TEXT NOT NULL, -- –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'start', 'product_submitted', 'product_approved', 'product_sold'
            user_id INTEGER NOT NULL,
            product_id INTEGER, -- –º–æ–∂–µ –±—É—Ç–∏ NULL, —è–∫—â–æ –¥—ñ—è –Ω–µ —Å—Ç–æ—Å—É—î—Ç—å—Å—è —Ç–æ–≤–∞—Ä—É
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.commit()
    conn.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –∞–±–æ –≤–∂–µ —ñ—Å–Ω—É—î.")

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---
def save_user(message):
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO users (chat_id, username, first_name, last_name)
        VALUES (?, ?, ?, ?)
    ''', (message.chat.id, message.from_user.username, 
          message.from_user.first_name, message.from_user.last_name))
    conn.commit()
    conn.close()

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ---
def is_user_blocked(chat_id):
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute("SELECT is_blocked FROM users WHERE chat_id = ?", (chat_id,))
    result = cursor.fetchone()
    conn.close()
    return result and result[0] == 1

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---
def set_user_block_status(chat_id, status):
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET is_blocked = ? WHERE chat_id = ?", (status, chat_id))
    conn.commit()
    conn.close()

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ö–µ—à—Ç–µ–≥—ñ–≤ ---
def generate_hashtags(description, num_hashtags=5):
    # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—é —Ç–∞ —Ä–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —Å–ª–æ–≤–∞
    words = re.findall(r'\b\w+\b', description.lower())
    
    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∫–æ—Ä–æ—Ç–∫—ñ —Ç–∞ –ø–æ—à–∏—Ä–µ–Ω—ñ —Å–ª–æ–≤–∞, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –±—ñ–ª—å—à –∑–Ω–∞—á—É—â—ñ
    stopwords = set(['—è', '–º–∏', '—Ç–∏', '–≤–∏', '–≤—ñ–Ω', '–≤–æ–Ω–∞', '–≤–æ–Ω–æ', '–≤–æ–Ω–∏', '—Ü–µ', '—â–æ', '—è–∫', '–¥–µ', '–∫–æ–ª–∏', '–∞', '—ñ', '—Ç–∞', '–∞–±–æ', '—á–∏', '–¥–ª—è', '–∑', '–Ω–∞', '—É', '–≤', '–¥–æ', '–≤—ñ–¥', '–ø–æ', '–∑–∞', '–ø—Ä–∏', '–ø—Ä–æ', '–º—ñ–∂', '–ø—ñ–¥', '–Ω–∞–¥', '–±–µ–∑', '—á–µ—Ä–µ–∑', '–¥—É–∂–µ', '—Ü–µ–π', '—Ç–æ–π', '–º—ñ–π', '—Ç–≤—ñ–π', '–Ω–∞—à', '–≤–∞—à'])
    filtered_words = [word for word in words if len(word) > 2 and word not in stopwords]
    
    # –í–∏–±–∏—Ä–∞—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Å–ª–æ–≤–∞
    unique_words = list(set(filtered_words))
    
    # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à—ñ `num_hashtags` —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Å–ª—ñ–≤ –∞–±–æ –º–µ–Ω—à–µ, —è–∫—â–æ —ó—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ
    hashtags = ['#' + word for word in unique_words[:num_hashtags]]
    
    return " ".join(hashtags) if hashtags else ""

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥—ñ–π ---
def log_statistics(action, user_id, product_id=None):
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO statistics (action, user_id, product_id)
        VALUES (?, ?, ?)
    ''', (action, user_id, product_id))
    conn.commit()
    conn.close()

# --- –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start ---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    if is_user_blocked(message.chat.id):
        bot.send_message(message.chat.id, "‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    
    save_user(message) # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    log_statistics('start', message.chat.id) # –õ–æ–≥—É—î–º–æ –¥—ñ—é
    
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.chat.id} —Ä–æ–∑–ø–æ—á–∞–≤ –≤–∑–∞—î–º–æ–¥—ñ—é –∑ –±–æ—Ç–æ–º.")
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_add = telebot.types.KeyboardButton("üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä")
    item_my = telebot.types.KeyboardButton("üìã –ú–æ—ó —Ç–æ–≤–∞—Ä–∏")
    item_help = telebot.types.KeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞")
    item_channel = telebot.types.KeyboardButton("üì∫ –ù–∞—à –∫–∞–Ω–∞–ª")
    markup.add(item_add, item_my)
    markup.add(item_help, item_channel)
    
    welcome_text = (
        "üõçÔ∏è *–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±–æ—Ç–∞ –æ–≥–æ–ª–æ—à–µ–Ω—å!*\n\n"
        "–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ:\n"
        "üì¶ –î–æ–¥–∞–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂\n"
        "üìã –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å–≤–æ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n"
        "üì∫ –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–∏ –¥–æ –Ω–∞—à–æ–≥–æ –∫–∞–Ω–∞–ª—É\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:"
    )
    
    bot.send_message(message.chat.id, welcome_text, reply_markup=markup, parse_mode='Markdown')

# --- –ö–æ–º–∞–Ω–¥–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.chat.id != ADMIN_CHAT_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.")
        return
    
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"))
    markup.add(telebot.types.InlineKeyboardButton("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users"))
    markup.add(telebot.types.InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ", callback_data="admin_blocked"))
    
    bot.send_message(message.chat.id, "üîß *–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å*\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", 
                     reply_markup=markup, parse_mode='Markdown')

# --- –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
@bot.message_handler(content_types=['text'])
def handle_text(message):
    if is_user_blocked(message.chat.id):
        bot.send_message(message.chat.id, "‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    
    chat_id = message.chat.id
    
    if message.text in ["üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä", "–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä"]:
        start_add_product(message)
    elif message.text in ["üìã –ú–æ—ó —Ç–æ–≤–∞—Ä–∏", "–ú–æ—ó —Ç–æ–≤–∞—Ä–∏"]:
        send_my_products(message)
    elif message.text in ["‚ùì –î–æ–ø–æ–º–æ–≥–∞", "–î–æ–ø–æ–º–æ–≥–∞"]:
        send_help(message)
    elif message.text in ["üì∫ –ù–∞—à –∫–∞–Ω–∞–ª", "–ù–∞—à –∫–∞–Ω–∞–ª"]:
        send_channel_link(message)
    elif chat_id in user_data:
        process_product_input(message)
    else:
        bot.send_message(chat_id, "ü§ñ –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é –∞–±–æ –∫–æ–º–∞–Ω–¥–æ—é /start.")

# --- –§—É–Ω–∫—Ü—ñ—è –¥–æ–ø–æ–º–æ–≥–∏ ---
def send_help(message):
    help_text = (
        "üÜò *–î–æ–≤—ñ–¥–∫–∞ –ø–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—é –±–æ—Ç–∞*\n\n"
        "üì¶ *–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä* - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n"
        "üìã *–ú–æ—ó —Ç–æ–≤–∞—Ä–∏* - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–∞—à—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n"
        "üì∫ *–ù–∞—à –∫–∞–Ω–∞–ª* - –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª –∑ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è–º–∏\n\n"
        "üìù *–ü—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É:*\n"
        "1Ô∏è‚É£ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É\n"
        "2Ô∏è‚É£ –í–∫–∞–∂—ñ—Ç—å —Ü—ñ–Ω—É\n"
        "3Ô∏è‚É£ –î–æ–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ (–¥–æ 10 —à—Ç—É–∫)\n"
        "4Ô∏è‚É£ –ù–∞–ø–∏—à—ñ—Ç—å –æ–ø–∏—Å\n"
        "5Ô∏è‚É£ –û—á—ñ–∫—É–π—Ç–µ –º–æ–¥–µ—Ä–∞—Ü—ñ—é\n\n"
        "üí∞ *–ö–æ–º—ñ—Å—ñ—è:* 10% –∑ –ø—Ä–æ–¥–∞–∂—É\n"
        "‚è±Ô∏è *–ú–æ–¥–µ—Ä–∞—Ü—ñ—è:* –∑–∞–∑–≤–∏—á–∞–π –¥–æ 24 –≥–æ–¥–∏–Ω\n\n"
        "‚ùì –ü–∏—Ç–∞–Ω–Ω—è? –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ @admin" # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π —é–∑–µ—Ä–Ω–µ–π–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    )
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown')

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ú–æ—ó —Ç–æ–≤–∞—Ä–∏" ---
def send_my_products(message):
    chat_id = message.chat.id
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute("""
        SELECT product_name, status, price, created_at 
        FROM products 
        WHERE seller_chat_id = ? 
        ORDER BY created_at DESC
    """, (chat_id,))
    user_products = cursor.fetchall()
    conn.close()

    if user_products:
        response = "üìã *–í–∞—à—ñ —Ç–æ–≤–∞—Ä–∏:*\n\n"
        for i, (name, status, price, created_at) in enumerate(user_products, 1):
            status_emoji = {
                'pending': '‚è≥',
                'approved': '‚úÖ',
                'rejected': '‚ùå',
                'sold': 'üí∞'
            }
            status_ukr = {
                'pending': '–Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ',
                'approved': '–æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ',
                'rejected': '–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ',
                'sold': '–ø—Ä–æ–¥–∞–Ω–æ'
            }.get(status, status)
            
            response += f"{i}. {status_emoji.get(status, '‚ùì')} *{name}*\n"
            response += f"   üí∞ {price}\n"
            response += f"   üìÖ {created_at[:10]}\n" # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –¥–∞—Ç—É
            response += f"   üìä –°—Ç–∞—Ç—É—Å: {status_ukr}\n\n"
            
        bot.send_message(chat_id, response, parse_mode='Markdown')
    else:
        bot.send_message(chat_id, "üì≠ –í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–≤–∞–ª–∏ –∂–æ–¥–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä' —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤–æ—î –ø–µ—Ä—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è!")

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞—à –∫–∞–Ω–∞–ª" ---
def send_channel_link(message):
    chat_id = message.chat.id
    
    try:
        # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–∞–Ω–∞–ª
        chat_info = bot.get_chat(CHANNEL_ID)
        
        channel_link = ""
        if chat_info.invite_link:
            channel_link = chat_info.invite_link
        elif chat_info.username:
            channel_link = f"https://t.me/{chat_info.username}"
        else:
            # –Ø–∫—â–æ –Ω–µ–º–∞—î –Ω—ñ invite_link, –Ω—ñ username, —Å–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è
            # –¶–µ –º–æ–∂–µ –≤–∏–º–∞–≥–∞—Ç–∏ –ø—Ä–∞–≤ "–°—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è-–∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è" —É –±–æ—Ç–∞
            try:
                invite_link_obj = bot.create_chat_invite_link(CHANNEL_ID, member_limit=1)
                channel_link = invite_link_obj.invite_link
                logger.info(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–ª—è –∫–∞–Ω–∞–ª—É: {channel_link}")
            except telebot.apihelper.ApiTelegramException as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è-–∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–ª—è –∫–∞–Ω–∞–ª—É {CHANNEL_ID}: {e}")
                # Fallback –¥–æ —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —è–∫—â–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è
                if str(CHANNEL_ID).startswith('-100'):
                    channel_link = f"https://t.me/c/{str(CHANNEL_ID)[4:]}"
                else:
                    channel_link = f"https://t.me/your_channel_username_here" # –Ø–∫—â–æ CHANNEL_ID - —Ü–µ username
                
        if not channel_link:
             raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª.")
             
        invite_text = (
            f"üì∫ *–ù–∞—à –∫–∞–Ω–∞–ª –∑ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è–º–∏*\n\n"
            f"–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ–≥–æ –∫–∞–Ω–∞–ª—É, —â–æ–± –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –Ω–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏!\n\n"
            f"üëâ [–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞–Ω–∞–ª—É]({channel_link})\n\n"
            f"üí° –£ –∫–∞–Ω–∞–ª—ñ –ø—É–±–ª—ñ–∫—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è"
        )
        
        bot.send_message(chat_id, invite_text, parse_mode='Markdown', disable_web_page_preview=True)
        log_statistics('channel_visit', chat_id)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞–±–æ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª: {e}", exc_info=True)
        bot.send_message(chat_id, "‚ùå –ù–∞ –∂–∞–ª—å, –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

# --- –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ---
def start_add_product(message):
    chat_id = message.chat.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute("""
        SELECT COUNT(*) FROM products 
        WHERE seller_chat_id = ? AND status = 'pending'
    """, (chat_id,))
    pending_count = cursor.fetchone()[0]
    conn.close()
    
    if pending_count >= 3:  # –õ—ñ–º—ñ—Ç –Ω–∞ 3 —Ç–æ–≤–∞—Ä–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
        bot.send_message(chat_id, 
                        "‚ö†Ô∏è –£ –≤–∞—Å –≤–∂–µ —î 3 —Ç–æ–≤–∞—Ä–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó.\n"
                        "–î–æ—á–µ–∫–∞–π—Ç–µ—Å—è —Ä–æ–∑–≥–ª—è–¥—É –ø–æ—Ç–æ—á–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –ø–µ—Ä–µ–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º –Ω–æ–≤–∏—Ö.")
        return
    
    user_data[chat_id] = {'step': 'waiting_name', 'photos': []}
    bot.send_message(chat_id, 
                    "üìù *–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É*\n\n"
                    "–ö—Ä–æ–∫ 1/4: –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ–≥–æ —Ç–æ–≤–∞—Ä—É\n\n"
                    "üí° –ù–∞–∑–≤–∞ –º–∞—î –±—É—Ç–∏ –∑—Ä–æ–∑—É–º—ñ–ª–æ—é —Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—é",
                    parse_mode='Markdown')
    log_statistics('start_add_product', chat_id)

# --- –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ç–æ–≤–∞—Ä ---
@bot.message_handler(content_types=['text']) # –¶–µ–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
def process_product_input(message):
    chat_id = message.chat.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
    if chat_id not in user_data:
        # –Ø–∫—â–æ –Ω—ñ, —Ü–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –Ω–µ —î —á–∞—Å—Ç–∏–Ω–æ—é –ø—Ä–æ—Ü–µ—Å—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É.
        # –ó–∞–≥–∞–ª—å–Ω–∏–π handle_text –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î –∫–Ω–æ–ø–∫–∏, —Ç–æ–º—É —Ç—É—Ç –º–æ–∂–µ–º–æ –ø—Ä–æ—Å—Ç–æ –≤–∏–π—Ç–∏.
        return 

    current_step = user_data[chat_id]['step']

    if current_step == 'waiting_name':
        if not (3 <= len(message.text) <= 100):
            bot.send_message(chat_id, "‚ùå –ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ 3 –¥–æ 100 —Å–∏–º–≤–æ–ª—ñ–≤.")
            return
            
        user_data[chat_id]['name'] = message.text
        user_data[chat_id]['step'] = 'waiting_price'
        bot.send_message(chat_id, 
                        "üí∞ *–ö—Ä–æ–∫ 2/4: –¶—ñ–Ω–∞*\n\n"
                        "–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '100 –≥—Ä–Ω', '50$', '–î–æ–≥–æ–≤—ñ—Ä–Ω–∞' –∞–±–æ '–û–±–º—ñ–Ω'):",
                        parse_mode='Markdown')
        
    elif current_step == 'waiting_price':
        if len(message.text) > 50:
            bot.send_message(chat_id, "‚ùå –¶—ñ–Ω–∞ –∑–∞–Ω–∞–¥—Ç–æ 